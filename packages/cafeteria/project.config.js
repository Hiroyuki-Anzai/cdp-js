'use strict';

const pkg   = require('./package.json');

const target = {
    type: 'mobile',
    es: 'es5',
    module: 'amd',
    env: 'web',
};

const dir = {
    src: 'app',
    pkg: 'www',
    built: 'app',
    doc: 'docs',
    task: 'tasks',
    test: 'tests',
    types: '@types',
    temp: '.temp',
    lib: 'lib',
    external: 'external',
    porting: 'porting',
    res: 'res',
    script: 'scripts',
    stylesheet: 'stylesheets',
    template: 'templates',
};

const external_rearrange = {
    root: `${dir.src}/${dir.external}`,
    ignore_modules: [
        '^cordova-',
        '^@types',
    ],
    module_adjuster: {
        'requirejs': {
            cwd: '.',
            dev: 'require.js',
        },
        'hogan.js': {
            vender: 'hogan',
            rename: 'hogan',
            cwd: './dist',
            dev: 'hogan-*.amd.js',
            prod: 'hogan-*.min.amd.js',
            ignore: {
                dev: ['*.min.amd.js'],
            },
        },
        'jquery-hammerjs': {
            vender: 'hammerjs',
        },
        'iscroll': {
            dev: 'iscroll-probe.js',
        },
    },
};

const built_cleanee = {
    ts: ['**/*.js', '**/*.map', `!${dir.external}/**`, `!${dir.res}/**`],
    scss: ['**/*.css', '**/*.map', `!${dir.external}/**`, `!${dir.res}/**`],
};

const build_settings = {
    copy_src: {
        dev_resource: ['samples'],
    },
    string_replace: {
        // dev-func を有効にする場合は、release より先に enalbe などを設定
        'dev-func': {
            '%% dev_functions_enabled %%': 'enable',    // 置換対象が1つのときはオプションなしでデフォルト
        },
        'server': {
            '%% target_server %%': 'prod|dev|stg|qa',   // 配列が2つ以上あるときはいずれか1つの値をとる. 誤りがあればエラー
        },
        'runtime-context': {
            '%% runtime_context %%': false,             // false の場合、引数は任意. デフォルトは空に置換
        },
        'release': {
            '%% build_setting %%': true,                // true の場合、必ず空に置換
            '%% dev_functions_enabled %%': true,
        },
    },
    hook_scripts: {
        // called all files setup to pkg
        after_setup: {
            // <npm script name>: <need option argument>
        },
        // called after minfiy
        after_optimize: {
            // <npm script name>: <need option argument>
        },
    },
};

const banner = {
    fileName: 'BANNER',
    d_ts_desc: '\n * This file is generated by the CDP package build process.',
};

const required_tasks = [
    'banner.js',
    'build-addon.js',
    'bundle-finalizer.js',
    'clean.js',
    'command.js',
    'compile-scss.js',
    'compile-ts.js',
    'copy.js',
    'cordova-receiver.js',
    'external-rearrange.js',
    'instrument.js',
    'minify.js',
    'porting-setup.js',
    'remap-coverage.js',
    'srcmap.js',
    'string-replace.js',
    'tsconfig-templates.js',
];

// project configuration
module.exports = {
    target: target,
    pkg: pkg,
    dir: dir,
    external_rearrange: external_rearrange,
    built_cleanee: built_cleanee,
    build_settings: build_settings,
    banner: banner,
    required_tasks: required_tasks,
};
