{"version":3,"sources":["cdp:///CDP/UI/jqm/Theme.ts","cdp:///CDP/UI/jqm/ExtensionManager.ts","cdp:///CDP/UI/jqm/Toast.ts","cdp:///CDP/UI/jqm/Dialog.ts","cdp:///CDP/UI/jqm/DialogCommons.ts","cdp:///CDP/UI/jqm/BaseHeaderView.ts","cdp:///CDP/UI/jqm/BasePage.ts","cdp:///CDP/UI/jqm/PageView.ts","cdp:///CDP/UI/jqm/PageListView.ts","cdp:///CDP/UI/jqm/PageExpandableListView.ts","cdp:///CDP/UI/jqm/Extension/Ripple.ts","cdp:///CDP/UI/jqm/Extension/Spinner.ts","cdp:///CDP/UI/jqm/Extension/FloatLabel.ts","cdp:///CDP/UI/jqm/Extension/FlipSwitch.ts","cdp:///CDP/UI/jqm/Extension/Slider.ts","cdp:///CDP/UI/jqm/Extension/IScroll.ts"],"names":["CDP","UI","applyCustomChangePage","jqmChangePage","_","bind","$","mobile","changePage","to","options","isString","transition","Theme","queryPageTransition","Config","Framework","getCurrentUIPlatform","$htms","i","n","this","s_platforms","length","hasClass","setCurrentUIPlatform","platform","indexOf","$htms_1","forEach","target","removeClass","addClass","detectUIPlatform","Platform","iOS","DEBUG","Mobile","css","setUIPlatforms","platforms","setPageTransitionMap","map","s_pageTransitionMap","setDialogTransitionMap","s_dialogTransitionMap","original","convert","fallback","queryDialogTransition","platform-default","ios","android","platform-alternative","waitForInitialize","done","ExtensionManager","registerDomExtension","func","s_domExtensions","push","applyDomExtension","$ui","TAG","Toast","LENGTH_SHORT","LENGTH_LONG","OffsetX","OffsetY","StyleBuilderDefault","prototype","getClass","getStyle","padding","display","background-color","border-color","color","text-shadow","font-weight","opacity","getOffsetPoint","CENTER","BOTTOM","getOffsetX","getOffsetY","show","message","duration","style","$mobile","info","setCSS","html","replace","box","top","left","appendTo","pageContainer","posX","posY","offsetPoint","$window","window","box_width","width","parseInt","box_height","height","LEFT","RIGHT","console","warn","TOP","delay","fadeOut","remove","Promise","Dialog","id","_template","_settings","_$dialog","initCommonCondition","extend","s_defaultOptions","Tools","Template","getJST","src","_this","$document","document","$body","$page","pagecontainer","ofcHidden","overflow","overflow-x","overflow-y","ofcBody","parentScrollPos","scrollTop","ofcPage","scrollEvent","scrollHander","event","preventDefault","afterclose","forceOverwriteAfterClose","_titleState","title","localize","append","resolveTheme","on","register","enhanceWithin","domExtensionOptions","onBeforeShow","popup","positionTo","ui","off","autoClose","attr","defaultAutoClose","close","fail","error","trigger","Object","defineProperty","resolve","candidateTheme","queryTheme","jqmData","theme","overlayTheme","setDefaultOptions","dialog","s_activeDialog","isInitialized","s_oldBackKeyHandler","setBackButtonHandler","customBackKeyHandler","idPositive","idNegative","getDefaultClickEvent","dismissible","labelPositive","labelNegative","backKey","alert","confirm","DialogPrompt","_super","call","_eventOK","eventOK","__extends","$el","text","find","val","prompt","Router","View","BaseHeaderView","_owner","_options","el","backCommandSelector","backCommandKind","baseTemplate","setElement","create","createHeaderBase","activate","showIndicator","inactivate","hideIndicator","release","releaseHeaderBase","$header","s_$headerBase","s_refCount","body","_hasBackIndicator","events","eventMap","onCommandBack","handled","onCommand","back","BasePage","url","baseHeader","backCommandHandler","onPageBeforeCreate","_baseHeader","onPageInit","onPageBeforeShow","data","onPageBeforeHide","onPageRemove","onHardwareBackButton","retval","kind","Page","PageContainerView","owner","delegates","PageView","_pageOptions","_basePage","_statusMgr","basePage","StatusManager","statusAddRef","status","statusRelease","statusScope","callback","isStatusIn","active","$footer","intent","newIntent","onOrientationChanged","newOrientation","onBeforeRouteChange","onInitialize","onPageShow","onPageHide","PageListView","autoDestoryElement","_scrollMgr","_needRebuild","ScrollManager","reserveRebuild","setBaseHeight","getPageBaseHeight","destroy","initialize","rebuild","addItem","initializer","insertTo","_addLine","LineProfile","Math","floor","removeItem","index","arg2","arg3","getItemInfo","refresh","update","backup","key","restore","hasBackup","clearBackup","backupData","setScrollHandler","handler","setScrollStopHandler","getScrollPos","getScrollPosMax","scrollTo","pos","animate","time","ensureVisible","_line","PageExpandableListView","_expandManager","ExpandManager","newGroup","getGroup","registerTopGroup","topGroup","getTopGroups","expandAll","collapseAll","isExpanding","isCollapsing","isSwitching","layoutKey","Extension","fn","ripple","Patch","s_vclickEvent","surface","prepend","ink","d","max","outerWidth","outerHeight","x","pageX","offset","y","pageY","rippleColor","ev","background","NO_RIPPLE_CLASS","selector","filter","elem","is","join","$target","makeTemplateParam","borderTop","border","spinnerify","$elem","param","each","spinner","floating","floatingify","$input","_getAllSwitches","_getInputFromSwitch","$switch","$select","_change","nodeName","prop","flipswitch","_getLabelsFromSwitch","labels","_getSwitchFromLabel","$label","name","currentTarget","changeTo","isSupportedVclick","parent","blur","patch_IScroll_utils_click","e","clientX","clientY","changedTouches","test","tagName","createEvent","initMouseEvent","view","screenX","screenY","ctrlKey","altKey","shiftKey","metaKey","_constructed","dispatchEvent","s_applied","global","IScroll","utils","click"],"mappings":"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","sourcesContent":["namespace CDP.UI {\r\n\r\n    import Config       = CDP.Config;\r\n    import Framework    = CDP.Framework;\r\n\r\n    /**\r\n     * @interface TransitionMap\r\n     * @brief トランジションマップ\r\n     */\r\n    export interface PlatformTransition {\r\n        [platform: string]: string;     //!< ex) ios: \"slide\"\r\n        fallback: string;               //!< fallback transition prop\r\n    }\r\n\r\n    /**\r\n     * @interface TransitionMap\r\n     * @brief トランジションマップ\r\n     */\r\n    export interface TransitionMap {\r\n        [transitionName: string]: PlatformTransition;\r\n    }\r\n\r\n    //__________________________________________________________________________________________________________//\r\n\r\n    /**\r\n     * @class Theme\r\n     * @brief UI Theme 設定を行うユーティリティクラス\r\n     */\r\n    export class Theme {\r\n\r\n        private static s_platforms: string[] = [\"ios\", \"android\"];\r\n        private static s_pageTransitionMap: TransitionMap = {\r\n            \"platform-default\": {\r\n                ios: \"slide\",\r\n                android: \"floatup\",\r\n                fallback: \"slide\",\r\n            },\r\n            \"platform-alternative\": {\r\n                ios: \"slideup\",\r\n                android: \"floatup\",\r\n                fallback: \"slideup\",\r\n            },\r\n        };\r\n        private static s_dialogTransitionMap: TransitionMap = {\r\n            \"platform-default\": {\r\n                ios: \"popzoom\",\r\n                android: \"crosszoom\",\r\n                fallback: \"none\",\r\n            },\r\n        };\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // public static methods:\r\n\r\n        /**\r\n         * 現在指定されている UI Platform を取得\r\n         *\r\n         * @return {String} ex) \"ios\"\r\n         */\r\n        public static getCurrentUIPlatform(): string {\r\n            const $htms = $(\"html\");\r\n            for (let i = 0, n = this.s_platforms.length; i < n; i++) {\r\n                if ($htms.hasClass(\"ui-platform-\" + this.s_platforms[i])) {\r\n                    return this.s_platforms[i];\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n\r\n        /**\r\n         * UI Platform を設定\r\n         *\r\n         * @return {String} true: 成功 / false: 失敗\r\n         */\r\n        public static setCurrentUIPlatform(platform: string): boolean {\r\n            if (null == platform || this.s_platforms.indexOf(platform) >= 0) {\r\n                const $htms = $(\"html\");\r\n                this.s_platforms.forEach((target) => {\r\n                    $htms.removeClass(\"ui-platform-\" + target);\r\n                });\r\n                if (platform) {\r\n                    $htms.addClass(\"ui-platform-\" + platform);\r\n                }\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * 現在の Platform を判定し最適な platform を自動決定\r\n         *\r\n         * @return {String} ex) \"ios\"\r\n         */\r\n        public static detectUIPlatform(): void {\r\n            // platform の設定\r\n            if (Framework.Platform.iOS) {\r\n                $(\"html\").addClass(\"ui-platform-ios\");\r\n            } else {\r\n                $(\"html\").addClass(\"ui-platform-android\");\r\n            }\r\n            // PC デバッグ環境ではスクロールバーを表示\r\n            if (Config.DEBUG && !Framework.Platform.Mobile) {\r\n                $(\"body\").css(\"overflow-y\", \"scroll\");\r\n            }\r\n        }\r\n\r\n        /**\r\n         * platform を配列で設定\r\n         * 上書きされる\r\n         *\r\n         * @param {String[]} platforms [in] OS ex): [\"ios\", \"android\"]\r\n         */\r\n        public static setUIPlatforms(platforms: string[]): void {\r\n            if (platforms) {\r\n                this.s_platforms = platforms;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * page transition を設定\r\n         * 上書きされる\r\n         *\r\n         * @param {TransitionMap} map [in] TransitionMap を指定\r\n         */\r\n        public static setPageTransitionMap(map: TransitionMap): void {\r\n            if (map) {\r\n                this.s_pageTransitionMap = map;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * dialog transition を設定\r\n         * 上書きされる\r\n         *\r\n         * @param {TransitionMap} map [in] TransitionMap を指定\r\n         */\r\n        public static setDialogTransitionMap(map: TransitionMap): void {\r\n            if (map) {\r\n                this.s_dialogTransitionMap = map;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * page transition を取得\r\n         * TransitionMap にアサインされているものであれば変換\r\n         *\r\n         * @return {String[]} \"slide\"\r\n         */\r\n        public static queryPageTransition(original: string): string {\r\n            const convert = this.s_pageTransitionMap[original];\r\n            if (convert) {\r\n                return convert[this.getCurrentUIPlatform()] || convert.fallback;\r\n            } else {\r\n                return original;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * dialog transition を取得\r\n         * TransitionMap にアサインされているものであれば変換\r\n         *\r\n         * @return {String[]} \"slide\"\r\n         */\r\n        public static queryDialogTransition(original: string): string {\r\n            const convert = this.s_dialogTransitionMap[original];\r\n            if (convert) {\r\n                return convert[this.getCurrentUIPlatform()] || convert.fallback;\r\n            } else {\r\n                return original;\r\n            }\r\n        }\r\n    }\r\n\r\n    //__________________________________________________________________________________________________________//\r\n\r\n    // jquey.mobile.changePage() の Hook.\r\n    function applyCustomChangePage() {\r\n        const jqmChangePage: (to: any, options?: ChangePageOptions) => void = _.bind($.mobile.changePage, $.mobile);\r\n\r\n        function customChangePage(to: any, options?: ChangePageOptions): void {\r\n            if (_.isString(to)) {\r\n                if (options && options.transition) {\r\n                    options.transition = Theme.queryPageTransition(options.transition);\r\n                }\r\n            }\r\n            jqmChangePage(to, options);\r\n        }\r\n\r\n        $.mobile.changePage = customChangePage;\r\n    }\r\n\r\n    // framework 初期化後に適用\r\n    Framework.waitForInitialize()\r\n        .done(() => {\r\n            applyCustomChangePage();\r\n        });\r\n}\r\n","namespace CDP.UI {\r\n\r\n    /**\r\n     * @interface DomExtensionOptions\r\n     * @breif DomExtension に渡すオプションインターフェイス\r\n     */\r\n    export interface DomExtensionOptions {\r\n        [key: string]: any;\r\n    }\r\n\r\n    /**\r\n     * @type DomExtension\r\n     * @brief DOM 拡張関数\r\n     */\r\n    export type DomExtension = ($target: JQuery, DomExtensionOptions?: Object) => JQuery;\r\n\r\n    //__________________________________________________________________________________________________________//\r\n\r\n    /**\r\n     * @class ExtensionManager\r\n     * @brief 拡張機能を管理するユーティリティクラス\r\n     */\r\n    export class ExtensionManager {\r\n\r\n        private static s_domExtensions: DomExtension[] = [];\r\n\r\n        /**\r\n         * DOM 拡張関数の登録\r\n         *\r\n         * @param {DomExtension} func [in] DOM 拡張関数\r\n         */\r\n        public static registerDomExtension(func: DomExtension): void {\r\n            this.s_domExtensions.push(func);\r\n        }\r\n\r\n        /**\r\n         * DOM 拡張を適用\r\n         *\r\n         * @param {jQuery} $ui       [in] 拡張対象の DOM\r\n         * @param {Object} [options] [in] オプション\r\n         */\r\n        public static applyDomExtension($ui: JQuery, options?: DomExtensionOptions): void {\r\n            this.s_domExtensions.forEach((func: DomExtension) => {\r\n                func($ui, options);\r\n            });\r\n        }\r\n    }\r\n}\r\n","/* tslint:disable:no-bitwise */\r\n\r\nnamespace CDP.UI {\r\n\r\n    const TAG = \"[CDP.UI.Toast] \";\r\n\r\n    /**\r\n     * @class Toast\r\n     * @brief Android SDK の Toast クラスのように自動消滅するメッセージ出力ユーティリティ\r\n     *        入れ子の関係を実現するために module で実装\r\n     */\r\n    export module Toast {\r\n\r\n        // 表示時間の定義\r\n        export let LENGTH_SHORT = 1500;   //!< 短い:1500 msec\r\n        export let LENGTH_LONG  = 4000;   //!< 長い:4000 msec\r\n\r\n        //! @enum オフセットの基準\r\n        export enum OffsetX {\r\n            LEFT    = 0x0001,\r\n            RIGHT   = 0x0002,\r\n            CENTER  = 0x0004,\r\n        }\r\n\r\n        //! @enum オフセットの基準\r\n        export enum OffsetY {\r\n            TOP     = 0x0010,\r\n            BOTTOM  = 0x0020,\r\n            CENTER  = 0x0040,\r\n        }\r\n\r\n        /**\r\n         * @interface StyleBuilder\r\n         * @brief     スタイル変更時に使用するインターフェイス\r\n         *            css にスタイルを逃がす場合、独自の class を設定し、getStyle は null を返すこと。\r\n         */\r\n        export interface StyleBuilder {\r\n            //! class attribute に設定する文字列を取得\r\n            getClass(): string;\r\n            //! style attribute に設定する JSON オブジェクトを取得\r\n            getStyle(): any;\r\n            //! オフセットの基準位置を取得\r\n            getOffsetPoint(): number;\r\n            //! X 座標のオフセット値を取得\r\n            getOffsetX(): number;\r\n            //! Y 座標のオフセット値を取得\r\n            getOffsetY(): number;\r\n        }\r\n\r\n        /**\r\n         * @class StyleBuilderDefault\r\n         * @brief スタイル変更時に使用する既定の構造体オブジェクト\r\n         */\r\n        export class StyleBuilderDefault implements StyleBuilder {\r\n\r\n            //! class attribute に設定する文字列を取得\r\n            getClass(): string {\r\n                return \"ui-loader ui-overlay-shadow ui-corner-all\";\r\n            }\r\n\r\n            //! style attribute に設定する JSON オブジェクトを取得\r\n            getStyle(): any {\r\n                const style = {\r\n                    \"padding\":          \"7px 25px 7px 25px\",\r\n                    \"display\":          \"block\",\r\n                    \"background-color\": \"#1d1d1d\",\r\n                    \"border-color\":     \"#1b1b1b\",\r\n                    \"color\":            \"#fff\",\r\n                    \"text-shadow\":      \"0 1px 0 #111\",\r\n                    \"font-weight\":      \"bold\",\r\n                    \"opacity\":          0.8,\r\n                };\r\n                return style;\r\n            }\r\n\r\n            //! オフセットの基準位置を取得\r\n            getOffsetPoint(): number {\r\n                return OffsetX.CENTER | OffsetY.BOTTOM;\r\n            }\r\n\r\n            //! X 座標のオフセット値を取得\r\n            getOffsetX(): number {\r\n                return 0;\r\n            }\r\n\r\n            //! Y 座標のオフセット値を取得\r\n            getOffsetY(): number {\r\n                return -75;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Toast 表示\r\n         *\r\n         * @param message  [in] メッセージ\r\n         * @param duration [in] 表示時間を設定 (msec) default: LENGTH_SHORT\r\n         * @param style    [in] スタイル変更する場合には派生クラスオブジェクトを指定\r\n         */\r\n        export function show(message: string, duration: number = Toast.LENGTH_SHORT, style?: StyleBuilder): void {\r\n            const $mobile = $.mobile;\r\n            const info = style || new StyleBuilderDefault();\r\n            const setCSS = info.getStyle() ? true : false;\r\n\r\n            // 改行コードは <br/> に置換する\r\n            const msg = message.replace(/\\n/g, \"<br/>\");\r\n\r\n            // メッセージ element の動的生成\r\n            const html = \"<div>\" + msg + \"</div>\";\r\n            const box = $(html).addClass(info.getClass());\r\n            if (setCSS) {\r\n                box.css(info.getStyle());\r\n            }\r\n\r\n            // 自動改行されてもよいように、基点を設定してから追加\r\n            box.css({\r\n                \"top\": 0,\r\n                \"left\": 0,\r\n            }).appendTo($mobile.pageContainer);\r\n\r\n            // 配置位置の決定\r\n            const offsetPoint = info.getOffsetPoint();\r\n            const $window = $(window);\r\n            let posX, posY;\r\n\r\n            const box_width = box.width() + parseInt(box.css(\"padding-left\"), 10) + parseInt(box.css(\"padding-right\"), 10);\r\n            const box_height = box.height() + parseInt(box.css(\"padding-top\"), 10) + parseInt(box.css(\"padding-bottom\"), 10);\r\n\r\n            switch (offsetPoint & 0x000F) {\r\n                case OffsetX.LEFT:\r\n                    posX = 0 + info.getOffsetX();\r\n                    break;\r\n                case OffsetX.RIGHT:\r\n                    posX = $window.width() - box_width + info.getOffsetX();\r\n                    break;\r\n                case OffsetX.CENTER:\r\n                    posX = ($window.width() / 2) - (box_width / 2) + info.getOffsetX();\r\n                    break;\r\n                default:\r\n                    console.warn(TAG + \"warn. unknown offsetPoint:\" + (offsetPoint & 0x000F));\r\n                    posX = ($window.width() / 2) - (box_width / 2) + info.getOffsetX();\r\n                    break;\r\n            }\r\n\r\n            switch (offsetPoint & 0x00F0) {\r\n                case OffsetY.TOP:\r\n                    posY = 0 + info.getOffsetY();\r\n                    break;\r\n                case OffsetY.BOTTOM:\r\n                    posY = $window.height() - box_height + info.getOffsetY();\r\n                    break;\r\n                case OffsetY.CENTER:\r\n                    posY = ($window.height() / 2) - (box_height / 2) + info.getOffsetY();\r\n                    break;\r\n                default:\r\n                    console.warn(TAG + \"warn. unknown offsetPoint:\" + (offsetPoint & 0x00F0));\r\n                    posY = ($window.height() / 2) - (box_height / 2) + info.getOffsetY();\r\n                    break;\r\n            }\r\n\r\n            // 表示\r\n            box.css({\r\n                \"top\": posY,\r\n                \"left\": posX,\r\n            })\r\n            .delay(duration)\r\n            .fadeOut(400, function () {\r\n                $(this).remove();\r\n            });\r\n        }\r\n    }\r\n}\r\n","namespace CDP.UI {\r\n\r\n    import Promise      = CDP.Promise;\r\n    import Framework    = CDP.Framework;\r\n\r\n    const TAG = \"[CDP.UI.Dialog] \";\r\n\r\n    /**\r\n     * H/W Back Key Hook 関数\r\n     */\r\n    export type DialogBackKeyHandler = (event?: JQuery.Event) => void;\r\n\r\n    /**\r\n     * @interface DialogOptions\r\n     *            ダイアログオプションインターフェイス\r\n     */\r\n    export interface DialogOptions extends PopupOptions {\r\n        src?: string;                   //!< {String} template ファイルのパス                                 default: undefined\r\n        title?: string;                 //!< {String} ダイアログタイトル                                      default: undefined\r\n        message?: string;               //!< {String} メインメッセージ                                        default: undefined\r\n        idPositive?: string;            //!< {String} Positive ボタンのID                                     default: \"dlg-btn-positive\"\r\n        idNegative?: string;            //!< {String} Nagative ボタンのID                                     default: \"dlg-btn-negative\"\r\n        event?: string;                 //!< {String} Dialog クラスが管理するイベント                         default: \"vclick\"\r\n        defaultAutoClose?: boolean;     //!< {Boolean} data-auto-close が指定されていない場合の既定値         default: false\r\n        forceOverwriteAfterClose?: boolean; //!< {Boolean} afterclose オプションを強制上書きするための設定    default: false\r\n        labelPositive?: string;         //!< {String} Positive ボタンラベル                                   default: \"OK\"\r\n        labelNegative?: string;         //!< {String} Negative ボタンラベル                                   default: \"Cancel\"\r\n        backKey?: \"close\" | \"deny\" | DialogBackKeyHandler;  //!< H/W backKey の振る舞い                       default: \"close\"\r\n        scrollEvent?: \"deny\" | \"allow\" | \"adjust\";   //!< {String} scrollの抑止方式  (※ adjust は試験的)     default: \"deny\"\r\n        domExtensionOptions?: DomExtensionOptions;   //!< DOM拡張オプション. null|undefined で拡張しない      default: {}\r\n        [x: string]: any;               //!< any dialog template parameters.\r\n    }\r\n\r\n    //___________________________________________________________________________________________________________________//\r\n\r\n    /**\r\n     * @class Dialog\r\n     * @brief 汎用ダイアログクラス\r\n     *        jQM の popup widget によって実装\r\n     */\r\n    export class Dialog {\r\n\r\n        private _template: Tools.JST = null;\r\n        private _settings: DialogOptions = null;\r\n        private _$dialog: JQuery = null;\r\n\r\n        private static s_activeDialog: Dialog = null;\r\n        private static s_oldBackKeyHandler: (event?: JQuery.Event) => void = null;\r\n        private static s_defaultOptions: DialogOptions = null;\r\n\r\n        /**\r\n         * constructor\r\n         *\r\n         * @param id      {String}        [in] ダイアログ DOM ID を指定 ex) #dialog-hoge\r\n         * @param options {DialogOptions} [in] オプション\r\n         */\r\n        constructor(id: string, options?: DialogOptions) {\r\n            // Dialog 共通設定の初期化\r\n            Dialog.initCommonCondition();\r\n            // 設定を更新\r\n            this._settings = $.extend({}, Dialog.s_defaultOptions, options);\r\n            // ダイアログテンプレートを作成\r\n            this._template = Tools.Template.getJST(id, this._settings.src);\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // public methods\r\n\r\n        /**\r\n         * 表示\r\n         * 表示をして始めて DOM が有効になる。\r\n         *\r\n         * @param options {DialogOptions} [in] オプション (src は無視される)\r\n         * @return ダイアログの jQuery オブジェクト\r\n         */\r\n        public show(options?: DialogOptions): JQuery {\r\n            const $document = $(document);\r\n            const $body = $(\"body\");\r\n            const $page = (<any>$body).pagecontainer(\"getActivePage\");\r\n\r\n            const ofcHidden = {\r\n                \"overflow\":     \"hidden\",\r\n                \"overflow-x\":   \"hidden\",\r\n                \"overflow-y\":   \"hidden\",\r\n            };\r\n            const ofcBody = { // body overflow context\r\n                \"overflow\":     $body.css(\"overflow\"),\r\n                \"overflow-x\":   $body.css(\"overflow-x\"),\r\n                \"overflow-y\":   $body.css(\"overflow-y\"),\r\n            };\r\n            const parentScrollPos = $body.scrollTop();\r\n            const ofcPage = { // page overflow context\r\n                \"overflow\":     $page.css(\"overflow\"),\r\n                \"overflow-x\":   $page.css(\"overflow-x\"),\r\n                \"overflow-y\":   $page.css(\"overflow-y\"),\r\n            };\r\n\r\n            const scrollEvent = \"scroll touchmove mousemove MSPointerMove\";\r\n\r\n            const scrollHander = (event: JQuery.Event) => {\r\n                if (\"deny\" === this._settings.scrollEvent) {\r\n                    event.preventDefault();\r\n                } else if (\"adjust\" === this._settings.scrollEvent) {\r\n                    $body.scrollTop(parentScrollPos);\r\n                }\r\n            };\r\n\r\n            // option が指定されていた場合更新\r\n            if (null != options) {\r\n                this._settings = $.extend({}, this._settings, options);\r\n            }\r\n\r\n            // afterclose 処理は Dialog の破棄処理を実装するため基本的に設定禁止 (強制上書きモードを設定使用可)\r\n            if (this._settings.afterclose && !this._settings.forceOverwriteAfterClose) {\r\n                console.warn(TAG + \"cannot accept 'afterclose' option. please instead using 'popupafterclose' event.\");\r\n                delete this._settings.afterclose;\r\n            }\r\n\r\n            // title の有無\r\n            (<any>this._settings)._titleState = this._settings.title ? \"ui-has-title\" : \"ui-no-title\";\r\n\r\n            /*\r\n             * template から jQuery オブジェクトを作成し、\r\n             * <body> 直下に追加.\r\n             * $page では Backbone event を受けられないことに注意\r\n             */\r\n            this._$dialog = $(this._template(this._settings));\r\n            this._$dialog.localize();\r\n            $body.append(this._$dialog);\r\n\r\n            // theme を解決\r\n            this.resolveTheme();\r\n\r\n            this._$dialog\r\n                .on(\"popupcreate\", (event: JQuery.Event) => {\r\n                    // スクロールを抑止\r\n                    if (\"allow\" !== this._settings.scrollEvent) {\r\n                        $document.on(scrollEvent, scrollHander);\r\n                    }\r\n                    $body.css(ofcHidden);\r\n                    $page.css(ofcHidden);\r\n                    Dialog.register(this);\r\n                })\r\n                .enhanceWithin();\r\n\r\n            // DOM 拡張\r\n            if (null != this._settings.domExtensionOptions) {\r\n                ExtensionManager.applyDomExtension(this._$dialog, this._settings.domExtensionOptions);\r\n            }\r\n\r\n            this.onBeforeShow()\r\n                .done(() => {\r\n                    // 表示\r\n                    this._$dialog\r\n                        .popup($.extend({}, {\r\n                            positionTo: \"window\",\r\n                            afterclose: (event: JQuery.Event, ui: any) => {\r\n                                // スクロール状態を戻す\r\n                                $page.css(ofcPage);\r\n                                $body.css(ofcBody);\r\n                                if (\"allow\" !== this._settings.scrollEvent) {\r\n                                    $document.off(scrollEvent, scrollHander);\r\n                                }\r\n                                Dialog.register(null);\r\n                                this._$dialog.remove();\r\n                                this._$dialog = null;\r\n                            },\r\n                        }, this._settings))\r\n                        .popup(\"open\").on(this._settings.event, (event: JQuery.Event) => {\r\n                            // \"data-auto-close='false'\" が指定されている要素は dialog を閉じない\r\n                            let autoClose = $(event.target).attr(\"data-auto-close\");\r\n                            if (null == autoClose) {\r\n                                autoClose = this._settings.defaultAutoClose ? \"true\" : \"false\";\r\n                            }\r\n                            if (\"false\" === autoClose) {\r\n                                return;\r\n                            }\r\n                            this.close();\r\n                            event.preventDefault();\r\n                        });\r\n\r\n                })\r\n                .fail((error) => {\r\n                    console.error(TAG + \"Dialog.show() failed.\");\r\n                    if (this._$dialog) {\r\n                        this._$dialog.trigger(\"error\", error);\r\n                    }\r\n                });\r\n\r\n            return this._$dialog;\r\n        }\r\n\r\n        /**\r\n         * 終了\r\n         * 基本的には自動で閉じるが、\r\n         * 表示中のダイアログをクライアント側から閉じるメソッド\r\n         */\r\n        public close(): void {\r\n            if (this._$dialog) {\r\n                this._$dialog.popup(\"close\");\r\n            }\r\n        }\r\n\r\n        //! ダイアログ element を取得\r\n        public get $el(): JQuery {\r\n            return this._$dialog;\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // protected methods: Override\r\n\r\n        /**\r\n         * ダイアログ表示の直前\r\n         * DOM を操作できるタイミングで呼び出される.\r\n         *\r\n         * @return {IPromiseBase} promise オブジェクト\r\n         */\r\n        protected onBeforeShow(): IPromiseBase<void> {\r\n            return Promise.resolve<void>();\r\n        }\r\n\r\n        /**\r\n         * ダイアログの使用する Theme を解決\r\n         * 不要な場合はオーバーライドすることも可能\r\n         */\r\n        protected resolveTheme(): void {\r\n            const queryTheme = (): string => {\r\n                return $(\".ui-page-active\").jqmData(\"theme\");\r\n            };\r\n\r\n            let candidateTheme: string;\r\n\r\n            if (!this._settings.theme) {\r\n                const domTheme = this._$dialog.jqmData(\"theme\");\r\n                if (!domTheme) {\r\n                    this._settings.theme = candidateTheme = queryTheme();\r\n                }\r\n\r\n            }\r\n            if (!this._settings.overlayTheme) {\r\n                const domOverlayTheme = this._$dialog.jqmData(\"overlay-theme\");\r\n                if (!domOverlayTheme) {\r\n                    this._settings.overlayTheme = candidateTheme || queryTheme();\r\n                }\r\n            }\r\n\r\n            // transition の更新\r\n            this._settings.transition = Theme.queryDialogTransition(this._settings.transition);\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // public static methods\r\n\r\n        /**\r\n         * Dialog の既定オプションを更新\r\n         * すぺての Dialog が使用する共通設定\r\n         *\r\n         * @param options {DialogOptions} [in] ダイアログオプション\r\n         */\r\n        public static setDefaultOptions(options: DialogOptions): void {\r\n            // Dialog 共通設定の初期化\r\n            Dialog.initCommonCondition();\r\n            $.extend(true, Dialog.s_defaultOptions, options);\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // private methods\r\n\r\n        //! 現在 active なダイアログとして登録する\r\n        private static register(dialog: Dialog): void {\r\n            if (null != dialog && null != Dialog.s_activeDialog) {\r\n                console.warn(TAG + \"new dialog proc is called in the past dialog's one. use setTimeout() for post process.\");\r\n            }\r\n            Dialog.s_activeDialog = dialog;\r\n        }\r\n\r\n        /**\r\n         * Dialog 共通設定の初期化\r\n         */\r\n        private static initCommonCondition(): void {\r\n            // Framework の初期化後に処理する必要がある\r\n            if (!Framework.isInitialized()) {\r\n                console.warn(TAG + \"initCommonCondition() should be called after Framework.initialized.\");\r\n                return;\r\n            }\r\n\r\n            if (null == Dialog.s_oldBackKeyHandler) {\r\n                // Back Button Handler\r\n                Dialog.s_oldBackKeyHandler = CDP.setBackButtonHandler(null);\r\n                CDP.setBackButtonHandler(Dialog.customBackKeyHandler);\r\n\r\n                // 既定オプション\r\n                Dialog.s_defaultOptions = {\r\n                    idPositive:             \"dlg-btn-positive\",\r\n                    idNegative:             \"dlg-btn-negative\",\r\n                    event:                  Framework.getDefaultClickEvent(),\r\n                    dismissible:            false,\r\n                    defaultAutoClose:       false,\r\n                    transition:             \"platform-default\",\r\n                    labelPositive:          \"OK\",\r\n                    labelNegative:          \"Cancel\",\r\n                    backKey:                \"close\",\r\n                    scrollEvent:            \"deny\",\r\n                    domExtensionOptions:    {},\r\n                };\r\n            }\r\n        }\r\n\r\n        /**\r\n         * H/W Back Button Handler\r\n         */\r\n        private static customBackKeyHandler(event?: JQuery.Event): void {\r\n            if (null != Dialog.s_activeDialog) {\r\n                if (\"close\" === Dialog.s_activeDialog._settings.backKey) {\r\n                    Dialog.s_activeDialog.close();\r\n                } else if (\"function\" === typeof Dialog.s_activeDialog._settings.backKey) {\r\n                    (<DialogBackKeyHandler>Dialog.s_activeDialog._settings.backKey)(event);\r\n                }\r\n                return; // Dialog が active な場合、常に既定のハンドラには渡さない\r\n            }\r\n            Dialog.s_oldBackKeyHandler(event);\r\n        }\r\n    }\r\n}\r\n","/* tslint:disable:max-line-length */\r\n\r\nnamespace CDP.UI {\r\n\r\n    const TAG = \"[CDP.UI.DialogCommons] \";\r\n\r\n    /**\r\n     * Alert\r\n     * alert メッセージ表示\r\n     *\r\n     * @param {String} message   [in] 表示文字列\r\n     * @param {String} [options] [in] ダイアログオプション\r\n     * @return {jQuery} ダイアログの DOM オブジェクト\r\n     */\r\n    export function alert(message: string, options?: DialogOptions): JQuery {\r\n        const template = `\r\n            <script type=\"text/template\">\r\n                <section class=\"ui-modal\" data-role=\"popup\" data-corners=\"false\">\r\n                    <div class=\"ui-content\">\r\n                        <h1 class=\"ui-title {{_titleState}}\">{{title}}</h1>\r\n                        <p class=\"ui-message\">{{message}}</p>\r\n                    </div>\r\n                    <div class=\"ui-modal-footer ui-grid-solo\">\r\n                        <button id=\"{{idPositive}}\" class=\"ui-btn ui-block-a ui-text-emphasis\" data-auto-close=\"true\">{{labelPositive}}</button>\r\n                    </div>\r\n                </section>\r\n            </script>\r\n        `;\r\n\r\n        const dlgAlert = new Dialog(template, $.extend({}, {\r\n            src: null,\r\n            message: message,\r\n        }, options));\r\n\r\n        return dlgAlert.show();\r\n    }\r\n\r\n    /**\r\n     * Confirm\r\n     * 確認メッセージ表示\r\n     *\r\n     * @param {String} message   [in] 表示文字列\r\n     * @param {String} [options] [in] ダイアログオプション\r\n     * @return {jQuery} ダイアログの DOM オブジェクト\r\n     */\r\n    export function confirm(message: string, options?: DialogOptions): JQuery {\r\n        const template = `\r\n            <script type=\"text/template\">\r\n                <section class=\"ui-modal\" data-role=\"popup\" data-corners=\"false\">\r\n                    <div class=\"ui-content\">\r\n                        <h1 class=\"ui-title {{_titleState}}\">{{title}}</h1>\r\n                        <p class=\"ui-message\">{{message}}</p>\r\n                    </div>\r\n                    <div class=\"ui-modal-footer ui-grid-a\">\r\n                        <button id=\"{{idNegative}}\" class=\"ui-btn ui-block-a\" data-auto-close=\"true\">{{labelNegative}}</button>\r\n                        <button id=\"{{idPositive}}\" class=\"ui-btn ui-block-b ui-text-emphasis\" data-auto-close=\"true\">{{labelPositive}}</button>\r\n                    </div>\r\n                </section>\r\n            </script>\r\n        `;\r\n\r\n        const dlgConfirm = new Dialog(template, $.extend({}, {\r\n            src: null,\r\n            message: message,\r\n        }, options));\r\n\r\n        return dlgConfirm.show();\r\n    }\r\n\r\n    /**\r\n     * @interface DialogCommonsOptions\r\n     * @brief prompt のオプション\r\n     */\r\n    export interface DialogPromptOptions extends DialogOptions {\r\n        eventOK?: string; //!< OK ボタン押下時の event: default: promptok\r\n    }\r\n\r\n    /**\r\n     * @class DialogPrompt\r\n     * @brief prompt ダイアログ (非公開)\r\n     */\r\n    class DialogPrompt extends Dialog {\r\n\r\n        private _eventOK: string;\r\n\r\n        /**\r\n         * constructor\r\n         *\r\n         */\r\n        constructor(id: string, options?: DialogPromptOptions) {\r\n            super(id, options);\r\n            this._eventOK = options.eventOK || \"promptok\";\r\n        }\r\n\r\n        //! ダイアログ表示の直前\r\n        protected onBeforeShow(): IPromiseBase<void> {\r\n            this.$el\r\n                .on(\"vclick\", \".command-prompt-ok \", (event: JQuery.Event) => {\r\n                    const text = this.$el.find(\"#_ui-prompt\").val();\r\n                    this.$el.trigger(this._eventOK, text);\r\n                    this.close();\r\n                    event.preventDefault();\r\n                });\r\n            return super.onBeforeShow();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prompt\r\n     *\r\n     * @param {String} message   [in] 表示文字列\r\n     * @param {String} [options] [in] ダイアログオプション\r\n     * @return {jQuery} ダイアログの DOM オブジェクト\r\n     */\r\n    export function prompt(message: string, options?: DialogPromptOptions): JQuery {\r\n        const template = `\r\n            <script type=\"text/template\">\r\n                <section class=\"ui-modal\" data-role=\"popup\" data-corners=\"false\">\r\n                    <div class=\"ui-content\">\r\n                        <h1 class=\"ui-title {{_titleState}}\">{{title}}</h1>\r\n                        <p class=\"ui-message\">{{message}}</p>\r\n                        <label for=\"_ui-prompt\" class=\"ui-hidden-accessible\"></label>\r\n                        <input type=\"text\" name=\"_ui-prompt\" id=\"_ui-prompt\">\r\n                    </div>\r\n                    <div class=\"ui-modal-footer ui-grid-a\">\r\n                        <button id=\"{{idNegative}}\" class=\"ui-btn ui-block-a\" data-auto-close=\"true\">{{labelNegative}}</button>\r\n                        <button id=\"{{idPositive}}\" class=\"command-prompt-ok ui-btn ui-block-b ui-text-emphasis\" data-auto-close=\"false\">{{labelPositive}}</button>\r\n                    </div>\r\n                </section>\r\n            </script>\r\n        `;\r\n\r\n        const dlgPrompt = new DialogPrompt(template, $.extend({}, {\r\n            src: null,\r\n            message: message,\r\n        }, options));\r\n\r\n        return dlgPrompt.show();\r\n    }\r\n}\r\n","namespace CDP.UI {\r\n\r\n    import Router       = CDP.Framework.Router;\r\n    import IPage        = CDP.Framework.IPage;\r\n    import Model        = CDP.Framework.Model;\r\n    import View         = CDP.Framework.View;\r\n    import ViewOptions  = CDP.Framework.ViewOptions;\r\n    import Template     = CDP.Tools.Template;\r\n    import JST          = CDP.Tools.JST;\r\n\r\n    const TAG: string = \"[CDP.UI.BaseHeaderView] \";\r\n\r\n    /**\r\n     * @interface BaseHeaderViewOptions\r\n     * @brief BaseHeaderView に指定するオプションインターフェイス\r\n     */\r\n    export interface BaseHeaderViewOptions<TModel extends Model = Model> extends ViewOptions<TModel> {\r\n        baseTemplate?: JST;             //!< 固定ヘッダ用 JavaScript テンプレート.\r\n        backCommandSelector?: string;   //!< \"戻る\"コマンドセレクタ. default: \"command-back\"\r\n        backCommandKind?: string;       //!< \"戻る\"コマンド種別 (onCommand 第2引数). default: \"pageback\"\r\n    }\r\n\r\n    //__________________________________________________________________________________________________________//\r\n\r\n    /**\r\n     * @class BaseHeaderView\r\n     * @brief 共通ヘッダを操作するクラス\r\n     */\r\n    export class BaseHeaderView<TModel extends Model = Model> extends View<TModel> {\r\n\r\n        private static s_$headerBase: JQuery;   //!< ページ外に配置される共通ヘッダのベース部品用 jQuery オブジェクト\r\n        private static s_refCount = 0;          //!< 参照カウント\r\n        private _template: JST;\r\n        private _hasBackIndicator: boolean;\r\n\r\n        /**\r\n         * constructor\r\n         *\r\n         * @param {IPage} _owner [in] オーナーページインスタンス\r\n         */\r\n        constructor(private _owner: IPage, private _options?: BaseHeaderViewOptions<TModel>) {\r\n            super(_options = $.extend({\r\n                el: _owner.$page.find(\"[data-role='header']\"),\r\n                backCommandSelector: \".command-back\",\r\n                backCommandKind: \"pageback\",\r\n            }, _options));\r\n\r\n            // template 設定\r\n            if (_options.baseTemplate) {\r\n                this._template = _options.baseTemplate;\r\n            } else {\r\n                this._template = Template.getJST(`\r\n                    <script type='text/template'>\r\n                        <header class='ui-header-base ui-body-{{theme}}'>\r\n                            <div class='ui-fixed-back-indicator'></div>\r\n                        </header>\r\n                    </script>\r\n                `);\r\n            }\r\n\r\n            // Backbone.View 用の初期化\r\n            this.setElement(this.$el, true);\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // public methods\r\n\r\n        /**\r\n         * 初期化\r\n         */\r\n        public create(): JQuery {\r\n            return this.createHeaderBase();\r\n        }\r\n\r\n        /**\r\n         * 有効化\r\n         */\r\n        public activate(): JQuery {\r\n            return this.showIndicator();\r\n        }\r\n\r\n        /**\r\n         * 無効化\r\n         */\r\n        public inactivate(): JQuery {\r\n            return this.hideIndicator();\r\n        }\r\n\r\n        /**\r\n         * 破棄\r\n         */\r\n        public release(): JQuery {\r\n            return this.releaseHeaderBase();\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // private methods\r\n\r\n        //! 共通ヘッダのベースを準備\r\n        private createHeaderBase(): JQuery {\r\n            // 固定ヘッダのときに有効化\r\n            if (\"fixed\" === this._owner.$header.jqmData(\"position\")) {\r\n                if (null == BaseHeaderView.s_$headerBase) {\r\n                    BaseHeaderView.s_$headerBase = $(this._template({\r\n                        theme: this._owner.$page.jqmData(\"theme\"),\r\n                    }));\r\n                }\r\n                BaseHeaderView.s_refCount++;\r\n                BaseHeaderView.s_$headerBase.appendTo($(document.body));\r\n            }\r\n            // Back Indicator を持っているか判定\r\n            if (0 < this.$el.find(\".ui-back-indicator\").length) {\r\n                this._hasBackIndicator = true;\r\n            }\r\n            return BaseHeaderView.s_$headerBase;\r\n        }\r\n\r\n        //! indicator の表示\r\n        private showIndicator(): JQuery {\r\n            // Back Indicator を持っていない場合表示しない\r\n            if (null != BaseHeaderView.s_$headerBase && this._hasBackIndicator) {\r\n                BaseHeaderView.s_$headerBase.find(\".ui-fixed-back-indicator\").addClass(\"show\");\r\n            }\r\n            return BaseHeaderView.s_$headerBase;\r\n        }\r\n\r\n        //! indicator の非表示\r\n        private hideIndicator(): JQuery {\r\n            if (null != BaseHeaderView.s_$headerBase) {\r\n                BaseHeaderView.s_$headerBase.find(\".ui-fixed-back-indicator\").removeClass(\"show\");\r\n            }\r\n            return BaseHeaderView.s_$headerBase;\r\n        }\r\n\r\n        //! 共通ヘッダのベースを破棄\r\n        private releaseHeaderBase(): JQuery {\r\n            if (null != BaseHeaderView.s_$headerBase) {\r\n                BaseHeaderView.s_refCount--;\r\n                if (0 === BaseHeaderView.s_refCount) {\r\n                    BaseHeaderView.s_$headerBase.remove();\r\n                    BaseHeaderView.s_$headerBase = null;\r\n                }\r\n            }\r\n            return BaseHeaderView.s_$headerBase;\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Override: Backbone.View\r\n\r\n        //! events binding\r\n        events(): any {\r\n            const eventMap = {};\r\n            if (this._options) {\r\n                eventMap[\"vclick \" + this._options.backCommandSelector] = this.onCommandBack;\r\n            }\r\n            return eventMap;\r\n        }\r\n\r\n        //! back のハンドラ\r\n        private onCommandBack(event: JQuery.Event): void {\r\n            event.preventDefault();\r\n            let handled = false;\r\n            if (this._owner) {\r\n                handled = this._owner.onCommand(event, this._options.backCommandKind);\r\n            }\r\n            if (!handled) {\r\n                Router.back();\r\n            }\r\n        }\r\n    }\r\n}\r\n","/* tslint:disable:max-line-length */\r\n\r\nnamespace CDP.UI {\r\n\r\n    import Framework = CDP.Framework;\r\n\r\n    const TAG: string = \"[CDP.UI.BasePage] \";\r\n\r\n    /**\r\n     * @interface BasePageOptions\r\n     * @brief BasePage に指定するオプションインターフェイス\r\n     */\r\n    export interface BasePageOptions<TModel extends Framework.Model = Framework.Model> extends Framework.PageConstructOptions, BaseHeaderViewOptions<TModel> {\r\n        baseHeader?: new (owner: Framework.IPage, options?: BaseHeaderViewOptions<TModel>) => BaseHeaderView<TModel>;   //!< Header 機能を提供する基底インスタンス\r\n        backCommandHandler?: string;                //!< \"戻る\" コマンドハンドラメソッド名.                             default: onPageBack\r\n        domExtensionOptions?: DomExtensionOptions;  //!< DOM拡張に渡すオプション. null|undefined を指定すると拡張しない default: {}\r\n    }\r\n\r\n    //__________________________________________________________________________________________________________//\r\n\r\n    /**\r\n     * @class BasePage\r\n     * @brief Header を備える Page クラス\r\n     */\r\n    export class BasePage<TModel extends Framework.Model = Framework.Model> extends Framework.Page {\r\n\r\n        private _baseHeader: BaseHeaderView<TModel>;    //!< ヘッダクラス\r\n\r\n        /**\r\n         * constructor\r\n         *\r\n         * @param {String}          url       [in] ページ URL\r\n         * @param {String}          id        [in] ページ ID\r\n         * @param {BasePageOptions} [options] [in] オプション\r\n         */\r\n        constructor(url: string, id: string, private _options?: BasePageOptions<TModel>) {\r\n            super(url, id, _options = $.extend({\r\n                baseHeader: BaseHeaderView,\r\n                backCommandHandler: \"onPageBack\",\r\n                backCommandKind: \"pageback\",\r\n                domExtensionOptions: {},\r\n            }, _options));\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Override: Framework Page\r\n\r\n        /**\r\n         * jQM event: \"pagebeforecreate\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         */\r\n        onPageBeforeCreate(event: JQuery.Event): void {\r\n            if (this._options.baseHeader) {\r\n                this._baseHeader = new this._options.baseHeader(this, this._options);\r\n                this._baseHeader.create();\r\n            }\r\n            super.onPageBeforeCreate(event);\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagecreate\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         */\r\n        onPageInit(event: JQuery.Event): void {\r\n            if (null != this._options.domExtensionOptions) {\r\n                ExtensionManager.applyDomExtension(this.$page, this._options.domExtensionOptions);\r\n            }\r\n            super.onPageInit(event);\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagebeforeshow\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         * @param data  {ShowEventData}     [in] 付加情報\r\n         */\r\n        onPageBeforeShow(event: JQuery.Event, data?: Framework.ShowEventData): void {\r\n            if (this._baseHeader) {\r\n                this._baseHeader.activate();\r\n            }\r\n            super.onPageBeforeShow(event, data);\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagebeforehide\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         * @param data  {HideEventData}     [in] 付加情報\r\n         */\r\n        onPageBeforeHide(event: JQuery.Event, data?: Framework.HideEventData): void {\r\n            if (this._baseHeader) {\r\n                this._baseHeader.inactivate();\r\n            }\r\n            super.onPageBeforeHide(event, data);\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pageremove\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         */\r\n        onPageRemove(event: JQuery.Event): void {\r\n            if (this._baseHeader) {\r\n                this._baseHeader.release();\r\n                this._baseHeader = null;\r\n            }\r\n            super.onPageRemove(event);\r\n        }\r\n\r\n        /**\r\n         * H/W Back Button ハンドラ\r\n         *\r\n         * @param  event {JQuery.Event} [in] event object\r\n         * @return {Boolean} true: 既定の処理を行わない / false: 既定の処理を行う\r\n         */\r\n        onHardwareBackButton(event?: JQuery.Event): boolean {\r\n            let retval = super.onHardwareBackButton(event);\r\n            if (!retval) {\r\n                retval = this.onCommand(event, this._options.backCommandKind);\r\n            }\r\n            return retval;\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Override: Custom Event\r\n\r\n        /**\r\n         * \"戻る\" event 発行時にコールされる\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         * @return {Boolean} true: 既定の処理を行わない / false: 既定の処理を行う\r\n         */\r\n        onCommand(event: JQuery.Event, kind: string): boolean {\r\n            if (this._options.backCommandKind === kind) {\r\n                if (this._owner && this._owner[this._options.backCommandHandler]) {\r\n                    return this._owner[this._options.backCommandHandler](event);\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n}\r\n","/* tslint:disable:max-line-length */\r\n\r\nnamespace CDP.UI {\r\n    import Promise      = CDP.Promise;\r\n    import Framework    = CDP.Framework;\r\n\r\n    const TAG = \"[CDP.UI.PageView] \";\r\n\r\n    /**\r\n     * @interface PageViewConstructOptions\r\n     * @brief Router への登録情報と Backbone.View への初期化情報を格納するインターフェイスクラス\r\n     */\r\n    export interface PageViewConstructOptions<TModel extends Framework.Model = Framework.Model> extends BasePageOptions<TModel> {\r\n        basePage?: new (url: string, id: string, options?: Framework.PageConstructOptions) => Framework.Page;    //!< Page 機能を提供する基底インスタンス\r\n    }\r\n\r\n    /* tslint:disable:no-use-before-declare */\r\n    /**\r\n     * @interface PageContainerOptions\r\n     * @brief PageContainer のオプション\r\n     */\r\n    export interface PageContainerOptions<TModel extends Framework.Model = Framework.Model> extends Framework.ViewOptions<TModel> {\r\n        owner: PageView;\r\n        $el?: JQuery;\r\n    }\r\n\r\n    /**\r\n     * @class PageContainerView\r\n     * @brief PageView と連携可能な コンテナビュークラス\r\n     */\r\n    export class PageContainerView<TModel extends Framework.Model = Framework.Model> extends Framework.View<TModel> {\r\n\r\n        private _owner: PageView = null;\r\n\r\n        /**\r\n         * constructor\r\n         */\r\n        constructor(options: PageContainerOptions<TModel>) {\r\n            super(options);\r\n            this._owner = options.owner;\r\n            if (options.$el) {\r\n                const delegates = (<any>this).events ? true : false;\r\n                this.setElement(options.$el, delegates);\r\n            }\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // short cut methods\r\n\r\n        //! Owner 取得\r\n        get owner(): PageView {\r\n            return this._owner;\r\n        }\r\n    }\r\n    /* tslint:enable:no-use-before-declare */\r\n\r\n    //___________________________________________________________________________________________________________________//\r\n\r\n    /**\r\n     * @class PageView\r\n     * @brief CDP.Framework.Page と Backbone.View の両方の機能を提供するページの基底クラス\r\n     */\r\n    export class PageView<TModel extends Framework.Model = Framework.Model> extends Framework.View<TModel> implements Framework.IPage, IStatusManager {\r\n\r\n        protected _pageOptions: PageViewConstructOptions<TModel> = null;\r\n        protected _basePage: Framework.Page = null;\r\n        private _statusMgr: StatusManager = null;\r\n\r\n        /**\r\n         * constructor\r\n         *\r\n         * @param url     {String}                   [in] ページ URL\r\n         * @param id      {String}                   [in] ページ ID\r\n         * @param options {PageViewConstructOptions} [in] オプション\r\n         */\r\n        constructor(url: string, id: string, options?: PageViewConstructOptions<TModel>) {\r\n            super(options);\r\n\r\n            // PageView 設定\r\n            this._pageOptions = $.extend({}, { owner: this }, options);\r\n            this._basePage = this._pageOptions.basePage ? new this._pageOptions.basePage(url, id, this._pageOptions) : new BasePage(url, id, this._pageOptions);\r\n\r\n            // StatusManager\r\n            this._statusMgr = new StatusManager();\r\n            // Backbone.View 用の初期化\r\n            const delegates = (<any>this).events ? true : false;\r\n            this.setElement(this.$page, delegates);\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Implements: IStatusManager 状態管理\r\n\r\n        /**\r\n         * 状態変数の参照カウントのインクリメント\r\n         *\r\n         * @param status {String} [in] 状態識別子\r\n         */\r\n        statusAddRef(status: string): number {\r\n            return this._statusMgr.statusAddRef(status);\r\n        }\r\n\r\n        /**\r\n         * 状態変数の参照カウントのデクリメント\r\n         *\r\n         * @param status {String} [in] 状態識別子\r\n         */\r\n        statusRelease(status: string): number {\r\n            return this._statusMgr.statusRelease(status);\r\n        }\r\n\r\n        /**\r\n         * 処理スコープ毎に状態変数を設定\r\n         *\r\n         * @param status   {String}   [in] 状態識別子\r\n         * @param callback {Function} [in] 処理コールバック\r\n         */\r\n        statusScope(status: string, callback: () => void): void {\r\n            this._statusMgr.statusScope(status, callback);\r\n        }\r\n\r\n        /**\r\n         * 指定した状態中であるか確認\r\n         *\r\n         * @param status {String}   [in] 状態識別子\r\n         * @return {Boolean} true: 状態内 / false: 状態外\r\n         */\r\n        isStatusIn(status: string): boolean {\r\n            return this._statusMgr.isStatusIn(status);\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // IPage stub stuff.\r\n\r\n        get active(): boolean                   { return this._basePage.active;                     }\r\n        get url(): string                       { return this._basePage.url;                        }\r\n        get id(): string                        { return this._basePage ? this._basePage.id : null; }\r\n        get $page(): JQuery                     { return this._basePage.$page;                      }\r\n        get $header(): JQuery                   { return this._basePage.$header;                    }\r\n        get $footer(): JQuery                   { return this._basePage.$footer;                    }\r\n        get intent(): Framework.Intent          { return this._basePage.intent;                     }\r\n        set intent(newIntent: Framework.Intent) { this._basePage.intent = newIntent;                }\r\n\r\n        /**\r\n         * Orientation の変更を受信\r\n         *\r\n         * @param newOrientation {Orientation} [in] new orientation code.\r\n         */\r\n        onOrientationChanged(newOrientation: Framework.Orientation): void {\r\n            // Override\r\n        }\r\n\r\n        /**\r\n         * H/W Back Button ハンドラ\r\n         *\r\n         * @param  event {JQuery.Event} [in] event object\r\n         * @return {Boolean} true: 既定の処理を行わない / false: 既定の処理を行う\r\n         */\r\n        onHardwareBackButton(event?: JQuery.Event): boolean {\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Router \"before route change\" ハンドラ\r\n         * ページ遷移直前に非同期処理を行うことが可能\r\n         *\r\n         * @return {IPromiseBase} Promise オブジェクト\r\n         */\r\n        onBeforeRouteChange(): IPromiseBase<any> {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        /**\r\n         * 汎用コマンドを受信\r\n         *\r\n         * @param  event {JQuery.Event} [in] event object\r\n         * @param  event {kind}              [in] command kind string\r\n         * @return {Boolean} true: 既定の処理を行わない / false: 既定の処理を行う\r\n         */\r\n        onCommand(event?: JQuery.Event, kind?: string): boolean {\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * 最初の OnPageInit() のときにのみコールされる\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         */\r\n        onInitialize(event: JQuery.Event): void {\r\n            // Override\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagebeforecreate\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         */\r\n        onPageBeforeCreate(event: JQuery.Event): void {\r\n            this.setElement(this.$page, true);\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagecreate\" (旧:\"pageinit\") に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         */\r\n        onPageInit(event: JQuery.Event): void {\r\n            // Override\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagebeforeshow\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         * @param data  {ShowEventData}     [in] 付加情報\r\n         */\r\n        onPageBeforeShow(event: JQuery.Event, data?: Framework.ShowEventData): void {\r\n            // Override\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagecontainershow\" (旧:\"pageshow\") に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         * @param data  {ShowEventData}     [in] 付加情報\r\n         */\r\n        onPageShow(event: JQuery.Event, data?: Framework.ShowEventData): void {\r\n            // Override\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagebeforehide\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         * @param data  {HideEventData}     [in] 付加情報\r\n         */\r\n        onPageBeforeHide(event: JQuery.Event, data?: Framework.HideEventData): void {\r\n            // Override\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagecontainerhide\" (旧:\"pagehide\") に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         * @param data  {HideEventData}     [in] 付加情報\r\n         */\r\n        onPageHide(event: JQuery.Event, data?: Framework.HideEventData): void {\r\n            // Override\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pageremove\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         */\r\n        onPageRemove(event: JQuery.Event): void {\r\n            this.remove();\r\n            this.el  = null;\r\n            this.$el = null;\r\n        }\r\n    }\r\n}\r\n","/* tslint:disable:max-line-length */\r\n\r\nnamespace CDP.UI {\r\n\r\n    import Model = CDP.Framework.Model;\r\n\r\n    const TAG = \"[CDP.UI.PageListView] \";\r\n\r\n    /**\r\n     * @interface PageListViewConstructOptions\r\n     * @brief PageListView への初期化情報を格納するインターフェイスクラス\r\n     */\r\n    export interface PageListViewConstructOptions<TModel extends Model = Model> extends ListViewOptions, PageViewConstructOptions<TModel> {\r\n        autoDestoryElement?: boolean;        //!< ページ遷移前に List Element を破棄する場合は true を指定\r\n    }\r\n\r\n    /**\r\n     * @class PageListView\r\n     * @brief 仮想リストビュー機能を持つ PageView クラス\r\n     */\r\n    export class PageListView<TModel extends Model = Model> extends PageView<TModel> implements IListView {\r\n\r\n        private _scrollMgr: ScrollManager = null;    //!< scroll コアロジック\r\n        private _needRebuild: boolean = false;       //!< ページ表示時に rebuild() をコールするための内部変数\r\n\r\n        /**\r\n         * constructor\r\n         *\r\n         * @param url     {String}                       [in] page template に使用する URL\r\n         * @param id      {String}                       [in] page に振られた ID\r\n         * @param options {PageListViewConstructOptions} [in] オプション\r\n         */\r\n        constructor(url: string, id: string, options?: PageListViewConstructOptions<TModel>) {\r\n            super(url, id, $.extend({}, {\r\n                autoDestoryElement: false,\r\n            }, options));\r\n            this._scrollMgr = new ScrollManager(options);\r\n        }\r\n\r\n        //! rebuild() のスケジューリング\r\n        public reserveRebuild(): void {\r\n            this._needRebuild = true;\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Override: PageView\r\n\r\n        //! Orientation の変更検知\r\n        onOrientationChanged(newOrientation: Framework.Orientation): void {\r\n            this._scrollMgr.setBaseHeight(this.getPageBaseHeight());\r\n        }\r\n\r\n        //! ページ遷移直前イベント処理\r\n        onBeforeRouteChange(): IPromiseBase<any> {\r\n            if ((<PageListViewConstructOptions<TModel>>this._pageOptions).autoDestoryElement) {\r\n                this._scrollMgr.destroy();\r\n            }\r\n            return super.onBeforeRouteChange();\r\n        }\r\n\r\n        //! jQM event: \"pagebeforeshow\" に対応\r\n        onPageBeforeShow(event: JQuery.Event, data?: Framework.ShowEventData): void {\r\n            super.onPageBeforeShow(event, data);\r\n            this._scrollMgr.initialize(this.$page, this.getPageBaseHeight());\r\n        }\r\n\r\n        //! jQM event: \"pagecontainershow\" (旧:\"pageshow\") に対応\r\n        onPageShow(event: JQuery.Event, data?: Framework.ShowEventData): void {\r\n            super.onPageShow(event, data);\r\n            this._scrollMgr.setBaseHeight(this.getPageBaseHeight());\r\n            if (this._needRebuild) {\r\n                this.rebuild();\r\n                this._needRebuild = false;\r\n            }\r\n        }\r\n\r\n        //! jQM event: \"pageremove\" に対応\r\n        onPageRemove(event: JQuery.Event): void {\r\n            super.onPageRemove(event);\r\n            this.release();\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Implements: IListView Profile 管理\r\n\r\n        //! 初期化済みか判定\r\n        isInitialized(): boolean {\r\n            return this._scrollMgr.isInitialized();\r\n        }\r\n\r\n        //! プロパティを指定して、ListItem を管理\r\n        addItem(\r\n            height: number,\r\n            initializer: new (options?: any) => BaseListItemView,\r\n            info: any,\r\n            insertTo?: number\r\n            ): void {\r\n            this._addLine(new LineProfile(this._scrollMgr, Math.floor(height), initializer, info), insertTo);\r\n        }\r\n\r\n        //! 指定した Item を削除\r\n        removeItem(index: number, size?: number, delay?: number): void;\r\n        removeItem(index: number[], delay?: number): void;\r\n        removeItem(index: any, arg2?: number, arg3?: number): void {\r\n            this._scrollMgr.removeItem(index, arg2, arg3);\r\n        }\r\n\r\n        //! 指定した Item に設定した情報を取得\r\n        getItemInfo(target: number): any;\r\n        getItemInfo(target: JQuery.Event): any;\r\n        getItemInfo(target: any): any {\r\n            return this._scrollMgr.getItemInfo(target);\r\n        }\r\n\r\n        //! アクティブページを更新\r\n        refresh(): void {\r\n            this._scrollMgr.refresh();\r\n        }\r\n\r\n        //! 未アサインページを構築\r\n        update(): void {\r\n            this._scrollMgr.update();\r\n        }\r\n\r\n        //! ページアサインを再構成\r\n        rebuild(): void {\r\n            this._scrollMgr.rebuild();\r\n        }\r\n\r\n        //! 管轄データを破棄\r\n        release(): void {\r\n            this._scrollMgr.release();\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Implements: IListView Profile Backup / Restore\r\n\r\n        //! 内部データをバックアップ\r\n        backup(key: string): boolean {\r\n            return this._scrollMgr.backup(key);\r\n        }\r\n\r\n        //! 内部データをリストア\r\n        restore(key: string, rebuild: boolean = true): boolean {\r\n            const retval = this._scrollMgr.restore(key, rebuild);\r\n            if (retval && !rebuild) {\r\n                this.reserveRebuild();\r\n            }\r\n            return retval;\r\n        }\r\n\r\n        //! バックアップデータの有無\r\n        hasBackup(key: string): boolean {\r\n            return this._scrollMgr.hasBackup(key);\r\n        }\r\n\r\n        //! バックアップデータの破棄\r\n        clearBackup(key?: string): boolean {\r\n            return this._scrollMgr.clearBackup(key);\r\n        }\r\n\r\n        //! バックアップデータにアクセス\r\n        get backupData(): any {\r\n            return this._scrollMgr.backupData;\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Implements: IListView Scroll\r\n\r\n        //! スクロールイベントハンドラ設定/解除\r\n        setScrollHandler(handler: (event: JQuery.Event) => void, on: boolean): void {\r\n            this._scrollMgr.setScrollHandler(handler, on);\r\n        }\r\n\r\n        //! スクロール終了イベントハンドラ設定/解除\r\n        setScrollStopHandler(handler: (event: JQuery.Event) => void, on: boolean): void {\r\n            this._scrollMgr.setScrollStopHandler(handler, on);\r\n        }\r\n\r\n        //! スクロール位置を取得\r\n        getScrollPos(): number {\r\n            return this._scrollMgr.getScrollPos();\r\n        }\r\n\r\n        //! スクロール位置の最大値を取得\r\n        getScrollPosMax(): number {\r\n            return this._scrollMgr.getScrollPosMax();\r\n        }\r\n\r\n        //! スクロール位置を指定\r\n        scrollTo(pos: number, animate?: boolean, time?: number): void {\r\n            this._scrollMgr.scrollTo(pos, animate, time);\r\n        }\r\n\r\n        //! 指定された ListItemView の表示を保証\r\n        ensureVisible(index: number, options?: EnsureVisibleOptions): void {\r\n            this._scrollMgr.ensureVisible(index, options);\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Implements: IListView Properties\r\n\r\n        //! core framework access\r\n        get core(): IListViewFramework {\r\n            return this._scrollMgr;\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Implements: IListView Internal I/F\r\n\r\n        //! 登録 framework が使用する\r\n        _addLine(_line: any, insertTo?: number): void {\r\n            this._scrollMgr._addLine(_line, insertTo);\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // private method:\r\n\r\n        //! ページの基準値を取得\r\n        private getPageBaseHeight(): number {\r\n            return $(window).height() - parseInt(this.$page.css(\"padding-top\"), 10);\r\n        }\r\n    }\r\n}\r\n","namespace CDP.UI {\r\n\r\n    import Model = CDP.Framework.Model;\r\n\r\n    const TAG = \"[CDP.UI.PageExpandableListView] \";\r\n\r\n    /**\r\n     * @class PageExpandableListView\r\n     * @brief 開閉リストビュー機能を持つ PageView クラス\r\n     */\r\n    export class PageExpandableListView<TModel extends Model = Model> extends PageListView<TModel> implements IExpandableListView {\r\n\r\n        private _expandManager: ExpandManager = null;\r\n\r\n        /**\r\n         * constructor\r\n         *\r\n         * @param url     {String}                       [in] page template に使用する URL\r\n         * @param id      {String}                       [in] page に振られた ID\r\n         * @param options {PageListViewConstructOptions} [in] オプション\r\n         */\r\n        constructor(url: string, id: string, options?: PageListViewConstructOptions<TModel>) {\r\n            super(url, id, options);\r\n            this._expandManager = new ExpandManager(this);\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Implements: IExpandableListView\r\n\r\n        //! 新規 GroupProfile を作成\r\n        newGroup(id?: string): GroupProfile {\r\n            return this._expandManager.newGroup(id);\r\n        }\r\n\r\n        //! 登録済み Group を取得\r\n        getGroup(id: string): GroupProfile {\r\n            return this._expandManager.getGroup(id);\r\n        }\r\n\r\n        //! 第1階層の Group 登録\r\n        registerTopGroup(topGroup: GroupProfile): void {\r\n            this._expandManager.registerTopGroup(topGroup);\r\n        }\r\n\r\n        //! 第1階層の Group を取得\r\n        getTopGroups(): GroupProfile[] {\r\n            return this._expandManager.getTopGroups();\r\n        }\r\n\r\n        //! すべてのグループを展開 (1階層)\r\n        expandAll(): void {\r\n            this._expandManager.expandAll();\r\n        }\r\n\r\n        //! すべてのグループを収束 (1階層)\r\n        collapseAll(delay?: number): void {\r\n            this._expandManager.collapseAll(delay);\r\n        }\r\n\r\n        //! 展開中か判定\r\n        isExpanding(): boolean {\r\n            return this._expandManager.isExpanding();\r\n        }\r\n\r\n        //! 収束中か判定\r\n        isCollapsing(): boolean {\r\n            return this._expandManager.isCollapsing();\r\n        }\r\n\r\n        //! 開閉中か判定\r\n        isSwitching(): boolean {\r\n            return this._expandManager.isSwitching();\r\n        }\r\n\r\n        //! layout key を取得\r\n        get layoutKey(): string {\r\n            return this._expandManager.layoutKey;\r\n        }\r\n\r\n        //! layout key を設定\r\n        set layoutKey(key: string) {\r\n            this._expandManager.layoutKey = key;\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Override: PageListView\r\n\r\n        //! データを破棄\r\n        release(): void {\r\n            super.release();\r\n            this._expandManager.release();\r\n        }\r\n\r\n        //! 内部データをバックアップ\r\n        backup(key: string): boolean {\r\n            return this._expandManager.backup(key);\r\n        }\r\n\r\n        //! 内部データをリストア\r\n        restore(key: string, rebuild: boolean = true): boolean {\r\n            return this._expandManager.restore(key, rebuild);\r\n        }\r\n    }\r\n}\r\n","/**\r\n * jQuery plugin definition\r\n */\r\ninterface JQuery {\r\n    ripple(options?: CDP.UI.DomExtensionOptions): JQuery;\r\n}\r\n\r\nnamespace CDP.UI.Extension {\r\n\r\n    import Framework = CDP.Framework;\r\n\r\n    //! jQuery plugin\r\n    $.fn.ripple = function (options?: DomExtensionOptions) {\r\n        const $el = $(this);\r\n        return $el.on(Framework.Patch.s_vclickEvent, function (event: JQuery.Event) {\r\n            const surface = $(this);\r\n\r\n            // create surface if it doesn't exist\r\n            if (surface.find(\".ui-ripple-ink\").length === 0) {\r\n                surface.prepend(\"<div class='ui-ripple-ink'></div>\");\r\n            }\r\n\r\n            let ink = surface.find(\".ui-ripple-ink\");\r\n\r\n            // stop the previous animation\r\n            ink.removeClass(\"ui-ripple-animate\");\r\n\r\n            // ink size:\r\n            if (!ink.height() && !ink.width()) {\r\n                const d = Math.max(surface.outerWidth(), surface.outerHeight());\r\n                ink.css({ height: d, width: d });\r\n            }\r\n\r\n            const x = event.pageX - surface.offset().left - (ink.width() / 2);\r\n            const y = event.pageY - surface.offset().top - (ink.height() / 2);\r\n\r\n            const rippleColor = surface.data(\"ripple-color\");\r\n\r\n            // animation end handler\r\n            const ANIMATION_END_EVENT = \"animationend webkitAnimationEnd\";\r\n            ink.on(ANIMATION_END_EVENT, function (ev: JQuery.Event) {\r\n                ink.off();\r\n                ink.removeClass(\"ui-ripple-animate\");\r\n                ink = null;\r\n            });\r\n\r\n            // set the position and add class .animate\r\n            ink.css({\r\n                top: y + \"px\",\r\n                left: x + \"px\",\r\n                background: rippleColor\r\n            }).addClass(\"ui-ripple-animate\");\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Material Design Ripple 拡張\r\n     *\r\n     * @param {jQuery}              $ui       [in] 検索対象の jQuery オブジェクト\r\n     * @param {DomExtensionOptions} [options] [in] オプション\r\n     */\r\n    function applyDomExtension($ui: JQuery, options?: DomExtensionOptions): JQuery {\r\n        const NO_RIPPLE_CLASS = [\r\n            \".ui-ripple-none\",\r\n            \".ui-flipswitch-on\",\r\n            \".ui-slider-handle\",\r\n            \".ui-input-clear\",\r\n        ];\r\n\r\n        let selector = \".ui-btn\";\r\n        if ($ui.hasClass(\"ui-page\")) {\r\n            selector = \".ui-content .ui-btn\"; // header は自動 ripple 化対象外\r\n        }\r\n\r\n        $ui.find(selector)\r\n            .filter((index, elem) => {\r\n                const $elem = $(elem);\r\n                if ($elem.is(NO_RIPPLE_CLASS.join(\",\"))) {\r\n                    return false;\r\n                } else {\r\n                    return true;\r\n                }\r\n            })\r\n            .addClass(\"ui-ripple\");\r\n\r\n        // ripplify\r\n        $ui.find(\".ui-ripple\").ripple();\r\n        return $ui;\r\n    }\r\n\r\n    // 登録\r\n    ExtensionManager.registerDomExtension(applyDomExtension);\r\n}\r\n","/**\r\n * jQuery plugin definition\r\n */\r\ninterface JQuery {\r\n    spinner(options?: CDP.UI.DomExtensionOptions): JQuery;\r\n}\r\n\r\nnamespace CDP.UI.Extension {\r\n\r\n    import Template = CDP.Tools.Template;\r\n    import JST      = CDP.Tools.JST;\r\n\r\n    let _template: JST;\r\n\r\n    /**\r\n     * Material Design Spinner 拡張\r\n     *\r\n     * @param {jQuery}              $target   [in] 検索対象の jQuery オブジェクト\r\n     * @param {DomExtensionOptions} [options] [in] オプション\r\n     */\r\n    function applyDomExtension($target: JQuery, options?: DomExtensionOptions): JQuery {\r\n        if (!_template) {\r\n            _template = Template.getJST(`\r\n                <script type=\"text/template\">\r\n                    <span class=\"ui-spinner-base\">\r\n                        <span class=\"ui-spinner-inner\">\r\n                            <span class=\"ui-spinner-inner-gap\" {{borderTop}}></span>\r\n                            <span class=\"ui-spinner-inner-left\">\r\n                                <span class=\"ui-spinner-inner-half-circle\" {{border}}></span>\r\n                            </span>\r\n                            <span class=\"ui-spinner-inner-right\">\r\n                                <span class=\"ui-spinner-inner-half-circle\" {{border}}></span>\r\n                            </span>\r\n                        </span>\r\n                    </span>\r\n                </script>\r\n            `);\r\n        }\r\n\r\n        const makeTemplateParam = (color: string): Object => {\r\n            return {\r\n                borderTop: \"style=border-top-color:\" + color + \";\",\r\n                border: \"style=border-color:\" + color + \";\",\r\n            };\r\n        };\r\n\r\n        const spinnerify = (elem: Element) => {\r\n            const $elem = $(elem);\r\n            const color = $elem.data(\"spinner-color\");\r\n            let param = null;\r\n            if (color) {\r\n                $elem.css({ \"background-color\": color });\r\n                param = makeTemplateParam(color);\r\n            }\r\n            $elem.append(_template(param));\r\n        };\r\n\r\n        $target.find(\".ui-spinner, .ui-icon-loading\")\r\n            .each((index: number, elem: Element) => {\r\n                spinnerify(elem);\r\n            });\r\n\r\n        return $target;\r\n    }\r\n\r\n    //! jQuery plugin\r\n    $.fn.spinner = function (options?: DomExtensionOptions) {\r\n        return applyDomExtension($(this), options);\r\n    };\r\n\r\n    // 登録\r\n    ExtensionManager.registerDomExtension(applyDomExtension);\r\n}\r\n","namespace CDP.UI.Extension {\r\n\r\n    /**\r\n     * Text Input 用 Floating Label 拡張\r\n     *\r\n     * @param {jQuery}              $ui       [in] 検索対象の jQuery オブジェクト\r\n     * @param {DomExtensionOptions} [options] [in] オプション\r\n     */\r\n    function applyDomExtension($ui: JQuery, options?: DomExtensionOptions): JQuery {\r\n        const update = (elem: Element, floating: boolean) => {\r\n            const $elem = $(elem);\r\n            if (floating) {\r\n                $elem.addClass(\"ui-float-label-floating\");\r\n            } else {\r\n                $elem.removeClass(\"ui-float-label-floating\");\r\n            }\r\n        };\r\n\r\n        const floatingify = (elem: Element) => {\r\n            const id = $(elem).attr(\"for\");\r\n            const $input = $ui.find(\"#\" + id);\r\n            if (\"search\" === $input.jqmData(\"type\")) {\r\n                $(elem).addClass(\"ui-float-label-has-icon\");\r\n            }\r\n            update(elem, !!$input.val());\r\n            $input.on(\"keyup change input focus blur cut paste\", (event: JQuery.Event) => {\r\n                update(elem, !!$(event.target).val());\r\n            });\r\n        };\r\n\r\n        $ui.find(\"label.ui-float-label, .ui-float-label label\")\r\n            .each((index: number, elem: Element) => {\r\n                floatingify(elem);\r\n            });\r\n\r\n        return $ui;\r\n    }\r\n\r\n    // 登録\r\n    ExtensionManager.registerDomExtension(applyDomExtension);\r\n}\r\n","namespace CDP.UI.Extension {\r\n\r\n    import Framework = CDP.Framework;\r\n\r\n    /**\r\n     * jQuery Mobile Flip Switch 拡張\r\n     *\r\n     * @param {jQuery}              $ui       [in] 検索対象の jQuery オブジェクト\r\n     * @param {DomExtensionOptions} [options] [in] オプション\r\n     */\r\n    function applyDomExtension($ui: JQuery, options?: DomExtensionOptions): JQuery {\r\n        /*\r\n         * flipswitch に紐づく label は OS によって event 発行形式が異なるためフックして独自イベントで対応する.\r\n         * また flipswitch は内部で click を発行しているが、vclick に変更する.\r\n         */\r\n\r\n        const _getAllSwitches = (): JQuery => {\r\n            return $ui.find(\".ui-flipswitch\");\r\n        };\r\n\r\n        const _getInputFromSwitch = ($switch: JQuery): JQuery => {\r\n            const $input = $switch.find(\"input\");\r\n            if ($input.length) {\r\n                return $input;\r\n            }\r\n            const $select = $switch.find(\"select\");\r\n            if ($select.length) {\r\n                return $select;\r\n            }\r\n            return null;\r\n        };\r\n\r\n        const _change = ($input: JQuery, to: boolean): void => {\r\n            if ($input) {\r\n                if (\"INPUT\" === $input[0].nodeName) {\r\n                    $input.prop(\"checked\", to).flipswitch(\"refresh\");\r\n                } else if (\"SELECT\" === $input[0].nodeName) {\r\n                    $input.val(to ? \"on\" : \"off\").flipswitch(\"refresh\");\r\n                }\r\n            }\r\n        };\r\n\r\n        const _getLabelsFromSwitch = ($switch: JQuery): JQuery => {\r\n            const $input = _getInputFromSwitch($switch);\r\n            if ($input) {\r\n                const labels = (<any>$input[0]).labels;\r\n                if (labels) {\r\n                    return $(labels);\r\n                }\r\n            }\r\n            return $();\r\n        };\r\n\r\n        const _getSwitchFromLabel = ($label: JQuery): JQuery => {\r\n            const name = $label.attr(\"for\");\r\n            return _getAllSwitches().find(\"[name='\" + name + \"']\");\r\n        };\r\n\r\n        _getAllSwitches()\r\n            .on(\"vclick _change_flipswich\", (event: JQuery.Event) => {\r\n                const $switch = $(event.currentTarget);\r\n                const $target = $(event.target);\r\n                const $input = _getInputFromSwitch($switch);\r\n                const changeTo = !$switch.hasClass(\"ui-flipswitch-active\");\r\n\r\n                if ($target.hasClass(\"ui-flipswitch-input\")) {\r\n                    _change($input, changeTo);\r\n                } else if ($target.hasClass(\"ui-flipswitch-on\")) {\r\n                    if (Framework.Platform.Mobile && Framework.Patch.isSupportedVclick()) {\r\n                        _change($input, changeTo);\r\n                        event.preventDefault();\r\n                    }\r\n                }\r\n            })\r\n            .each((index: number, flipswitch: Element) => {\r\n                _getLabelsFromSwitch($(flipswitch))\r\n                    .on(\"vclick\", (event: JQuery.Event) => {\r\n                        const $switch = _getSwitchFromLabel($(event.target));\r\n                        if (!$switch.parent().hasClass(\"ui-state-disabled\")) {\r\n                            $switch.trigger(\"_change_flipswich\");\r\n                        }\r\n                        event.preventDefault();\r\n                    });\r\n            });\r\n\r\n        return $ui;\r\n    }\r\n\r\n    // 登録\r\n    ExtensionManager.registerDomExtension(applyDomExtension);\r\n}\r\n","namespace CDP.UI.Extension {\r\n\r\n    /**\r\n     * jQuery Mobile Slider 拡張\r\n     *\r\n     * @param {jQuery}              $ui       [in] 検索対象の jQuery オブジェクト\r\n     * @param {DomExtensionOptions} [options] [in] オプション\r\n     */\r\n    function applyDomExtension($ui: JQuery, options?: DomExtensionOptions): JQuery {\r\n        $ui.find(\".ui-slider-input\")\r\n            .on(\"slidestop\", (event: JQuery.Event) => {\r\n                const $handles = $(event.currentTarget)\r\n                    .parent()\r\n                    .find(\".ui-slider-handle\");\r\n                $handles.blur();\r\n            });\r\n        return $ui;\r\n    }\r\n\r\n    // 登録\r\n    ExtensionManager.registerDomExtension(applyDomExtension);\r\n}\r\n","namespace CDP.UI.Extension {\r\n\r\n    //! iScroll.click patch\r\n    const patch_IScroll_utils_click = function (event: Event): void {\r\n        const target: any = event.target;\r\n        const e: any = event;\r\n        let ev: MouseEvent;\r\n\r\n        // [CDP modified]: set target.clientX.\r\n        if (null == target.clientX || null == target.clientY) {\r\n            if (null != e.pageX && null != e.pageY) {\r\n                target.clientX = e.pageX;\r\n                target.clientY = e.pageY;\r\n            } else if (e.changedTouches && e.changedTouches[0]) {\r\n                target.clientX = e.changedTouches[0].pageX;\r\n                target.clientY = e.changedTouches[0].pageY;\r\n            }\r\n        }\r\n\r\n        if (!(/(SELECT|INPUT|TEXTAREA)/i).test(target.tagName)) {\r\n            ev = document.createEvent(\"MouseEvents\");\r\n            ev.initMouseEvent(\"click\", true, true, e.view, 1,\r\n                target.screenX, target.screenY, target.clientX, target.clientY,\r\n                e.ctrlKey, e.altKey, e.shiftKey, e.metaKey,\r\n                0, null);\r\n\r\n            (<any>ev)._constructed = true;\r\n            target.dispatchEvent(ev);\r\n        }\r\n    };\r\n\r\n    let s_applied = false;\r\n\r\n    /**\r\n     * iScroll Patch 拡張\r\n     *\r\n     * @param {jQuery}              $ui       [in] 検索対象の jQuery オブジェクト\r\n     * @param {DomExtensionOptions} [options] [in] オプション\r\n     */\r\n    function applyPatch($ui: JQuery, options?: DomExtensionOptions): JQuery {\r\n        if (!s_applied && global.IScroll && global.IScroll.utils) {\r\n            global.IScroll.utils.click = patch_IScroll_utils_click;\r\n            s_applied = true;\r\n        }\r\n        return $ui;\r\n    }\r\n\r\n    // 登録\r\n    ExtensionManager.registerDomExtension(applyPatch);\r\n}\r\n"]}