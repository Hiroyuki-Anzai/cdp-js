{"version":3,"sources":["cdp:///CDP/UI/jqm/Theme.ts","cdp:///CDP/UI/jqm/ExtensionManager.ts","cdp:///CDP/UI/jqm/Toast.ts","cdp:///CDP/UI/jqm/Dialog.ts","cdp:///CDP/UI/jqm/DialogCommons.ts","cdp:///CDP/UI/jqm/BaseHeaderView.ts","cdp:///CDP/UI/jqm/BasePage.ts","cdp:///CDP/UI/jqm/PageView.ts","cdp:///CDP/UI/jqm/PageContainerView.ts","cdp:///CDP/UI/jqm/TabHostView.ts","cdp:///CDP/UI/jqm/TabView.ts","cdp:///CDP/UI/jqm/PageListView.ts","cdp:///CDP/UI/jqm/PageExpandableListView.ts","cdp:///CDP/UI/jqm/Extension/Ripple.ts","cdp:///CDP/UI/jqm/Extension/Spinner.ts","cdp:///CDP/UI/jqm/Extension/FloatLabel.ts","cdp:///CDP/UI/jqm/Extension/FlipSwitch.ts","cdp:///CDP/UI/jqm/Extension/Slider.ts","cdp:///CDP/UI/jqm/Extension/IScroll.ts"],"names":["CDP","UI","applyCustomChangePage","jqmChangePage","$","mobile","changePage","bind","to","options","_","isString","transition","Theme","queryPageTransition","Config","Framework","initialize","opt","extend","platform","reserveScrollbarRegion","detectUIPlatform","setCurrentUIPlatform","console","warn","TAG","getCurrentUIPlatform","$htms","i","n","s_platforms","length","hasClass","indexOf","$htms_1","forEach","target","removeClass","addClass","Platform","iOS","DEBUG","Mobile","css","registerUIPlatforms","platforms","registerPageTransitionMap","map","s_pageTransitionMap","registerDialogTransitionMap","s_dialogTransitionMap","original","convert","fallback","queryDialogTransition","platform-default","ios","android","platform-alternative","waitForInitialize","done","ExtensionManager","registerDomExtension","func","this","s_domExtensions","push","applyDomExtension","$ui","Toast","LENGTH_SHORT","LENGTH_LONG","OffsetX","OffsetY","StyleBuilderDefault","prototype","getClass","getStyle","padding","display","background-color","border-color","color","text-shadow","font-weight","opacity","getOffsetPoint","CENTER","BOTTOM","getOffsetX","getOffsetY","show","message","duration","style","$mobile","info","setCSS","html","replace","box","top","left","appendTo","pageContainer","posX","posY","offsetPoint","$window","window","box_width","width","parseInt","box_height","height","LEFT","RIGHT","TOP","delay","fadeOut","remove","Promise","Dialog","id","_template","_settings","_$dialog","initCommonCondition","s_defaultOptions","Tools","Template","getJST","src","_this","$document","document","$body","$page","pagecontainer","ofcHidden","overflow","overflow-x","overflow-y","ofcBody","parentScrollPos","scrollTop","ofcPage","scrollEvent","scrollHander","event","preventDefault","afterclose","forceOverwriteAfterClose","_titleState","title","localize","append","resolveTheme","on","register","enhanceWithin","domExtensionOptions","onBeforeShow","popup","positionTo","ui","off","autoClose","attr","defaultAutoClose","close","fail","error","trigger","Object","defineProperty","resolve","candidateTheme","queryTheme","jqmData","theme","overlayTheme","setDefaultOptions","dialog","s_activeDialog","isInitialized","s_oldBackKeyHandler","setBackButtonHandler","customBackKeyHandler","idPositive","idNegative","getDefaultClickEvent","dismissible","labelPositive","labelNegative","backKey","alert","confirm","DialogPrompt","_super","call","_eventOK","eventOK","__extends","onCommit","text","$el","find","val","keyCode","prompt","Router","View","BaseHeaderView","_owner","_options","el","backCommandSelector","backCommandKind","baseTemplate","setElement","create","createHeaderBase","activate","showIndicator","inactivate","hideIndicator","release","releaseHeaderBase","$header","s_$headerBase","s_refCount","body","_hasBackIndicator","events","eventMap","onCommandBack","handled","onCommand","back","BasePage","url","baseHeader","backCommandHandler","onPageBeforeCreate","_baseHeader","onPageInit","onPageBeforeShow","data","onPageBeforeHide","onPageRemove","onHardwareBackButton","retval","kind","Page","PageView","_pageOptions","_basePage","_statusMgr","owner","basePage","StatusManager","delegates","statusAddRef","status","statusRelease","statusScope","callback","isStatusIn","active","$footer","intent","newIntent","onOrientationChanged","newOrientation","onBeforeRouteChange","onInitialize","onPageShow","onPageHide","PageContainerView","listenTo","stopListening","_Config","TABVIEW_CLASS","TABVIEW_SELECTOR","TABHOST_CLASS","TABHOST_SELECTOR","TABHOST_REFRESH_COEFF","TABHOST_REFRESH_INTERVAL","TabHostView","_tabs","_activeTabIndex","_flipsnap","_flipEndEventHandler","_flipMoveEventHandler","_flipDeltaCache","_scrollEndEventHandler","_scrollMoveEventHandler","_refreshTimerId","_$contentsHolder","global","Flipsnap","tabContexts","tabMoveHandler","delta","tabStopHandler","newIndex","moved","fsEvent","originalEvent","onTabChanged","newPoint","enableBounce","direction","moveToPoint","onTabMoving","tabview","onTabScrolling","preprocess","onScrollStop","onScroll","initialWidth","initialHeight","slice","context","ctor","host","delayRegister","onTabViewSetupRequest","initImmediate","initializeTabViews","parent","setFlipsnapCondition","distance","setActiveTab","$tabs","index","destroy","resetFlipsnapCondition","onDestroy","getBaseHeight","registerTabView","getTabIndexOf","resetTabPosition","scrollTo","refresh","transitionDuration","initial","validTab","lastActiveTabIndex_1","changeTab_1","postprocess","setTimeout","getTabCount","getActiveTabIndex","getSwipeDelta","EVENT_TAB_MOVE","EVENT_TAB_STOP","getScrollPos","_activeTabView","getScrollPosMax","pos","animate","time","EVENT_SCROLL_MOVE","EVENT_SCROLL_STOP","setScrollHandler","handler","setScrollStopHandler","clearTimeout","proc_1","_maxPoint","rebuild","needRebuild","element","toIndex","treatScrollPosition","lastActiveTabIndex","inactiveVisibleTabDistance","onVisibilityChanged","onTabSelected","onTabReleased","SUPPRESS_WARNING_INITIAL_HEIGHT","TabView","_host","_needRebuild","core","$root","Backbone","visible","setActiveState","position","offset","_scrollMgr","_tabIndex","isActive","tabIndex","ListView","PageListView","autoDestoryElement","ScrollManager","reserveRebuild","setBaseHeight","getPageBaseHeight","addItem","initializer","insertTo","_addLine","LineProfile","Math","floor","removeItem","arg2","arg3","getItemInfo","update","backup","key","restore","hasBackup","clearBackup","backupData","ensureVisible","_line","PageExpandableListView","_expandManager","ExpandManager","newGroup","getGroup","registerTopGroup","topGroup","getTopGroups","expandAll","collapseAll","isExpanding","isCollapsing","isSwitching","layoutKey","Extension","fn","ripple","Patch","s_vclickEvent","surface","prepend","ink","d","max","outerWidth","outerHeight","x","pageX","y","pageY","rippleColor","ev","background","NO_RIPPLE_CLASS","selector","filter","elem","is","join","each","spinnerify","$target","param","clr","borderTop","border","makeTemplateParam","dataUrl","PREFIX","valid","prop","match","Date","now","toString","spinner","floating","$elem","floatingify","$input","_getAllSwitches","_getInputFromSwitch","$switch","$select","_change","nodeName","flipswitch","_getLabelsFromSwitch","labels","_getSwitchFromLabel","$label","name","currentTarget","changeTo","isSupportedVclick","blur","patch_IScroll_utils_click","e","clientX","clientY","changedTouches","test","tagName","createEvent","initMouseEvent","view","screenX","screenY","ctrlKey","altKey","shiftKey","metaKey","_constructed","dispatchEvent","s_applied","IScroll","utils","click"],"mappings":"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","sourcesContent":["namespace CDP.UI {\r\n\r\n    import Config       = CDP.Config;\r\n    import Framework    = CDP.Framework;\r\n\r\n    const TAG = \"[CDP.UI.Theme] \";\r\n\r\n    /**\r\n     * @interface PlatformTransition\r\n     * @brief プラットフォームごとの Transition を格納\r\n     */\r\n    export interface PlatformTransition {\r\n        [platform: string]: string;     // ex) ios: \"slide\"\r\n        fallback: string;               // fallback transition prop\r\n    }\r\n\r\n    /**\r\n     * @interface TransitionMap\r\n     * @brief トランジションマップ\r\n     */\r\n    export interface TransitionMap {\r\n        [transitionName: string]: PlatformTransition;\r\n    }\r\n\r\n    /**\r\n     * @interface ThemeInitOptions\r\n     * @brief トランジションマップ\r\n     */\r\n    export interface ThemeInitOptions {\r\n        platform?: string;                  // platform を指定. default:\"auto\"\r\n        reserveScrollbarRegion?: boolean;   // PC デバッグ環境ではスクロールバーを表示. default: \"true\"\r\n    }\r\n\r\n    //__________________________________________________________________________________________________________//\r\n\r\n    /**\r\n     * @class Theme\r\n     * @brief UI Theme 設定を行うユーティリティクラス\r\n     */\r\n    export class Theme {\r\n\r\n        private static s_platforms: string[] = [\"ios\", \"android\"];\r\n        private static s_pageTransitionMap: TransitionMap = {\r\n            \"platform-default\": {\r\n                ios: \"slide\",\r\n                android: \"floatup\",\r\n                fallback: \"slide\",\r\n            },\r\n            \"platform-alternative\": {\r\n                ios: \"slideup\",\r\n                android: \"floatup\",\r\n                fallback: \"slideup\",\r\n            },\r\n        };\r\n        private static s_dialogTransitionMap: TransitionMap = {\r\n            \"platform-default\": {\r\n                ios: \"popzoom\",\r\n                android: \"crosszoom\",\r\n                fallback: \"none\",\r\n            },\r\n        };\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // public static methods:\r\n\r\n        /**\r\n         * Theme の初期化\r\n         *\r\n         * @param options オプション指定\r\n         * @returns true: 成功 / false: 失敗\r\n         */\r\n        public static initialize(options?: ThemeInitOptions): string {\r\n            const opt = $.extend({}, {\r\n                platform: \"auto\",\r\n                reserveScrollbarRegion: true,\r\n            }, options);\r\n\r\n            if (\"auto\" === opt.platform) {\r\n                return Theme.detectUIPlatform(opt.reserveScrollbarRegion);\r\n            } else {\r\n                if (Theme.setCurrentUIPlatform(opt.platform)) {\r\n                    return opt.platform;\r\n                } else {\r\n                    console.warn(TAG + \"setCurrentUIPlatform(), failed. platform: \" + opt.platform);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * 現在指定されている UI Platform を取得\r\n         *\r\n         * @return {String} ex) \"ios\"\r\n         */\r\n        public static getCurrentUIPlatform(): string {\r\n            const $htms = $(\"html\");\r\n            for (let i = 0, n = Theme.s_platforms.length; i < n; i++) {\r\n                if ($htms.hasClass(\"ui-platform-\" + Theme.s_platforms[i])) {\r\n                    return Theme.s_platforms[i];\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n\r\n        /**\r\n         * UI Platform を設定\r\n         *\r\n         * @return {String} true: 成功 / false: 失敗\r\n         */\r\n        public static setCurrentUIPlatform(platform: string): boolean {\r\n            if (null == platform || Theme.s_platforms.indexOf(platform) >= 0) {\r\n                const $htms = $(\"html\");\r\n                Theme.s_platforms.forEach((target) => {\r\n                    $htms.removeClass(\"ui-platform-\" + target);\r\n                });\r\n                if (platform) {\r\n                    $htms.addClass(\"ui-platform-\" + platform);\r\n                }\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * 現在の Platform を判定し最適な platform を自動決定\r\n         *\r\n         * @param reserveScrollbarRegion PC デバッグ環境ではスクロールバーを表示. default: true\r\n         * @returns ex) \"ios\"\r\n         */\r\n        public static detectUIPlatform(reserveScrollbarRegion: boolean = true): string {\r\n            let platform = \"\";\r\n            // platform の設定\r\n            if (Framework.Platform.iOS) {\r\n                $(\"html\").addClass(\"ui-platform-ios\");\r\n                platform = \"ios\";\r\n            } else {\r\n                $(\"html\").addClass(\"ui-platform-android\");\r\n                platform = \"android\";\r\n            }\r\n            // PC デバッグ環境ではスクロールバーを表示\r\n            if (Config.DEBUG && reserveScrollbarRegion && !Framework.Platform.Mobile) {\r\n                $(\"body\").css(\"overflow-y\", \"scroll\");\r\n            }\r\n            return platform;\r\n        }\r\n\r\n        /**\r\n         * platform を配列で登録\r\n         * 上書きされる\r\n         *\r\n         * @param {String[]} platforms [in] OS ex): [\"ios\", \"android\"]\r\n         */\r\n        public static registerUIPlatforms(platforms: string[]): void {\r\n            if (platforms) {\r\n                Theme.s_platforms = platforms;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * page transition を登録\r\n         * 上書きされる\r\n         *\r\n         * @param {TransitionMap} map [in] TransitionMap を指定\r\n         */\r\n        public static registerPageTransitionMap(map: TransitionMap): void {\r\n            if (map) {\r\n                Theme.s_pageTransitionMap = map;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * dialog transition を登録\r\n         * 上書きされる\r\n         *\r\n         * @param {TransitionMap} map [in] TransitionMap を指定\r\n         */\r\n        public static registerDialogTransitionMap(map: TransitionMap): void {\r\n            if (map) {\r\n                Theme.s_dialogTransitionMap = map;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * page transition を取得\r\n         * TransitionMap にアサインされているものであれば変換\r\n         *\r\n         * @return {String[]} \"slide\"\r\n         */\r\n        public static queryPageTransition(original: string): string {\r\n            const convert = Theme.s_pageTransitionMap[original];\r\n            if (convert) {\r\n                return convert[Theme.getCurrentUIPlatform()] || convert.fallback;\r\n            } else {\r\n                return original;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * dialog transition を取得\r\n         * TransitionMap にアサインされているものであれば変換\r\n         *\r\n         * @return {String[]} \"slide\"\r\n         */\r\n        public static queryDialogTransition(original: string): string {\r\n            const convert = Theme.s_dialogTransitionMap[original];\r\n            if (convert) {\r\n                return convert[Theme.getCurrentUIPlatform()] || convert.fallback;\r\n            } else {\r\n                return original;\r\n            }\r\n        }\r\n    }\r\n\r\n    //__________________________________________________________________________________________________________//\r\n\r\n    // jquey.mobile.changePage() の Hook.\r\n    function applyCustomChangePage() {\r\n        const jqmChangePage: (to: any, options?: ChangePageOptions) => void = $.mobile.changePage.bind($.mobile);\r\n\r\n        function customChangePage(to: any, options?: ChangePageOptions): void {\r\n            if (_.isString(to)) {\r\n                if (options && options.transition) {\r\n                    options.transition = Theme.queryPageTransition(options.transition);\r\n                }\r\n            }\r\n            jqmChangePage(to, options);\r\n        }\r\n\r\n        $.mobile.changePage = customChangePage;\r\n    }\r\n\r\n    // framework 初期化後に適用\r\n    Framework.waitForInitialize()\r\n        .done(() => {\r\n            applyCustomChangePage();\r\n        });\r\n}\r\n","namespace CDP.UI {\r\n\r\n    /**\r\n     * @interface DomExtensionOptions\r\n     * @breif DomExtension に渡すオプションインターフェイス\r\n     */\r\n    export interface DomExtensionOptions {\r\n        [key: string]: any;\r\n    }\r\n\r\n    /**\r\n     * @type DomExtension\r\n     * @brief DOM 拡張関数\r\n     */\r\n    export type DomExtension = ($target: JQuery, DomExtensionOptions?: Object) => JQuery;\r\n\r\n    //__________________________________________________________________________________________________________//\r\n\r\n    /**\r\n     * @class ExtensionManager\r\n     * @brief 拡張機能を管理するユーティリティクラス\r\n     */\r\n    export class ExtensionManager {\r\n\r\n        private static s_domExtensions: DomExtension[] = [];\r\n\r\n        /**\r\n         * DOM 拡張関数の登録\r\n         *\r\n         * @param {DomExtension} func [in] DOM 拡張関数\r\n         */\r\n        public static registerDomExtension(func: DomExtension): void {\r\n            this.s_domExtensions.push(func);\r\n        }\r\n\r\n        /**\r\n         * DOM 拡張を適用\r\n         *\r\n         * @param {jQuery} $ui       [in] 拡張対象の DOM\r\n         * @param {Object} [options] [in] オプション\r\n         */\r\n        public static applyDomExtension($ui: JQuery, options?: DomExtensionOptions): void {\r\n            this.s_domExtensions.forEach((func: DomExtension) => {\r\n                func($ui, options);\r\n            });\r\n        }\r\n    }\r\n}\r\n","/* tslint:disable:no-bitwise */\r\n\r\nnamespace CDP.UI {\r\n\r\n    const TAG = \"[CDP.UI.Toast] \";\r\n\r\n    /**\r\n     * @class Toast\r\n     * @brief Android SDK の Toast クラスのように自動消滅するメッセージ出力ユーティリティ\r\n     *        入れ子の関係を実現するために module で実装\r\n     */\r\n    export module Toast {\r\n\r\n        // 表示時間の定義\r\n        export let LENGTH_SHORT = 1500;   //!< 短い:1500 msec\r\n        export let LENGTH_LONG  = 4000;   //!< 長い:4000 msec\r\n\r\n        //! @enum オフセットの基準\r\n        export enum OffsetX {\r\n            LEFT    = 0x0001,\r\n            RIGHT   = 0x0002,\r\n            CENTER  = 0x0004,\r\n        }\r\n\r\n        //! @enum オフセットの基準\r\n        export enum OffsetY {\r\n            TOP     = 0x0010,\r\n            BOTTOM  = 0x0020,\r\n            CENTER  = 0x0040,\r\n        }\r\n\r\n        /**\r\n         * @interface StyleBuilder\r\n         * @brief     スタイル変更時に使用するインターフェイス\r\n         *            css にスタイルを逃がす場合、独自の class を設定し、getStyle は null を返すこと。\r\n         */\r\n        export interface StyleBuilder {\r\n            //! class attribute に設定する文字列を取得\r\n            getClass(): string;\r\n            //! style attribute に設定する JSON オブジェクトを取得\r\n            getStyle(): any;\r\n            //! オフセットの基準位置を取得\r\n            getOffsetPoint(): number;\r\n            //! X 座標のオフセット値を取得\r\n            getOffsetX(): number;\r\n            //! Y 座標のオフセット値を取得\r\n            getOffsetY(): number;\r\n        }\r\n\r\n        /**\r\n         * @class StyleBuilderDefault\r\n         * @brief スタイル変更時に使用する既定の構造体オブジェクト\r\n         */\r\n        export class StyleBuilderDefault implements StyleBuilder {\r\n\r\n            //! class attribute に設定する文字列を取得\r\n            getClass(): string {\r\n                return \"ui-loader ui-overlay-shadow ui-corner-all\";\r\n            }\r\n\r\n            //! style attribute に設定する JSON オブジェクトを取得\r\n            getStyle(): any {\r\n                const style = {\r\n                    \"padding\":          \"7px 25px 7px 25px\",\r\n                    \"display\":          \"block\",\r\n                    \"background-color\": \"#1d1d1d\",\r\n                    \"border-color\":     \"#1b1b1b\",\r\n                    \"color\":            \"#fff\",\r\n                    \"text-shadow\":      \"0 1px 0 #111\",\r\n                    \"font-weight\":      \"bold\",\r\n                    \"opacity\":          0.8,\r\n                };\r\n                return style;\r\n            }\r\n\r\n            //! オフセットの基準位置を取得\r\n            getOffsetPoint(): number {\r\n                return OffsetX.CENTER | OffsetY.BOTTOM;\r\n            }\r\n\r\n            //! X 座標のオフセット値を取得\r\n            getOffsetX(): number {\r\n                return 0;\r\n            }\r\n\r\n            //! Y 座標のオフセット値を取得\r\n            getOffsetY(): number {\r\n                return -75;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Toast 表示\r\n         *\r\n         * @param message  [in] メッセージ\r\n         * @param duration [in] 表示時間を設定 (msec) default: LENGTH_SHORT\r\n         * @param style    [in] スタイル変更する場合には派生クラスオブジェクトを指定\r\n         */\r\n        export function show(message: string, duration: number = Toast.LENGTH_SHORT, style?: StyleBuilder): void {\r\n            const $mobile = $.mobile;\r\n            const info = style || new StyleBuilderDefault();\r\n            const setCSS = info.getStyle() ? true : false;\r\n\r\n            // 改行コードは <br/> に置換する\r\n            const msg = message.replace(/\\n/g, \"<br/>\");\r\n\r\n            // メッセージ element の動的生成\r\n            const html = \"<div>\" + msg + \"</div>\";\r\n            const box = $(html).addClass(info.getClass());\r\n            if (setCSS) {\r\n                box.css(info.getStyle());\r\n            }\r\n\r\n            // 自動改行されてもよいように、基点を設定してから追加\r\n            box.css({\r\n                \"top\": 0,\r\n                \"left\": 0,\r\n            }).appendTo($mobile.pageContainer);\r\n\r\n            // 配置位置の決定\r\n            const offsetPoint = info.getOffsetPoint();\r\n            const $window = $(window);\r\n            let posX, posY;\r\n\r\n            const box_width = box.width() + parseInt(box.css(\"padding-left\"), 10) + parseInt(box.css(\"padding-right\"), 10);\r\n            const box_height = box.height() + parseInt(box.css(\"padding-top\"), 10) + parseInt(box.css(\"padding-bottom\"), 10);\r\n\r\n            switch (offsetPoint & 0x000F) {\r\n                case OffsetX.LEFT:\r\n                    posX = 0 + info.getOffsetX();\r\n                    break;\r\n                case OffsetX.RIGHT:\r\n                    posX = $window.width() - box_width + info.getOffsetX();\r\n                    break;\r\n                case OffsetX.CENTER:\r\n                    posX = ($window.width() / 2) - (box_width / 2) + info.getOffsetX();\r\n                    break;\r\n                default:\r\n                    console.warn(TAG + \"warn. unknown offsetPoint:\" + (offsetPoint & 0x000F));\r\n                    posX = ($window.width() / 2) - (box_width / 2) + info.getOffsetX();\r\n                    break;\r\n            }\r\n\r\n            switch (offsetPoint & 0x00F0) {\r\n                case OffsetY.TOP:\r\n                    posY = 0 + info.getOffsetY();\r\n                    break;\r\n                case OffsetY.BOTTOM:\r\n                    posY = $window.height() - box_height + info.getOffsetY();\r\n                    break;\r\n                case OffsetY.CENTER:\r\n                    posY = ($window.height() / 2) - (box_height / 2) + info.getOffsetY();\r\n                    break;\r\n                default:\r\n                    console.warn(TAG + \"warn. unknown offsetPoint:\" + (offsetPoint & 0x00F0));\r\n                    posY = ($window.height() / 2) - (box_height / 2) + info.getOffsetY();\r\n                    break;\r\n            }\r\n\r\n            // 表示\r\n            box.css({\r\n                \"top\": posY,\r\n                \"left\": posX,\r\n            })\r\n            .delay(duration)\r\n            .fadeOut(400, function () {\r\n                $(this).remove();\r\n            });\r\n        }\r\n    }\r\n}\r\n","namespace CDP.UI {\r\n\r\n    import Promise      = CDP.Promise;\r\n    import Framework    = CDP.Framework;\r\n\r\n    const TAG = \"[CDP.UI.Dialog] \";\r\n\r\n    /**\r\n     * H/W Back Key Hook 関数\r\n     */\r\n    export type DialogBackKeyHandler = (event?: JQuery.Event) => void;\r\n\r\n    /**\r\n     * @interface DialogOptions\r\n     *            ダイアログオプションインターフェイス\r\n     */\r\n    export interface DialogOptions extends PopupOptions {\r\n        src?: string;                   //!< {String} template ファイルのパス                                 default: undefined\r\n        title?: string;                 //!< {String} ダイアログタイトル                                      default: undefined\r\n        message?: string;               //!< {String} メインメッセージ                                        default: undefined\r\n        idPositive?: string;            //!< {String} Positive ボタンのID                                     default: \"dlg-btn-positive\"\r\n        idNegative?: string;            //!< {String} Nagative ボタンのID                                     default: \"dlg-btn-negative\"\r\n        event?: string;                 //!< {String} Dialog クラスが管理するイベント                         default: \"vclick\"\r\n        defaultAutoClose?: boolean;     //!< {Boolean} data-auto-close が指定されていない場合の既定値         default: false\r\n        forceOverwriteAfterClose?: boolean; //!< {Boolean} afterclose オプションを強制上書きするための設定    default: false\r\n        labelPositive?: string;         //!< {String} Positive ボタンラベル                                   default: \"OK\"\r\n        labelNegative?: string;         //!< {String} Negative ボタンラベル                                   default: \"Cancel\"\r\n        backKey?: \"close\" | \"deny\" | DialogBackKeyHandler;  //!< H/W backKey の振る舞い                       default: \"close\"\r\n        scrollEvent?: \"deny\" | \"allow\" | \"adjust\";   //!< {String} scrollの抑止方式  (※ adjust は試験的)     default: \"deny\"\r\n        domExtensionOptions?: DomExtensionOptions;   //!< DOM拡張オプション. null|undefined で拡張しない      default: {}\r\n        [x: string]: any;               //!< any dialog template parameters.\r\n    }\r\n\r\n    //___________________________________________________________________________________________________________________//\r\n\r\n    /**\r\n     * @class Dialog\r\n     * @brief 汎用ダイアログクラス\r\n     *        jQM の popup widget によって実装\r\n     */\r\n    export class Dialog {\r\n\r\n        private _template: Tools.JST = null;\r\n        private _settings: DialogOptions = null;\r\n        private _$dialog: JQuery = null;\r\n\r\n        private static s_activeDialog: Dialog = null;\r\n        private static s_oldBackKeyHandler: (event?: JQuery.Event) => void = null;\r\n        private static s_defaultOptions: DialogOptions = null;\r\n\r\n        /**\r\n         * constructor\r\n         *\r\n         * @param id      {String}        [in] ダイアログ DOM ID を指定 ex) #dialog-hoge\r\n         * @param options {DialogOptions} [in] オプション\r\n         */\r\n        constructor(id: string, options?: DialogOptions) {\r\n            // Dialog 共通設定の初期化\r\n            Dialog.initCommonCondition();\r\n            // 設定を更新\r\n            this._settings = $.extend({}, Dialog.s_defaultOptions, options);\r\n            // ダイアログテンプレートを作成\r\n            this._template = Tools.Template.getJST(id, this._settings.src);\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // public methods\r\n\r\n        /**\r\n         * 表示\r\n         * 表示をして始めて DOM が有効になる。\r\n         *\r\n         * @param options {DialogOptions} [in] オプション (src は無視される)\r\n         * @return ダイアログの jQuery オブジェクト\r\n         */\r\n        public show(options?: DialogOptions): JQuery {\r\n            const $document = $(document);\r\n            const $body = $(\"body\");\r\n            const $page = (<any>$body).pagecontainer(\"getActivePage\");\r\n\r\n            const ofcHidden = {\r\n                \"overflow\":     \"hidden\",\r\n                \"overflow-x\":   \"hidden\",\r\n                \"overflow-y\":   \"hidden\",\r\n            };\r\n            const ofcBody = { // body overflow context\r\n                \"overflow\":     $body.css(\"overflow\"),\r\n                \"overflow-x\":   $body.css(\"overflow-x\"),\r\n                \"overflow-y\":   $body.css(\"overflow-y\"),\r\n            };\r\n            const parentScrollPos = $body.scrollTop();\r\n            const ofcPage = { // page overflow context\r\n                \"overflow\":     $page.css(\"overflow\"),\r\n                \"overflow-x\":   $page.css(\"overflow-x\"),\r\n                \"overflow-y\":   $page.css(\"overflow-y\"),\r\n            };\r\n\r\n            const scrollEvent = \"scroll touchmove mousemove MSPointerMove\";\r\n\r\n            const scrollHander = (event: JQuery.Event) => {\r\n                if (\"deny\" === this._settings.scrollEvent) {\r\n                    event.preventDefault();\r\n                } else if (\"adjust\" === this._settings.scrollEvent) {\r\n                    $body.scrollTop(parentScrollPos);\r\n                }\r\n            };\r\n\r\n            // option が指定されていた場合更新\r\n            if (null != options) {\r\n                this._settings = $.extend({}, this._settings, options);\r\n            }\r\n\r\n            // afterclose 処理は Dialog の破棄処理を実装するため基本的に設定禁止 (強制上書きモードを設定使用可)\r\n            if (this._settings.afterclose && !this._settings.forceOverwriteAfterClose) {\r\n                console.warn(TAG + \"cannot accept 'afterclose' option. please instead using 'popupafterclose' event.\");\r\n                delete this._settings.afterclose;\r\n            }\r\n\r\n            // title の有無\r\n            (<any>this._settings)._titleState = this._settings.title ? \"ui-has-title\" : \"ui-no-title\";\r\n\r\n            /*\r\n             * template から jQuery オブジェクトを作成し、\r\n             * <body> 直下に追加.\r\n             * $page では Backbone event を受けられないことに注意\r\n             */\r\n            this._$dialog = $(this._template(this._settings));\r\n            this._$dialog.localize();\r\n            $body.append(this._$dialog);\r\n\r\n            // theme を解決\r\n            this.resolveTheme();\r\n\r\n            this._$dialog\r\n                .on(\"popupcreate\", (event: JQuery.Event) => {\r\n                    // スクロールを抑止\r\n                    if (\"allow\" !== this._settings.scrollEvent) {\r\n                        $document.on(scrollEvent, scrollHander);\r\n                    }\r\n                    $body.css(ofcHidden);\r\n                    $page.css(ofcHidden);\r\n                    Dialog.register(this);\r\n                })\r\n                .enhanceWithin();\r\n\r\n            // DOM 拡張\r\n            if (null != this._settings.domExtensionOptions) {\r\n                ExtensionManager.applyDomExtension(this._$dialog, this._settings.domExtensionOptions);\r\n            }\r\n\r\n            this.onBeforeShow()\r\n                .done(() => {\r\n                    // 表示\r\n                    this._$dialog\r\n                        .popup($.extend({}, {\r\n                            positionTo: \"window\",\r\n                            afterclose: (event: JQuery.Event, ui: any) => {\r\n                                // スクロール状態を戻す\r\n                                $page.css(ofcPage);\r\n                                $body.css(ofcBody);\r\n                                if (\"allow\" !== this._settings.scrollEvent) {\r\n                                    $document.off(scrollEvent, scrollHander);\r\n                                }\r\n                                Dialog.register(null);\r\n                                this._$dialog.remove();\r\n                                this._$dialog = null;\r\n                            },\r\n                        }, this._settings))\r\n                        .popup(\"open\").on(this._settings.event, (event: JQuery.Event) => {\r\n                            // \"data-auto-close='false'\" が指定されている要素は dialog を閉じない\r\n                            let autoClose = $(event.target).attr(\"data-auto-close\");\r\n                            if (null == autoClose) {\r\n                                autoClose = this._settings.defaultAutoClose ? \"true\" : \"false\";\r\n                            }\r\n                            if (\"false\" === autoClose) {\r\n                                return;\r\n                            }\r\n                            this.close();\r\n                            event.preventDefault();\r\n                        });\r\n\r\n                })\r\n                .fail((error) => {\r\n                    console.error(TAG + \"Dialog.show() failed.\");\r\n                    if (this._$dialog) {\r\n                        this._$dialog.trigger(\"error\", error);\r\n                    }\r\n                });\r\n\r\n            return this._$dialog;\r\n        }\r\n\r\n        /**\r\n         * 終了\r\n         * 基本的には自動で閉じるが、\r\n         * 表示中のダイアログをクライアント側から閉じるメソッド\r\n         */\r\n        public close(): void {\r\n            if (this._$dialog) {\r\n                this._$dialog.popup(\"close\");\r\n            }\r\n        }\r\n\r\n        //! ダイアログ element を取得\r\n        public get $el(): JQuery {\r\n            return this._$dialog;\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // protected methods: Override\r\n\r\n        /**\r\n         * ダイアログ表示の直前\r\n         * DOM を操作できるタイミングで呼び出される.\r\n         *\r\n         * @return {IPromiseBase} promise オブジェクト\r\n         */\r\n        protected onBeforeShow(): IPromiseBase<void> {\r\n            return Promise.resolve<void>();\r\n        }\r\n\r\n        /**\r\n         * ダイアログの使用する Theme を解決\r\n         * 不要な場合はオーバーライドすることも可能\r\n         */\r\n        protected resolveTheme(): void {\r\n            const queryTheme = (): string => {\r\n                return $(\".ui-page-active\").jqmData(\"theme\");\r\n            };\r\n\r\n            let candidateTheme: string;\r\n\r\n            if (!this._settings.theme) {\r\n                const domTheme = this._$dialog.jqmData(\"theme\");\r\n                if (!domTheme) {\r\n                    this._settings.theme = candidateTheme = queryTheme();\r\n                }\r\n\r\n            }\r\n            if (!this._settings.overlayTheme) {\r\n                const domOverlayTheme = this._$dialog.jqmData(\"overlay-theme\");\r\n                if (!domOverlayTheme) {\r\n                    this._settings.overlayTheme = candidateTheme || queryTheme();\r\n                }\r\n            }\r\n\r\n            // transition の更新\r\n            this._settings.transition = Theme.queryDialogTransition(this._settings.transition);\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // public static methods\r\n\r\n        /**\r\n         * Dialog の既定オプションを更新\r\n         * すべての Dialog が使用する共通設定\r\n         *\r\n         * @param options {DialogOptions} [in] ダイアログオプション\r\n         */\r\n        public static setDefaultOptions(options: DialogOptions): void {\r\n            // Dialog 共通設定の初期化\r\n            Dialog.initCommonCondition();\r\n            $.extend(true, Dialog.s_defaultOptions, options);\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // private methods\r\n\r\n        // 現在 active なダイアログとして登録する\r\n        private static register(dialog: Dialog): void {\r\n            if (null != dialog && null != Dialog.s_activeDialog) {\r\n                console.warn(TAG + \"new dialog proc is called in the past dialog's one. use setTimeout() for post process.\");\r\n            }\r\n            Dialog.s_activeDialog = dialog;\r\n        }\r\n\r\n        /**\r\n         * Dialog 共通設定の初期化\r\n         */\r\n        private static initCommonCondition(): void {\r\n            // Framework の初期化後に処理する必要がある\r\n            if (!Framework.isInitialized()) {\r\n                console.warn(TAG + \"initCommonCondition() should be called after Framework.initialized.\");\r\n                return;\r\n            }\r\n\r\n            if (null == Dialog.s_oldBackKeyHandler) {\r\n                // Back Button Handler\r\n                Dialog.s_oldBackKeyHandler = CDP.setBackButtonHandler(null);\r\n                CDP.setBackButtonHandler(Dialog.customBackKeyHandler);\r\n\r\n                // 既定オプション\r\n                Dialog.s_defaultOptions = {\r\n                    idPositive:             \"dlg-btn-positive\",\r\n                    idNegative:             \"dlg-btn-negative\",\r\n                    event:                  Framework.getDefaultClickEvent(),\r\n                    dismissible:            false,\r\n                    defaultAutoClose:       false,\r\n                    transition:             \"platform-default\",\r\n                    labelPositive:          \"OK\",\r\n                    labelNegative:          \"Cancel\",\r\n                    backKey:                \"close\",\r\n                    scrollEvent:            \"deny\",\r\n                    domExtensionOptions:    {},\r\n                };\r\n            }\r\n        }\r\n\r\n        /**\r\n         * H/W Back Button Handler\r\n         */\r\n        private static customBackKeyHandler(event?: JQuery.Event): void {\r\n            if (null != Dialog.s_activeDialog) {\r\n                if (\"close\" === Dialog.s_activeDialog._settings.backKey) {\r\n                    Dialog.s_activeDialog.close();\r\n                } else if (\"function\" === typeof Dialog.s_activeDialog._settings.backKey) {\r\n                    (<DialogBackKeyHandler>Dialog.s_activeDialog._settings.backKey)(event);\r\n                }\r\n                return; // Dialog が active な場合、常に既定のハンドラには渡さない\r\n            }\r\n            Dialog.s_oldBackKeyHandler(event);\r\n        }\r\n    }\r\n}\r\n","/* tslint:disable:max-line-length */\r\n\r\nnamespace CDP.UI {\r\n\r\n    const TAG = \"[CDP.UI.DialogCommons] \";\r\n\r\n    /**\r\n     * Alert\r\n     * alert メッセージ表示\r\n     *\r\n     * @param {String} message   [in] 表示文字列\r\n     * @param {String} [options] [in] ダイアログオプション\r\n     * @return {jQuery} ダイアログの DOM オブジェクト\r\n     */\r\n    export function alert(message: string, options?: DialogOptions): JQuery {\r\n        const template = `\r\n            <script type=\"text/template\">\r\n                <section class=\"ui-modal\" data-role=\"popup\" data-corners=\"false\">\r\n                    <div class=\"ui-content\">\r\n                        <h1 class=\"ui-title {{_titleState}}\">{{title}}</h1>\r\n                        <p class=\"ui-message\">{{message}}</p>\r\n                    </div>\r\n                    <div class=\"ui-modal-footer ui-grid-solo\">\r\n                        <button id=\"{{idPositive}}\" class=\"ui-btn ui-block-a ui-text-emphasis\" data-auto-close=\"true\">{{labelPositive}}</button>\r\n                    </div>\r\n                </section>\r\n            </script>\r\n        `;\r\n\r\n        const dlgAlert = new Dialog(template, $.extend({}, {\r\n            src: null,\r\n            message: message,\r\n        }, options));\r\n\r\n        return dlgAlert.show();\r\n    }\r\n\r\n    /**\r\n     * Confirm\r\n     * 確認メッセージ表示\r\n     *\r\n     * @param {String} message   [in] 表示文字列\r\n     * @param {String} [options] [in] ダイアログオプション\r\n     * @return {jQuery} ダイアログの DOM オブジェクト\r\n     */\r\n    export function confirm(message: string, options?: DialogOptions): JQuery {\r\n        const template = `\r\n            <script type=\"text/template\">\r\n                <section class=\"ui-modal\" data-role=\"popup\" data-corners=\"false\">\r\n                    <div class=\"ui-content\">\r\n                        <h1 class=\"ui-title {{_titleState}}\">{{title}}</h1>\r\n                        <p class=\"ui-message\">{{message}}</p>\r\n                    </div>\r\n                    <div class=\"ui-modal-footer ui-grid-a\">\r\n                        <button id=\"{{idNegative}}\" class=\"ui-btn ui-block-a\" data-auto-close=\"true\">{{labelNegative}}</button>\r\n                        <button id=\"{{idPositive}}\" class=\"ui-btn ui-block-b ui-text-emphasis\" data-auto-close=\"true\">{{labelPositive}}</button>\r\n                    </div>\r\n                </section>\r\n            </script>\r\n        `;\r\n\r\n        const dlgConfirm = new Dialog(template, $.extend({}, {\r\n            src: null,\r\n            message: message,\r\n        }, options));\r\n\r\n        return dlgConfirm.show();\r\n    }\r\n\r\n    /**\r\n     * @interface DialogCommonsOptions\r\n     * @brief prompt のオプション\r\n     */\r\n    export interface DialogPromptOptions extends DialogOptions {\r\n        eventOK?: string; //!< OK ボタン押下時の event: default: promptok\r\n    }\r\n\r\n    /**\r\n     * @class DialogPrompt\r\n     * @brief prompt ダイアログ (非公開)\r\n     */\r\n    class DialogPrompt extends Dialog {\r\n\r\n        private _eventOK: string;\r\n\r\n        /**\r\n         * constructor\r\n         *\r\n         */\r\n        constructor(id: string, options?: DialogPromptOptions) {\r\n            super(id, options);\r\n            this._eventOK = options.eventOK || \"promptok\";\r\n        }\r\n\r\n        //! ダイアログ表示の直前\r\n        protected onBeforeShow(): IPromiseBase<void> {\r\n            const onCommit = (event: JQuery.Event) => {\r\n                const text = this.$el.find(\"#_ui-prompt\").val();\r\n                this.$el.trigger(this._eventOK, text);\r\n                this.close();\r\n                event.preventDefault();\r\n            };\r\n\r\n            this.$el\r\n                .on(\"vclick\", \".command-prompt-ok \", (event: JQuery.Event) => {\r\n                    onCommit(event);\r\n                })\r\n                .on(\"keydown\", \"#_ui-prompt\", (event: JQuery.Event) => {\r\n                    const ENTER_KEY_CODE = 13;\r\n                    if (ENTER_KEY_CODE === event.keyCode) {\r\n                        onCommit(event);\r\n                    }\r\n                });\r\n\r\n            return super.onBeforeShow();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prompt\r\n     *\r\n     * @param {String} message   [in] 表示文字列\r\n     * @param {String} [options] [in] ダイアログオプション\r\n     * @return {jQuery} ダイアログの DOM オブジェクト\r\n     */\r\n    export function prompt(message: string, options?: DialogPromptOptions): JQuery {\r\n        const template = `\r\n            <script type=\"text/template\">\r\n                <section class=\"ui-modal\" data-role=\"popup\" data-corners=\"false\">\r\n                    <div class=\"ui-content\">\r\n                        <h1 class=\"ui-title {{_titleState}}\">{{title}}</h1>\r\n                        <p class=\"ui-message\">{{message}}</p>\r\n                        <label for=\"_ui-prompt\" class=\"ui-hidden-accessible\"></label>\r\n                        <input type=\"text\" name=\"_ui-prompt\" id=\"_ui-prompt\">\r\n                    </div>\r\n                    <div class=\"ui-modal-footer ui-grid-a\">\r\n                        <button id=\"{{idNegative}}\" class=\"ui-btn ui-block-a\" data-auto-close=\"true\">{{labelNegative}}</button>\r\n                        <button id=\"{{idPositive}}\" class=\"command-prompt-ok ui-btn ui-block-b ui-text-emphasis\" data-auto-close=\"false\">{{labelPositive}}</button>\r\n                    </div>\r\n                </section>\r\n            </script>\r\n        `;\r\n\r\n        const dlgPrompt = new DialogPrompt(template, $.extend({}, {\r\n            src: null,\r\n            message: message,\r\n        }, options));\r\n\r\n        return dlgPrompt.show();\r\n    }\r\n}\r\n","namespace CDP.UI {\r\n\r\n    import Router       = CDP.Framework.Router;\r\n    import IPage        = CDP.Framework.IPage;\r\n    import Model        = CDP.Framework.Model;\r\n    import View         = CDP.Framework.View;\r\n    import ViewOptions  = CDP.Framework.ViewOptions;\r\n    import Template     = CDP.Tools.Template;\r\n    import JST          = CDP.Tools.JST;\r\n\r\n    const TAG: string = \"[CDP.UI.BaseHeaderView] \";\r\n\r\n    /**\r\n     * @interface BaseHeaderViewOptions\r\n     * @brief BaseHeaderView に指定するオプションインターフェイス\r\n     */\r\n    export interface BaseHeaderViewOptions<TModel extends Model = Model> extends ViewOptions<TModel> {\r\n        baseTemplate?: JST;             //!< 固定ヘッダ用 JavaScript テンプレート.\r\n        backCommandSelector?: string;   //!< \"戻る\"コマンドセレクタ. default: \"command-back\"\r\n        backCommandKind?: string;       //!< \"戻る\"コマンド種別 (onCommand 第2引数). default: \"pageback\"\r\n    }\r\n\r\n    //__________________________________________________________________________________________________________//\r\n\r\n    /**\r\n     * @class BaseHeaderView\r\n     * @brief 共通ヘッダを操作するクラス\r\n     */\r\n    export class BaseHeaderView<TModel extends Model = Model> extends View<TModel> {\r\n\r\n        private static s_$headerBase: JQuery;   //!< ページ外に配置される共通ヘッダのベース部品用 jQuery オブジェクト\r\n        private static s_refCount = 0;          //!< 参照カウント\r\n        private _template: JST;\r\n        private _hasBackIndicator: boolean;\r\n\r\n        /**\r\n         * constructor\r\n         *\r\n         * @param {IPage} _owner [in] オーナーページインスタンス\r\n         */\r\n        constructor(private _owner: IPage, private _options?: BaseHeaderViewOptions<TModel>) {\r\n            super(_options = $.extend({\r\n                el: _owner.$page.find(\"[data-role='header']\"),\r\n                backCommandSelector: \".command-back\",\r\n                backCommandKind: \"pageback\",\r\n            }, _options));\r\n\r\n            // template 設定\r\n            if (_options.baseTemplate) {\r\n                this._template = _options.baseTemplate;\r\n            } else {\r\n                this._template = Template.getJST(`\r\n                    <script type='text/template'>\r\n                        <header class='ui-header-base ui-body-{{theme}}'>\r\n                            <div class='ui-fixed-back-indicator'></div>\r\n                        </header>\r\n                    </script>\r\n                `);\r\n            }\r\n\r\n            // Backbone.View 用の初期化\r\n            this.setElement(this.$el, true);\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // public methods\r\n\r\n        /**\r\n         * 初期化\r\n         */\r\n        public create(): JQuery {\r\n            return this.createHeaderBase();\r\n        }\r\n\r\n        /**\r\n         * 有効化\r\n         */\r\n        public activate(): JQuery {\r\n            return this.showIndicator();\r\n        }\r\n\r\n        /**\r\n         * 無効化\r\n         */\r\n        public inactivate(): JQuery {\r\n            return this.hideIndicator();\r\n        }\r\n\r\n        /**\r\n         * 破棄\r\n         */\r\n        public release(): JQuery {\r\n            return this.releaseHeaderBase();\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // private methods\r\n\r\n        //! 共通ヘッダのベースを準備\r\n        private createHeaderBase(): JQuery {\r\n            // 固定ヘッダのときに有効化\r\n            if (\"fixed\" === this._owner.$header.jqmData(\"position\")) {\r\n                if (null == BaseHeaderView.s_$headerBase) {\r\n                    BaseHeaderView.s_$headerBase = $(this._template({\r\n                        theme: this._owner.$page.jqmData(\"theme\"),\r\n                    }));\r\n                }\r\n                BaseHeaderView.s_refCount++;\r\n                BaseHeaderView.s_$headerBase.appendTo($(document.body));\r\n            }\r\n            // Back Indicator を持っているか判定\r\n            if (0 < this.$el.find(\".ui-back-indicator\").length) {\r\n                this._hasBackIndicator = true;\r\n            }\r\n            return BaseHeaderView.s_$headerBase;\r\n        }\r\n\r\n        //! indicator の表示\r\n        private showIndicator(): JQuery {\r\n            // Back Indicator を持っていない場合表示しない\r\n            if (null != BaseHeaderView.s_$headerBase && this._hasBackIndicator) {\r\n                BaseHeaderView.s_$headerBase.find(\".ui-fixed-back-indicator\").addClass(\"show\");\r\n            }\r\n            return BaseHeaderView.s_$headerBase;\r\n        }\r\n\r\n        //! indicator の非表示\r\n        private hideIndicator(): JQuery {\r\n            if (null != BaseHeaderView.s_$headerBase) {\r\n                BaseHeaderView.s_$headerBase.find(\".ui-fixed-back-indicator\").removeClass(\"show\");\r\n            }\r\n            return BaseHeaderView.s_$headerBase;\r\n        }\r\n\r\n        //! 共通ヘッダのベースを破棄\r\n        private releaseHeaderBase(): JQuery {\r\n            // 固定ヘッダ時に参照カウントを管理\r\n            if (\"fixed\" === this._owner.$header.jqmData(\"position\")) {\r\n                if (null != BaseHeaderView.s_$headerBase) {\r\n                    BaseHeaderView.s_refCount--;\r\n                    if (0 === BaseHeaderView.s_refCount) {\r\n                        BaseHeaderView.s_$headerBase.remove();\r\n                        BaseHeaderView.s_$headerBase = null;\r\n                    }\r\n                }\r\n            }\r\n            return BaseHeaderView.s_$headerBase;\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Override: Backbone.View\r\n\r\n        //! events binding\r\n        events(): any {\r\n            const eventMap = {};\r\n            if (this._options) {\r\n                eventMap[\"vclick \" + this._options.backCommandSelector] = this.onCommandBack;\r\n            }\r\n            return eventMap;\r\n        }\r\n\r\n        //! back のハンドラ\r\n        private onCommandBack(event: JQuery.Event): void {\r\n            event.preventDefault();\r\n            let handled = false;\r\n            if (this._owner) {\r\n                handled = this._owner.onCommand(event, this._options.backCommandKind);\r\n            }\r\n            if (!handled) {\r\n                Router.back();\r\n            }\r\n        }\r\n    }\r\n}\r\n","/* tslint:disable:max-line-length */\r\n\r\nnamespace CDP.UI {\r\n\r\n    import Framework = CDP.Framework;\r\n\r\n    const TAG: string = \"[CDP.UI.BasePage] \";\r\n\r\n    /**\r\n     * @interface BasePageOptions\r\n     * @brief BasePage に指定するオプションインターフェイス\r\n     */\r\n    export interface BasePageOptions<TModel extends Framework.Model = Framework.Model> extends Framework.PageConstructOptions, BaseHeaderViewOptions<TModel> {\r\n        baseHeader?: new (owner: Framework.IPage, options?: BaseHeaderViewOptions<TModel>) => BaseHeaderView<TModel>;   //!< Header 機能を提供する基底インスタンス\r\n        backCommandHandler?: string;                //!< \"戻る\" コマンドハンドラメソッド名.                             default: onPageBack\r\n        domExtensionOptions?: DomExtensionOptions;  //!< DOM拡張に渡すオプション. null|undefined を指定すると拡張しない default: {}\r\n    }\r\n\r\n    //__________________________________________________________________________________________________________//\r\n\r\n    /**\r\n     * @class BasePage\r\n     * @brief Header を備える Page クラス\r\n     */\r\n    export class BasePage<TModel extends Framework.Model = Framework.Model> extends Framework.Page {\r\n\r\n        private _baseHeader: BaseHeaderView<TModel>;    //!< ヘッダクラス\r\n\r\n        /**\r\n         * constructor\r\n         *\r\n         * @param {String}          url       [in] ページ URL\r\n         * @param {String}          id        [in] ページ ID\r\n         * @param {BasePageOptions} [options] [in] オプション\r\n         */\r\n        constructor(url: string, id: string, private _options?: BasePageOptions<TModel>) {\r\n            super(url, id, _options = $.extend({\r\n                baseHeader: BaseHeaderView,\r\n                backCommandHandler: \"onPageBack\",\r\n                backCommandKind: \"pageback\",\r\n                domExtensionOptions: {},\r\n            }, _options));\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Override: Framework Page\r\n\r\n        /**\r\n         * jQM event: \"pagebeforecreate\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         */\r\n        onPageBeforeCreate(event: JQuery.Event): void {\r\n            if (this._options.baseHeader) {\r\n                this._baseHeader = new this._options.baseHeader(this, this._options);\r\n                this._baseHeader.create();\r\n            }\r\n            super.onPageBeforeCreate(event);\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagecreate\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         */\r\n        onPageInit(event: JQuery.Event): void {\r\n            if (null != this._options.domExtensionOptions) {\r\n                ExtensionManager.applyDomExtension(this.$page, this._options.domExtensionOptions);\r\n            }\r\n            super.onPageInit(event);\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagebeforeshow\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         * @param data  {ShowEventData}     [in] 付加情報\r\n         */\r\n        onPageBeforeShow(event: JQuery.Event, data?: Framework.ShowEventData): void {\r\n            if (this._baseHeader) {\r\n                this._baseHeader.activate();\r\n            }\r\n            super.onPageBeforeShow(event, data);\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagebeforehide\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         * @param data  {HideEventData}     [in] 付加情報\r\n         */\r\n        onPageBeforeHide(event: JQuery.Event, data?: Framework.HideEventData): void {\r\n            if (this._baseHeader) {\r\n                this._baseHeader.inactivate();\r\n            }\r\n            super.onPageBeforeHide(event, data);\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pageremove\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         */\r\n        onPageRemove(event: JQuery.Event): void {\r\n            if (this._baseHeader) {\r\n                this._baseHeader.release();\r\n                this._baseHeader = null;\r\n            }\r\n            super.onPageRemove(event);\r\n        }\r\n\r\n        /**\r\n         * H/W Back Button ハンドラ\r\n         *\r\n         * @param  event {JQuery.Event} [in] event object\r\n         * @return {Boolean} true: 既定の処理を行わない / false: 既定の処理を行う\r\n         */\r\n        onHardwareBackButton(event?: JQuery.Event): boolean {\r\n            let retval = super.onHardwareBackButton(event);\r\n            if (!retval) {\r\n                retval = this.onCommand(event, this._options.backCommandKind);\r\n            }\r\n            return retval;\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Override: Custom Event\r\n\r\n        /**\r\n         * \"戻る\" event 発行時にコールされる\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         * @return {Boolean} true: 既定の処理を行わない / false: 既定の処理を行う\r\n         */\r\n        onCommand(event: JQuery.Event, kind: string): boolean {\r\n            if (this._options.backCommandKind === kind) {\r\n                if (this._owner && this._owner[this._options.backCommandHandler]) {\r\n                    return this._owner[this._options.backCommandHandler](event);\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n}\r\n","/* tslint:disable:max-line-length */\r\n\r\nnamespace CDP.UI {\r\n    import Promise      = CDP.Promise;\r\n    import Framework    = CDP.Framework;\r\n\r\n    const TAG = \"[CDP.UI.PageView] \";\r\n\r\n    /**\r\n     * PageView が発行するイベント定義\r\n     */\r\n    export const enum PAGEVIEW_EVENTS {\r\n        ORIENTATION_CHANGED = \"pageview:orientation-changed\",\r\n        INITIALZSE          = \"pageview:initialize\",\r\n        PAGE_BEFORE_CREATE  = \"pageview:before-create\",\r\n        PAGE_INIT           = \"pageview:page-init\",\r\n        PAGE_BEFORE_SHOW    = \"pageview:before-show\",\r\n        PAGE_SHOW           = \"pageview:show\",\r\n        PAGE_BEFORE_HIDE    = \"pageview:before-hide\",\r\n        PAGE_HIDE           = \"pageview:hide\",\r\n        PAGE_REMOVE         = \"pageview:remove\",\r\n    }\r\n\r\n    /**\r\n     * @interface PageViewConstructOptions\r\n     * @brief Router への登録情報と Backbone.View への初期化情報を格納するインターフェイスクラス\r\n     */\r\n    export interface PageViewConstructOptions<TModel extends Framework.Model = Framework.Model> extends BasePageOptions<TModel> {\r\n        basePage?: new (url: string, id: string, options?: Framework.PageConstructOptions) => Framework.Page;    //!< Page 機能を提供する基底インスタンス\r\n    }\r\n\r\n    /**\r\n     * @class PageView\r\n     * @brief CDP.Framework.Page と Backbone.View の両方の機能を提供するページの基底クラス\r\n     */\r\n    export class PageView<TModel extends Framework.Model = Framework.Model> extends Framework.View<TModel> implements Framework.IPage, IStatusManager {\r\n\r\n        protected _pageOptions: PageViewConstructOptions<TModel> = null;\r\n        protected _basePage: Framework.Page = null;\r\n        private _statusMgr: StatusManager = null;\r\n\r\n        /**\r\n         * constructor\r\n         *\r\n         * @param url     {String}                   [in] ページ URL\r\n         * @param id      {String}                   [in] ページ ID\r\n         * @param options {PageViewConstructOptions} [in] オプション\r\n         */\r\n        constructor(url: string, id: string, options?: PageViewConstructOptions<TModel>) {\r\n            super(options);\r\n\r\n            // PageView 設定\r\n            this._pageOptions = $.extend({}, { owner: this }, options);\r\n            this._basePage = this._pageOptions.basePage ? new this._pageOptions.basePage(url, id, this._pageOptions) : new BasePage(url, id, this._pageOptions);\r\n\r\n            // StatusManager\r\n            this._statusMgr = new StatusManager();\r\n            // Backbone.View 用の初期化\r\n            const delegates = (<any>this).events ? true : false;\r\n            this.setElement(this.$page, delegates);\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Implements: IStatusManager 状態管理\r\n\r\n        /**\r\n         * 状態変数の参照カウントのインクリメント\r\n         *\r\n         * @param status {String} [in] 状態識別子\r\n         */\r\n        statusAddRef(status: string): number {\r\n            return this._statusMgr.statusAddRef(status);\r\n        }\r\n\r\n        /**\r\n         * 状態変数の参照カウントのデクリメント\r\n         *\r\n         * @param status {String} [in] 状態識別子\r\n         */\r\n        statusRelease(status: string): number {\r\n            return this._statusMgr.statusRelease(status);\r\n        }\r\n\r\n        /**\r\n         * 処理スコープ毎に状態変数を設定\r\n         *\r\n         * @param status   {String}   [in] 状態識別子\r\n         * @param callback {Function} [in] 処理コールバック\r\n         */\r\n        statusScope(status: string, callback: () => void | Promise<any>): void {\r\n            this._statusMgr.statusScope(status, callback);\r\n        }\r\n\r\n        /**\r\n         * 指定した状態中であるか確認\r\n         *\r\n         * @param status {String}   [in] 状態識別子\r\n         * @return {Boolean} true: 状態内 / false: 状態外\r\n         */\r\n        isStatusIn(status: string): boolean {\r\n            return this._statusMgr.isStatusIn(status);\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // IPage stub stuff.\r\n\r\n        get active(): boolean                   { return this._basePage.active;                     }\r\n        get url(): string                       { return this._basePage.url;                        }\r\n        get id(): string                        { return this._basePage ? this._basePage.id : null; }\r\n        get $page(): JQuery                     { return this._basePage.$page;                      }\r\n        get $header(): JQuery                   { return this._basePage.$header;                    }\r\n        get $footer(): JQuery                   { return this._basePage.$footer;                    }\r\n        get intent(): Framework.Intent          { return this._basePage.intent;                     }\r\n        set intent(newIntent: Framework.Intent) { this._basePage.intent = newIntent;                }\r\n\r\n        /**\r\n         * Orientation の変更を受信\r\n         *\r\n         * @param newOrientation {Orientation} [in] new orientation code.\r\n         */\r\n        onOrientationChanged(newOrientation: Framework.Orientation): void {\r\n            this.trigger(PAGEVIEW_EVENTS.ORIENTATION_CHANGED, newOrientation);\r\n        }\r\n\r\n        /**\r\n         * H/W Back Button ハンドラ\r\n         *\r\n         * @param  event {JQuery.Event} [in] event object\r\n         * @return {Boolean} true: 既定の処理を行わない / false: 既定の処理を行う\r\n         */\r\n        onHardwareBackButton(event?: JQuery.Event): boolean {\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Router \"before route change\" ハンドラ\r\n         * ページ遷移直前に非同期処理を行うことが可能\r\n         *\r\n         * @return {IPromiseBase} Promise オブジェクト\r\n         */\r\n        onBeforeRouteChange(): IPromiseBase<any> {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        /**\r\n         * 汎用コマンドを受信\r\n         *\r\n         * @param  event {JQuery.Event} [in] event object\r\n         * @param  event {kind}              [in] command kind string\r\n         * @return {Boolean} true: 既定の処理を行わない / false: 既定の処理を行う\r\n         */\r\n        onCommand(event?: JQuery.Event, kind?: string): boolean {\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * 最初の OnPageInit() のときにのみコールされる\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         */\r\n        onInitialize(event: JQuery.Event): void {\r\n            this.trigger(PAGEVIEW_EVENTS.INITIALZSE, event);\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagebeforecreate\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         */\r\n        onPageBeforeCreate(event: JQuery.Event): void {\r\n            this.setElement(this.$page, true);\r\n            this.trigger(PAGEVIEW_EVENTS.PAGE_BEFORE_CREATE, event);\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagecreate\" (旧:\"pageinit\") に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         */\r\n        onPageInit(event: JQuery.Event): void {\r\n            this.trigger(PAGEVIEW_EVENTS.PAGE_INIT, event);\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagebeforeshow\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         * @param data  {ShowEventData}     [in] 付加情報\r\n         */\r\n        onPageBeforeShow(event: JQuery.Event, data?: Framework.ShowEventData): void {\r\n            this.trigger(PAGEVIEW_EVENTS.PAGE_BEFORE_SHOW, event, data);\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagecontainershow\" (旧:\"pageshow\") に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         * @param data  {ShowEventData}     [in] 付加情報\r\n         */\r\n        onPageShow(event: JQuery.Event, data?: Framework.ShowEventData): void {\r\n            this.trigger(PAGEVIEW_EVENTS.PAGE_SHOW, event, data);\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagebeforehide\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         * @param data  {HideEventData}     [in] 付加情報\r\n         */\r\n        onPageBeforeHide(event: JQuery.Event, data?: Framework.HideEventData): void {\r\n            this.trigger(PAGEVIEW_EVENTS.PAGE_BEFORE_HIDE, event, data);\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagecontainerhide\" (旧:\"pagehide\") に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         * @param data  {HideEventData}     [in] 付加情報\r\n         */\r\n        onPageHide(event: JQuery.Event, data?: Framework.HideEventData): void {\r\n            this.trigger(PAGEVIEW_EVENTS.PAGE_HIDE, event, data);\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pageremove\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         */\r\n        onPageRemove(event: JQuery.Event): void {\r\n            this.trigger(PAGEVIEW_EVENTS.PAGE_REMOVE, event);\r\n            this.remove();\r\n            this.el  = null;\r\n            this.$el = null;\r\n        }\r\n    }\r\n}\r\n","/* tslint:disable:max-line-length */\r\n\r\nnamespace CDP.UI {\r\n    import Framework = CDP.Framework;\r\n\r\n    const TAG = \"[CDP.UI.PageContainerView] \";\r\n\r\n    /**\r\n     * @interface PageContainerViewOptions\r\n     * @brief PageContainer のオプション\r\n     */\r\n    export interface PageContainerViewOptions<TModel extends Framework.Model = Framework.Model> extends Framework.ViewOptions<TModel> {\r\n        owner: PageView;\r\n        $el?: JQuery;\r\n    }\r\n\r\n    /**\r\n     * @class PageContainerView\r\n     * @brief PageView と連携可能な コンテナビュークラス\r\n     */\r\n    export class PageContainerView<TModel extends Framework.Model = Framework.Model> extends Framework.View<TModel> {\r\n\r\n        private _owner: PageView = null;\r\n\r\n        /**\r\n         * constructor\r\n         */\r\n        constructor(options: PageContainerViewOptions<TModel>) {\r\n            super(options);\r\n            this._owner = options.owner;\r\n            if (options.$el) {\r\n                const delegates = (<any>this).events ? true : false;\r\n                this.setElement(options.$el, delegates);\r\n            }\r\n            // set event listener\r\n            this.listenTo(this._owner, PAGEVIEW_EVENTS.ORIENTATION_CHANGED, this.onOrientationChanged.bind(this));\r\n            this.listenTo(this._owner, PAGEVIEW_EVENTS.INITIALZSE, this.onInitialize.bind(this));\r\n            this.listenTo(this._owner, PAGEVIEW_EVENTS.PAGE_BEFORE_CREATE, this.onPageBeforeCreate.bind(this));\r\n            this.listenTo(this._owner, PAGEVIEW_EVENTS.PAGE_INIT, this.onPageInit.bind(this));\r\n            this.listenTo(this._owner, PAGEVIEW_EVENTS.PAGE_BEFORE_SHOW, this.onPageBeforeShow.bind(this));\r\n            this.listenTo(this._owner, PAGEVIEW_EVENTS.PAGE_SHOW, this.onPageShow.bind(this));\r\n            this.listenTo(this._owner, PAGEVIEW_EVENTS.PAGE_BEFORE_HIDE, this.onPageBeforeHide.bind(this));\r\n            this.listenTo(this._owner, PAGEVIEW_EVENTS.PAGE_HIDE, this.onPageHide.bind(this));\r\n            this.listenTo(this._owner, PAGEVIEW_EVENTS.PAGE_REMOVE, this.onPageRemove.bind(this));\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // short cut methods\r\n\r\n        //! Owner 取得\r\n        get owner(): PageView {\r\n            return this._owner;\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Handle PageView events\r\n\r\n        /**\r\n         * Orientation の変更を受信\r\n         *\r\n         * @param newOrientation {Orientation} [in] new orientation code.\r\n         */\r\n        onOrientationChanged(newOrientation: Framework.Orientation): void {\r\n            // Override\r\n        }\r\n\r\n        /**\r\n         * 最初の OnPageInit() のときにのみコールされる\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         */\r\n        onInitialize(event: JQuery.Event): void {\r\n            // Override\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagebeforecreate\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         */\r\n        onPageBeforeCreate(event: JQuery.Event): void {\r\n            // Override\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagecreate\" (旧:\"pageinit\") に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         */\r\n        onPageInit(event: JQuery.Event): void {\r\n            // Override\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagebeforeshow\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         * @param data  {ShowEventData}     [in] 付加情報\r\n         */\r\n        onPageBeforeShow(event: JQuery.Event, data?: Framework.ShowEventData): void {\r\n            // Override\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagecontainershow\" (旧:\"pageshow\") に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         * @param data  {ShowEventData}     [in] 付加情報\r\n         */\r\n        onPageShow(event: JQuery.Event, data?: Framework.ShowEventData): void {\r\n            // Override\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagebeforehide\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         * @param data  {HideEventData}     [in] 付加情報\r\n         */\r\n        onPageBeforeHide(event: JQuery.Event, data?: Framework.HideEventData): void {\r\n            // Override\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagecontainerhide\" (旧:\"pagehide\") に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         * @param data  {HideEventData}     [in] 付加情報\r\n         */\r\n        onPageHide(event: JQuery.Event, data?: Framework.HideEventData): void {\r\n            // Override\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pageremove\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         */\r\n        onPageRemove(event: JQuery.Event): void {\r\n            this.stopListening();\r\n        }\r\n    }\r\n}\r\n","// for non flipsnap user.\r\ninterface IFlipsnap {\r\n    [x: string]: any;\r\n}\r\ninterface FlipsnapOptions {\r\n}\r\n\r\nnamespace CDP.UI {\r\n\r\n    import Model                        = Framework.Model;\r\n    import IOrientationChangedListener  = Framework.IOrientationChangedListener;\r\n    import Orientation                  = Framework.Orientation;\r\n\r\n    const TAG = \"[CDP.UI.TabHostView] \";\r\n\r\n    namespace _Config {\r\n        export const TABVIEW_CLASS = \"ui-tabview\";\r\n        export const TABVIEW_SELECTOR = \".\" + TABVIEW_CLASS;\r\n        export const TABHOST_CLASS = \"ui-tabhost\";\r\n        export const TABHOST_SELECTOR = \".\" + TABHOST_CLASS;\r\n        export const TABHOST_REFRESH_COEFF = 1.0;       // flipsnap 切り替え時に duration に対して更新を行う係数\r\n        export const TABHOST_REFRESH_INTERVAL = 200;    // flipsnap の更新に使用する間隔 [msec]\r\n    }\r\n\r\n    //___________________________________________________________________________________________________________________//\r\n\r\n    /**\r\n     * @interface ITabView\r\n     * @brief TabHostView にアタッチ可能な View インターフェイス\r\n     */\r\n    export interface ITabView extends IListView, IOrientationChangedListener {\r\n        host: TabHostView;      // host にアクセス\r\n        $el: JQuery;            // 管理 DOM にアクセス\r\n        needRebuild?: boolean;  // rebuild 状態にアクセス\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // public methods: Framework\r\n\r\n        /**\r\n         * 状態に応じたスクロール位置の保存/復元\r\n         * Browser の Native Scroll 時にコールされる\r\n         */\r\n        treatScrollPosition(): void;\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // public methods: Event\r\n\r\n        /**\r\n         * Scroller の初期化時にコールされる\r\n         */\r\n        onInitialize(host: TabHostView, $root: JQuery): void;\r\n\r\n        /**\r\n         * Scroller の破棄時にコールされる\r\n         */\r\n        onDestroy(): void;\r\n\r\n        /**\r\n         * visibility 属性が変更されたときにコールされる\r\n         * active ページとその両端のページが対象\r\n         *\r\n         * @param visible [in] true: 表示 / false: 非表示\r\n         */\r\n        onVisibilityChanged(visible: boolean): void;\r\n\r\n        /**\r\n         * ページが表示完了したときにコールされる\r\n         */\r\n        onTabSelected(): void;\r\n\r\n        /**\r\n         * ページが非表示に切り替わったときにコールされる\r\n         */\r\n        onTabReleased(): void;\r\n\r\n        /**\r\n         * ドラッグ中にコールされる\r\n         *\r\n         * @param position [in] 現在の tab index\r\n         * @param offset   [in] 移動量\r\n         */\r\n        onTabScrolling(position: number, offset: number): void;\r\n    }\r\n\r\n    /**\r\n     * @interface TabViewContextOptions\r\n     * @brief TabViewContext に指定するオプション\r\n     */\r\n    export interface TabViewContextOptions<TModel extends Model = Model> extends ListViewConstructOptions<TModel> {\r\n        delayRegister?: boolean;    // 遅延登録を行う場合は true\r\n    }\r\n\r\n    /**\r\n     * @interface TabViewConstructionOptions\r\n     * @brief TabView のオプション\r\n     */\r\n    export interface TabViewConstructionOptions<TModel extends Model = Model> extends TabViewContextOptions<TModel> {\r\n        host: TabHostView;  // host を指定\r\n    }\r\n\r\n    //___________________________________________________________________________________________________________________//\r\n\r\n    /**\r\n     * @interface TabViewContext\r\n     * @brief ITabView を初期化するための情報を格納\r\n     */\r\n    export interface TabViewContext<TModel extends Model = Model> {\r\n        ctor?: new (options?: TabViewConstructionOptions<TModel>) => ITabView;  // ITabView のコンストラクタ\r\n        options?: TabViewContextOptions<TModel>;                                // 構築時の基底オプション\r\n    }\r\n\r\n    //___________________________________________________________________________________________________________________//\r\n\r\n    /**\r\n     * @interface TabHostViewConstructOptions\r\n     * @brief TabHostView の初期化情報を格納するインターフェイスクラス\r\n     */\r\n    export interface TabHostViewConstructOptions<TModel extends Model = Model> extends PageContainerViewOptions<TModel>, FlipsnapOptions {\r\n        inactiveVisibleTabDistance?: number;    // 非選択時の visible タブ数 ex) 1: 両サイド\r\n        tabContexts?: TabViewContext[];         // TabViewContext の配列\r\n        enableBounce?: boolean;                 // 終端で bounce する場合には true\r\n        initialWidth?: number;                  // width の初期値\r\n        initialHeight?: number;                 // height の初期値\r\n        initImmediate?: boolean;                // コンストラクタで TabView を初期化する場合 true\r\n    }\r\n\r\n    //___________________________________________________________________________________________________________________//\r\n\r\n    /**\r\n     * @class TabHostView\r\n     * @brief タブ切り替え機能を持つ View クラス\r\n     */\r\n    export class TabHostView<TModel extends Model = Model> extends PageContainerView<TModel> implements IOrientationChangedListener {\r\n\r\n        private _tabs: ITabView[] = [];                                         // ITabView を格納\r\n\r\n        private _activeTabIndex: number = 0;                                    // active tab\r\n        private _flipsnap: IFlipsnap = null;                                    // flipsnap オブジェクト\r\n        private _flipEndEventHandler: (event: JQuery.Event) => void = null;     // \"fstouchend\"\r\n        private _flipMoveEventHandler: (event: JQuery.Event) => void = null;    // \"fstouchmove\"\r\n        private _flipDeltaCache: number = 0;                                    // \"flip 距離のキャッシュ\"\r\n        private _scrollEndEventHandler: (event: JQuery.Event) => void = null;   // tabview \"scrollstop\"\r\n        private _scrollMoveEventHandler: (event: JQuery.Event) => void = null;  // tabview \"scroll\"\r\n        private _refreshTimerId: number = null;                                 // refresh() 反映確認用\r\n        private _$contentsHolder: JQuery = null;                                // contents holder\r\n        private _settings: TabHostViewConstructOptions<TModel>;                 // TabHostView 設定値\r\n\r\n        public static EVENT_SCROLL_MOVE = \"tabhost:scrollmove\";\r\n        public static EVENT_SCROLL_STOP = \"tabhost:scrollstop\";\r\n        public static EVENT_TAB_MOVE    = \"tabhost:tabmove\";\r\n        public static EVENT_TAB_STOP    = \"tabhost:tavstop\";\r\n\r\n        /**\r\n         * constructor\r\n         *\r\n         * @param options [in] オプション\r\n         */\r\n        constructor(options: TabHostViewConstructOptions<TModel>) {\r\n            super(options);\r\n\r\n            // check runtime condition\r\n            if (null == global.Flipsnap) {\r\n                console.error(TAG + \"flipsnap module doesn't load.\");\r\n                return;\r\n            }\r\n\r\n            this._settings = $.extend({\r\n                tabContexts: [],\r\n                tabMoveHandler: (delta: number): void => { /* noop */ },\r\n                tabStopHandler: (newIndex: number, moved: boolean): void => { /* noop */ }\r\n            }, options);\r\n\r\n            // setup event handlers\r\n            this._flipEndEventHandler = (event: JQuery.Event) => {\r\n                const fsEvent: any = event.originalEvent;\r\n                this._flipDeltaCache = 0;\r\n                this.onTabChanged(fsEvent.newPoint, fsEvent.moved);\r\n            };\r\n\r\n            this._flipMoveEventHandler = (event: JQuery.Event) => {\r\n                const fsEvent: any = event.originalEvent;\r\n                this._flipDeltaCache += fsEvent.delta;\r\n\r\n                // bounce のガード\r\n                if (!this._settings.enableBounce && (\r\n                    (-1 === fsEvent.direction && 0 === this._activeTabIndex && 0 < this._flipDeltaCache) ||\r\n                    (1 === fsEvent.direction && this._activeTabIndex === this._tabs.length - 1 && this._flipDeltaCache < 0)\r\n                )) {\r\n                    event.preventDefault();\r\n                    this._flipsnap.moveToPoint(fsEvent.newPoint);\r\n                } else {\r\n                    this.onTabMoving(fsEvent.delta);\r\n                    this._tabs.forEach((tabview: ITabView) => {\r\n                        tabview.onTabScrolling(this._activeTabIndex, fsEvent.delta);\r\n                    });\r\n                    this.preprocess(this._activeTabIndex);\r\n                }\r\n            };\r\n\r\n            this._scrollEndEventHandler = (event: JQuery.Event) => {\r\n                this.onScrollStop();\r\n            };\r\n\r\n            this._scrollMoveEventHandler = (event: JQuery.Event) => {\r\n                this.onScroll();\r\n            };\r\n\r\n            // setup tabs\r\n            if (this._settings.initialWidth) {\r\n                this.$el.width(this._settings.initialWidth);\r\n            }\r\n            if (this._settings.initialHeight) {\r\n                this.$el.height(this._settings.initialHeight);\r\n\r\n            }\r\n            const initialWidth  = this._settings.initialWidth;\r\n            const initialHeight = this.$el.height();\r\n\r\n            const tabContexts = this._settings.tabContexts.slice();\r\n            if (0 < tabContexts.length) {\r\n                tabContexts.forEach((context) => {\r\n                    /* tslint:disable:no-unused-expression */\r\n                    new context.ctor($.extend({\r\n                        initialHeight: initialHeight,\r\n                    }, context.options, { host: this, delayRegister: false }));\r\n                    /* tslint:enable:no-unused-expression */\r\n                });\r\n            } else {\r\n                // ITabView インスタンス化要求\r\n                this.onTabViewSetupRequest(initialHeight);\r\n            }\r\n\r\n            if (this._settings.initImmediate) {\r\n                this.initializeTabViews();\r\n            }\r\n\r\n            this._$contentsHolder = this.$el.find(_Config.TABHOST_SELECTOR).parent();\r\n\r\n            // Flipsnap\r\n            this.setFlipsnapCondition($.extend({}, {\r\n                distance: initialWidth,\r\n            }, this._settings));\r\n            this.setActiveTab(this._activeTabIndex, 0, true);\r\n        }\r\n\r\n        /**\r\n         * 配下の TabView を初期化\r\n         */\r\n        public initializeTabViews(): void {\r\n            // ITabView に $tabHost をアサインする\r\n            // NOTE: 現在は DOM の順序は固定\r\n            const $tabs = this.$el.find(_Config.TABVIEW_SELECTOR);\r\n            this._tabs.forEach((tabview: ITabView, index) => {\r\n                tabview.onInitialize(this, $($tabs[index]));\r\n            });\r\n        }\r\n\r\n        /**\r\n         * 破棄のヘルパー関数\r\n         * メンバーの破棄のタイミングを変える場合、本メソッドをコールする\r\n         */\r\n        public destroy(): void {\r\n            this.resetFlipsnapCondition();\r\n            this._tabs.forEach((tabview: ITabView) => {\r\n                tabview.onDestroy();\r\n            });\r\n            this._tabs = [];\r\n            this._$contentsHolder = null;\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Framework methods:\r\n\r\n        // ページの基準値を取得\r\n        public getBaseHeight(): number {\r\n            return this.$el.height();\r\n        }\r\n\r\n        /**\r\n         * TabView を登録\r\n         * Framework が使用\r\n         *\r\n         * @param tabview [in] ITabView のインスタンス\r\n         */\r\n        public registerTabView(tabview: ITabView): void {\r\n            if (null == this.getTabIndexOf(tabview)) {\r\n                this._tabs.push(tabview);\r\n            } else {\r\n                console.warn(TAG + \"tab instance already registered.\");\r\n            }\r\n        }\r\n\r\n        /**\r\n         * TabView の Tab index を取得\r\n         * Framework が使用\r\n         *\r\n         * @param tabview [in] ITabView のインスタンス\r\n         * @return 指定インスタンスのインデックス\r\n         */\r\n        public getTabIndexOf(tabview: ITabView): number {\r\n            for (let i = 0, n = this._tabs.length; i < n; i++) {\r\n                if (tabview === this._tabs[i]) {\r\n                    return i;\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n\r\n        // タブポジションの初期化\r\n        protected resetTabPosition(): void {\r\n            this._tabs.forEach((tabview: ITabView) => {\r\n                tabview.scrollTo(0, false, 0);\r\n                tabview.refresh();\r\n            });\r\n            this.setActiveTab(0, 0, true);\r\n        }\r\n\r\n        // ITabView 設定リクエスト時にコールされる\r\n        protected onTabViewSetupRequest(initialHeight: number): void {\r\n            // override\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Tab control methods:\r\n\r\n        // アクティブ Tab を設定\r\n        public setActiveTab(index: number, transitionDuration?: number, initial?: boolean): boolean {\r\n            if (this.validTab(index) && (initial || (this._activeTabIndex !== index))) {\r\n                // 遷移前に scroll 位置の view を更新\r\n                this.preprocess(index);\r\n\r\n                const lastActiveTabIndex = this._activeTabIndex;\r\n                this._activeTabIndex = index;\r\n                this._flipsnap.moveToPoint(this._activeTabIndex, transitionDuration);\r\n\r\n                {// 遷移後に listview の状態を変更\r\n                    const changeTab = () => {\r\n                        this.postprocess(lastActiveTabIndex);\r\n                        this.onTabChanged(this._activeTabIndex, false);\r\n                    };\r\n\r\n                    transitionDuration = transitionDuration || parseInt(this._flipsnap.transitionDuration, 10);\r\n                    if (0 === transitionDuration) {\r\n                        changeTab();\r\n                    } else {\r\n                        setTimeout(() => {\r\n                            changeTab();\r\n                        }, transitionDuration * _Config.TABHOST_REFRESH_COEFF);\r\n                    }\r\n                }\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * タブの数を取得\r\n         *\r\n         * @return {Number} タブ数\r\n         */\r\n        public getTabCount(): number {\r\n            return this._tabs.length;\r\n        }\r\n\r\n        // アクティブなタブ Index を取得\r\n        public getActiveTabIndex(): number {\r\n            return this._activeTabIndex;\r\n        }\r\n\r\n        // swipe 移動量を取得 (swipe 中に delta の加算値を返却)\r\n        public getSwipeDelta(): number {\r\n            return this._flipDeltaCache;\r\n        }\r\n\r\n        // タブ移動イベント\r\n        protected onTabMoving(delta: number): void {\r\n            this.trigger(TabHostView.EVENT_TAB_MOVE, delta);\r\n        }\r\n\r\n        // タブ変更完了イベント\r\n        protected onTabChanged(newIndex: number, moved: boolean): void {\r\n            if (moved) {\r\n                this.setActiveTab(newIndex);\r\n            }\r\n            this.trigger(TabHostView.EVENT_TAB_STOP, newIndex, moved);\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Scroll control methods:\r\n\r\n        // スクロール位置を取得\r\n        getScrollPos(): number {\r\n            if (this._activeTabView) {\r\n                return this._activeTabView.getScrollPos();\r\n            } else {\r\n                return 0;\r\n            }\r\n        }\r\n\r\n        // スクロール位置の最大値を取得\r\n        getScrollPosMax(): number {\r\n            if (this._activeTabView) {\r\n                return this._activeTabView.getScrollPosMax();\r\n            } else {\r\n                return 0;\r\n            }\r\n        }\r\n\r\n        // スクロール位置を指定\r\n        scrollTo(pos: number, animate?: boolean, time?: number): void {\r\n            if (this._activeTabView) {\r\n                this._activeTabView.scrollTo(pos, animate, time);\r\n            }\r\n        }\r\n\r\n        // スクロールイベント\r\n        protected onScroll(): void {\r\n            this.trigger(TabHostView.EVENT_SCROLL_MOVE);\r\n        }\r\n\r\n        // スクロール完了イベント\r\n        protected onScrollStop(): void {\r\n            this.trigger(TabHostView.EVENT_SCROLL_STOP);\r\n        }\r\n\r\n        // スクロールイベントハンドラ設定/解除\r\n        setScrollHandler(handler: (event: JQuery.Event) => void, on: boolean): void {\r\n            if (this._activeTabView) {\r\n                this._activeTabView.setScrollHandler(handler, on);\r\n            }\r\n        }\r\n\r\n        // スクロール終了イベントハンドラ設定/解除\r\n        setScrollStopHandler(handler: (event: JQuery.Event) => void, on: boolean): void {\r\n            if (this._activeTabView) {\r\n                this._activeTabView.setScrollStopHandler(handler, on);\r\n            }\r\n        }\r\n\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Host event hooks:\r\n\r\n        // Orientation の変更検知\r\n        onOrientationChanged(newOrientation: Orientation): void {\r\n            super.onOrientationChanged(newOrientation);\r\n\r\n            this._tabs.forEach((tabview: ITabView) => {\r\n                tabview.onOrientationChanged(newOrientation);\r\n            });\r\n\r\n            if (null != this._refreshTimerId) {\r\n                clearTimeout(this._refreshTimerId);\r\n            }\r\n\r\n            if (this._flipsnap && 0 < this._tabs.length) {\r\n                const proc = () => {\r\n                    // リトライ\r\n                    if (this._flipsnap && this._flipsnap._maxPoint !== (this._tabs.length - 1)) {\r\n                        this._flipsnap.refresh();\r\n                        this._refreshTimerId = setTimeout(proc, _Config.TABHOST_REFRESH_INTERVAL);\r\n                    } else {\r\n                        this._refreshTimerId = null;\r\n                    }\r\n                };\r\n                this._flipsnap.refresh();\r\n                this._refreshTimerId = setTimeout(proc, _Config.TABHOST_REFRESH_INTERVAL);\r\n            }\r\n        }\r\n\r\n        // jQM event: \"pagecontainershow\" (旧:\"pageshow\") に対応\r\n        onPageShow(event: JQuery.Event, data?: Framework.ShowEventData): void {\r\n            super.onPageShow(event, data);\r\n            this.rebuild();\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Implements: ScrollManager Profile 管理\r\n\r\n        // ページアサインを再構成\r\n        rebuild(): void {\r\n            this._tabs.forEach((tabview: ITabView) => {\r\n                if (tabview.needRebuild) {\r\n                    tabview.rebuild();\r\n                    tabview.needRebuild = false;\r\n                }\r\n            });\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // private methods:\r\n\r\n        // flipsnap 環境設定\r\n        private setFlipsnapCondition(options: FlipsnapOptions): void {\r\n            this._flipsnap = global.Flipsnap(_Config.TABHOST_SELECTOR, options);\r\n            $(this._flipsnap.element).on(\"fstouchend\", this._flipEndEventHandler.bind(this));\r\n            $(this._flipsnap.element).on(\"fstouchmove\", this._flipMoveEventHandler.bind(this));\r\n        }\r\n\r\n        // flipsnap 環境破棄\r\n        private resetFlipsnapCondition(): void {\r\n            if (this._flipsnap) {\r\n                $(this._flipsnap.element).off(\"fstouchmove\", this._flipMoveEventHandler.bind(this));\r\n                $(this._flipsnap.element).off(\"fstouchend\", this._flipEndEventHandler.bind(this));\r\n                this._flipsnap.destroy();\r\n                this._flipsnap = null;\r\n            }\r\n            this._flipDeltaCache = 0;\r\n        }\r\n\r\n        // Tab 切り替えの前処理\r\n        private preprocess(toIndex: number): void {\r\n            this._tabs.forEach((tabview: ITabView, index) => {\r\n                if (index !== this._activeTabIndex) {\r\n                    tabview.treatScrollPosition();\r\n                }\r\n                // 移動範囲を可視化 NOTE: loop 対応時に条件見直し\r\n                if ((this._activeTabIndex < toIndex && (this._activeTabIndex < index && index <= toIndex)) ||\r\n                    (toIndex < this._activeTabIndex && (toIndex <= index && index < this._activeTabIndex))\r\n                ) {\r\n                    tabview.$el.css(\"visibility\", \"visible\");\r\n                }\r\n            });\r\n        }\r\n\r\n        // Tab 切り替えの後処理\r\n        private postprocess(lastActiveTabIndex: number): void {\r\n            this._tabs.forEach((tabview: ITabView, index) => {\r\n                if (null != this._settings.inactiveVisibleTabDistance) {\r\n                    // NOTE: loop 対応時に条件対応\r\n                    const distance = this._settings.inactiveVisibleTabDistance;\r\n                    if (this._activeTabIndex - distance <= index && index <= this._activeTabIndex + distance) {\r\n                        tabview.$el.css(\"visibility\", \"visible\");\r\n                        tabview.onVisibilityChanged(true);\r\n                    } else {\r\n                        tabview.$el.css(\"visibility\", \"hidden\");\r\n                        tabview.onVisibilityChanged(false);\r\n                    }\r\n                }\r\n                if (index === this._activeTabIndex) {\r\n                    tabview.onTabSelected();\r\n                    tabview.setScrollHandler(this._scrollMoveEventHandler, true);\r\n                    tabview.setScrollStopHandler(this._scrollEndEventHandler, true);\r\n                } else if (index === lastActiveTabIndex) {\r\n                    tabview.setScrollHandler(this._scrollMoveEventHandler, false);\r\n                    tabview.setScrollStopHandler(this._scrollEndEventHandler, false);\r\n                    tabview.onTabReleased();\r\n                }\r\n            });\r\n        }\r\n\r\n        // Tab Index を検証\r\n        private validTab(index: number): boolean {\r\n            if (0 === this._tabs.length) {\r\n                return false;\r\n            } else if (0 <= index && index < this._tabs.length) {\r\n                return true;\r\n            } else {\r\n                console.error(TAG + \"invalid tab index. index: \" + index);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // アクティブなタブ ScrollManager を取得\r\n        private get _activeTabView(): ITabView {\r\n            return this._tabs[this._activeTabIndex];\r\n        }\r\n    }\r\n}\r\n","namespace CDP.UI {\r\n\r\n    import Model = CDP.Framework.Model;\r\n\r\n    const TAG = \"[CDP.UI.TabView] \";\r\n    const SUPPRESS_WARNING_INITIAL_HEIGHT = 1;\r\n\r\n    /**\r\n     * @class TabView\r\n     * @brief TabHostView にアタッチ可能な View クラス\r\n     */\r\n    export class TabView<TModel extends Model = Model> extends ListView<TModel> implements ITabView {\r\n\r\n        private _host: TabHostView = null;\r\n        private _needRebuild: boolean = false;  // ページ表示時に rebuild() をコールするための内部変数\r\n        private _tabIndex: number;              // 自身の Tab Index\r\n\r\n        /**\r\n         * constructor\r\n         *\r\n         */\r\n        constructor(options: TabViewConstructionOptions<TModel>) {\r\n            super($.extend({}, { initialHeight: SUPPRESS_WARNING_INITIAL_HEIGHT }, options));\r\n            this._host = options.host;\r\n            if (!options.delayRegister) {\r\n                this._host.registerTabView(this);\r\n            }\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Implements: IViewPager properties.\r\n\r\n        // BaseTabPageView にアクセス\r\n        public get host(): TabHostView {\r\n            return this._host;\r\n        }\r\n\r\n        // rebuild 状態へアクセス\r\n        public get needRebuild(): boolean {\r\n            return this._needRebuild;\r\n        }\r\n\r\n        // rebuild 状態を設定\r\n        public set needRebuild(rebuild: boolean) {\r\n            this._needRebuild = rebuild;\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Implements: IViewPager Framework.\r\n\r\n        // 状態に応じたスクロール位置の保存/復元\r\n        treatScrollPosition(): void {\r\n            this.core.treatScrollPosition();\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Implements: ITabView Events.\r\n\r\n        // Scroller の初期化時にコールされる\r\n        onInitialize(host: TabHostView, $root: JQuery): void {\r\n            this._host = host;\r\n            this.core.initialize($root, host.getBaseHeight());\r\n            Backbone.View.prototype.setElement.call(this, $root, true);\r\n        }\r\n\r\n        // Scroller の破棄時にコールされる\r\n        onDestroy(): void {\r\n            this.remove();\r\n            this._host = null;\r\n        }\r\n\r\n        // visibility 属性が変更されたときにコールされる\r\n        onVisibilityChanged(visible: boolean): void {\r\n            // override\r\n        }\r\n\r\n        // ページが表示完了したときにコールされる\r\n        onTabSelected(): void {\r\n            this.core.setActiveState(true);\r\n        }\r\n\r\n        // ページが非表示に切り替わったときにコールされる\r\n        onTabReleased(): void {\r\n            this.core.setActiveState(false);\r\n        }\r\n\r\n        // ドラッグ中にコールされる\r\n        onTabScrolling(position: number, offset: number): void {\r\n            // override\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Implements: IOrientationChangedListener events.\r\n\r\n        // Orientation の変更を受信\r\n        onOrientationChanged(newOrientation: Framework.Orientation): void {\r\n            // override\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Override: IListView\r\n\r\n        // core framework access\r\n        get core(): ScrollManager {\r\n            return (<any>this)._scrollMgr;\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // protected methods\r\n\r\n        // 自身の Tab Index を取得\r\n        protected get tabIndex(): number {\r\n            if (null == this._tabIndex) {\r\n                this._tabIndex = this._host.getTabIndexOf(this);\r\n            }\r\n            return this._tabIndex;\r\n        }\r\n\r\n        // 自身が active か判定\r\n        protected isActive(): boolean {\r\n            return this.tabIndex === this._host.getActiveTabIndex();\r\n        }\r\n    }\r\n}\r\n","/* tslint:disable:max-line-length */\r\n\r\nnamespace CDP.UI {\r\n\r\n    import Model = CDP.Framework.Model;\r\n\r\n    const TAG = \"[CDP.UI.PageListView] \";\r\n\r\n    /**\r\n     * @interface PageListViewConstructOptions\r\n     * @brief PageListView への初期化情報を格納するインターフェイスクラス\r\n     */\r\n    export interface PageListViewConstructOptions<TModel extends Model = Model> extends ListViewOptions, PageViewConstructOptions<TModel> {\r\n        autoDestoryElement?: boolean;        //!< ページ遷移前に List Element を破棄する場合は true を指定\r\n    }\r\n\r\n    /**\r\n     * @class PageListView\r\n     * @brief 仮想リストビュー機能を持つ PageView クラス\r\n     */\r\n    export class PageListView<TModel extends Model = Model> extends PageView<TModel> implements IListView {\r\n\r\n        private _scrollMgr: ScrollManager = null;    //!< scroll コアロジック\r\n        private _needRebuild: boolean = false;       //!< ページ表示時に rebuild() をコールするための内部変数\r\n\r\n        /**\r\n         * constructor\r\n         *\r\n         * @param url     {String}                       [in] page template に使用する URL\r\n         * @param id      {String}                       [in] page に振られた ID\r\n         * @param options {PageListViewConstructOptions} [in] オプション\r\n         */\r\n        constructor(url: string, id: string, options?: PageListViewConstructOptions<TModel>) {\r\n            super(url, id, $.extend({}, {\r\n                autoDestoryElement: false,\r\n            }, options));\r\n            this._scrollMgr = new ScrollManager(options);\r\n        }\r\n\r\n        //! rebuild() のスケジューリング\r\n        public reserveRebuild(): void {\r\n            this._needRebuild = true;\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Override: PageView\r\n\r\n        //! Orientation の変更検知\r\n        onOrientationChanged(newOrientation: Framework.Orientation): void {\r\n            this._scrollMgr.setBaseHeight(this.getPageBaseHeight());\r\n        }\r\n\r\n        //! ページ遷移直前イベント処理\r\n        onBeforeRouteChange(): IPromiseBase<any> {\r\n            if ((<PageListViewConstructOptions<TModel>>this._pageOptions).autoDestoryElement) {\r\n                this._scrollMgr.destroy();\r\n            }\r\n            return super.onBeforeRouteChange();\r\n        }\r\n\r\n        //! jQM event: \"pagebeforeshow\" に対応\r\n        onPageBeforeShow(event: JQuery.Event, data?: Framework.ShowEventData): void {\r\n            super.onPageBeforeShow(event, data);\r\n            this._scrollMgr.initialize(this.$page, this.getPageBaseHeight());\r\n        }\r\n\r\n        //! jQM event: \"pagecontainershow\" (旧:\"pageshow\") に対応\r\n        onPageShow(event: JQuery.Event, data?: Framework.ShowEventData): void {\r\n            super.onPageShow(event, data);\r\n            this._scrollMgr.setBaseHeight(this.getPageBaseHeight());\r\n            if (this._needRebuild) {\r\n                this.rebuild();\r\n                this._needRebuild = false;\r\n            }\r\n        }\r\n\r\n        //! jQM event: \"pageremove\" に対応\r\n        onPageRemove(event: JQuery.Event): void {\r\n            super.onPageRemove(event);\r\n            this.release();\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Implements: IListView Profile 管理\r\n\r\n        //! 初期化済みか判定\r\n        isInitialized(): boolean {\r\n            return this._scrollMgr.isInitialized();\r\n        }\r\n\r\n        //! プロパティを指定して、ListItem を管理\r\n        addItem(\r\n            height: number,\r\n            initializer: new (options?: any) => BaseListItemView,\r\n            info: any,\r\n            insertTo?: number\r\n            ): void {\r\n            this._addLine(new LineProfile(this._scrollMgr, Math.floor(height), initializer, info), insertTo);\r\n        }\r\n\r\n        //! 指定した Item を削除\r\n        removeItem(index: number, size?: number, delay?: number): void;\r\n        removeItem(index: number[], delay?: number): void;\r\n        removeItem(index: any, arg2?: number, arg3?: number): void {\r\n            this._scrollMgr.removeItem(index, arg2, arg3);\r\n        }\r\n\r\n        //! 指定した Item に設定した情報を取得\r\n        getItemInfo(target: number): any;\r\n        getItemInfo(target: JQuery.Event): any;\r\n        getItemInfo(target: any): any {\r\n            return this._scrollMgr.getItemInfo(target);\r\n        }\r\n\r\n        //! アクティブページを更新\r\n        refresh(): void {\r\n            this._scrollMgr.refresh();\r\n        }\r\n\r\n        //! 未アサインページを構築\r\n        update(): void {\r\n            this._scrollMgr.update();\r\n        }\r\n\r\n        //! ページアサインを再構成\r\n        rebuild(): void {\r\n            this._scrollMgr.rebuild();\r\n        }\r\n\r\n        //! 管轄データを破棄\r\n        release(): void {\r\n            this._scrollMgr.release();\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Implements: IListView Profile Backup / Restore\r\n\r\n        //! 内部データをバックアップ\r\n        backup(key: string): boolean {\r\n            return this._scrollMgr.backup(key);\r\n        }\r\n\r\n        //! 内部データをリストア\r\n        restore(key: string, rebuild: boolean = true): boolean {\r\n            const retval = this._scrollMgr.restore(key, rebuild);\r\n            if (retval && !rebuild) {\r\n                this.reserveRebuild();\r\n            }\r\n            return retval;\r\n        }\r\n\r\n        //! バックアップデータの有無\r\n        hasBackup(key: string): boolean {\r\n            return this._scrollMgr.hasBackup(key);\r\n        }\r\n\r\n        //! バックアップデータの破棄\r\n        clearBackup(key?: string): boolean {\r\n            return this._scrollMgr.clearBackup(key);\r\n        }\r\n\r\n        //! バックアップデータにアクセス\r\n        get backupData(): any {\r\n            return this._scrollMgr.backupData;\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Implements: IListView Scroll\r\n\r\n        //! スクロールイベントハンドラ設定/解除\r\n        setScrollHandler(handler: (event: JQuery.Event) => void, on: boolean): void {\r\n            this._scrollMgr.setScrollHandler(handler, on);\r\n        }\r\n\r\n        //! スクロール終了イベントハンドラ設定/解除\r\n        setScrollStopHandler(handler: (event: JQuery.Event) => void, on: boolean): void {\r\n            this._scrollMgr.setScrollStopHandler(handler, on);\r\n        }\r\n\r\n        //! スクロール位置を取得\r\n        getScrollPos(): number {\r\n            return this._scrollMgr.getScrollPos();\r\n        }\r\n\r\n        //! スクロール位置の最大値を取得\r\n        getScrollPosMax(): number {\r\n            return this._scrollMgr.getScrollPosMax();\r\n        }\r\n\r\n        //! スクロール位置を指定\r\n        scrollTo(pos: number, animate?: boolean, time?: number): void {\r\n            this._scrollMgr.scrollTo(pos, animate, time);\r\n        }\r\n\r\n        //! 指定された ListItemView の表示を保証\r\n        ensureVisible(index: number, options?: EnsureVisibleOptions): void {\r\n            this._scrollMgr.ensureVisible(index, options);\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Implements: IListView Properties\r\n\r\n        //! core framework access\r\n        get core(): IListViewFramework {\r\n            return this._scrollMgr;\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Implements: IListView Internal I/F\r\n\r\n        //! 登録 framework が使用する\r\n        _addLine(_line: any, insertTo?: number): void {\r\n            this._scrollMgr._addLine(_line, insertTo);\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // private method:\r\n\r\n        //! ページの基準値を取得\r\n        private getPageBaseHeight(): number {\r\n            return $(window).height() - parseInt(this.$page.css(\"padding-top\"), 10);\r\n        }\r\n    }\r\n}\r\n","namespace CDP.UI {\r\n\r\n    import Model = CDP.Framework.Model;\r\n\r\n    const TAG = \"[CDP.UI.PageExpandableListView] \";\r\n\r\n    /**\r\n     * @class PageExpandableListView\r\n     * @brief 開閉リストビュー機能を持つ PageView クラス\r\n     */\r\n    export class PageExpandableListView<TModel extends Model = Model> extends PageListView<TModel> implements IExpandableListView {\r\n\r\n        private _expandManager: ExpandManager = null;\r\n\r\n        /**\r\n         * constructor\r\n         *\r\n         * @param url     {String}                       [in] page template に使用する URL\r\n         * @param id      {String}                       [in] page に振られた ID\r\n         * @param options {PageListViewConstructOptions} [in] オプション\r\n         */\r\n        constructor(url: string, id: string, options?: PageListViewConstructOptions<TModel>) {\r\n            super(url, id, options);\r\n            this._expandManager = new ExpandManager(this);\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Implements: IExpandableListView\r\n\r\n        //! 新規 GroupProfile を作成\r\n        newGroup(id?: string): GroupProfile {\r\n            return this._expandManager.newGroup(id);\r\n        }\r\n\r\n        //! 登録済み Group を取得\r\n        getGroup(id: string): GroupProfile {\r\n            return this._expandManager.getGroup(id);\r\n        }\r\n\r\n        //! 第1階層の Group 登録\r\n        registerTopGroup(topGroup: GroupProfile): void {\r\n            this._expandManager.registerTopGroup(topGroup);\r\n        }\r\n\r\n        //! 第1階層の Group を取得\r\n        getTopGroups(): GroupProfile[] {\r\n            return this._expandManager.getTopGroups();\r\n        }\r\n\r\n        //! すべてのグループを展開 (1階層)\r\n        expandAll(): void {\r\n            this._expandManager.expandAll();\r\n        }\r\n\r\n        //! すべてのグループを収束 (1階層)\r\n        collapseAll(delay?: number): void {\r\n            this._expandManager.collapseAll(delay);\r\n        }\r\n\r\n        //! 展開中か判定\r\n        isExpanding(): boolean {\r\n            return this._expandManager.isExpanding();\r\n        }\r\n\r\n        //! 収束中か判定\r\n        isCollapsing(): boolean {\r\n            return this._expandManager.isCollapsing();\r\n        }\r\n\r\n        //! 開閉中か判定\r\n        isSwitching(): boolean {\r\n            return this._expandManager.isSwitching();\r\n        }\r\n\r\n        //! layout key を取得\r\n        get layoutKey(): string {\r\n            return this._expandManager.layoutKey;\r\n        }\r\n\r\n        //! layout key を設定\r\n        set layoutKey(key: string) {\r\n            this._expandManager.layoutKey = key;\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Override: PageListView\r\n\r\n        //! データを破棄\r\n        release(): void {\r\n            super.release();\r\n            this._expandManager.release();\r\n        }\r\n\r\n        //! 内部データをバックアップ\r\n        backup(key: string): boolean {\r\n            return this._expandManager.backup(key);\r\n        }\r\n\r\n        //! 内部データをリストア\r\n        restore(key: string, rebuild: boolean = true): boolean {\r\n            return this._expandManager.restore(key, rebuild);\r\n        }\r\n    }\r\n}\r\n","/**\r\n * jQuery plugin definition\r\n */\r\ninterface JQuery {\r\n    ripple(options?: CDP.UI.DomExtensionOptions): JQuery;\r\n}\r\n\r\nnamespace CDP.UI.Extension {\r\n\r\n    import Framework = CDP.Framework;\r\n\r\n    // jQuery plugin\r\n    $.fn.ripple = function (options?: DomExtensionOptions): JQuery {\r\n        const $el = $(this);\r\n        if ($el.length <= 0) {\r\n            return $el;\r\n        }\r\n        return $el.on(Framework.Patch.s_vclickEvent, function (event: JQuery.Event) {\r\n            const surface = $(this);\r\n\r\n            // create surface if it doesn't exist\r\n            if (surface.find(\".ui-ripple-ink\").length === 0) {\r\n                surface.prepend(\"<div class='ui-ripple-ink'></div>\");\r\n            }\r\n\r\n            let ink = surface.find(\".ui-ripple-ink\");\r\n\r\n            // stop the previous animation\r\n            ink.removeClass(\"ui-ripple-animate\");\r\n\r\n            // ink size:\r\n            if (!ink.height() && !ink.width()) {\r\n                const d = Math.max(surface.outerWidth(), surface.outerHeight());\r\n                ink.css({ height: d, width: d });\r\n            }\r\n\r\n            const x = event.pageX - surface.offset().left - (ink.width() / 2);\r\n            const y = event.pageY - surface.offset().top - (ink.height() / 2);\r\n\r\n            const rippleColor = surface.data(\"ripple-color\");\r\n\r\n            // animation end handler\r\n            const ANIMATION_END_EVENT = \"animationend webkitAnimationEnd\";\r\n            ink.on(ANIMATION_END_EVENT, function (ev: JQuery.Event) {\r\n                ink.off();\r\n                ink.removeClass(\"ui-ripple-animate\");\r\n                ink = null;\r\n            });\r\n\r\n            // set the position and add class .animate\r\n            ink.css({\r\n                top: y + \"px\",\r\n                left: x + \"px\",\r\n                background: rippleColor\r\n            }).addClass(\"ui-ripple-animate\");\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Material Design Ripple 拡張\r\n     *\r\n     * @param {jQuery}              $ui       [in] 検索対象の jQuery オブジェクト\r\n     * @param {DomExtensionOptions} [options] [in] オプション\r\n     */\r\n    function applyDomExtension($ui: JQuery, options?: DomExtensionOptions): JQuery {\r\n        const NO_RIPPLE_CLASS = [\r\n            \".ui-ripple-none\",\r\n            \".ui-flipswitch-on\",\r\n            \".ui-slider-handle\",\r\n            \".ui-input-clear\",\r\n        ];\r\n\r\n        let selector = \".ui-btn\";\r\n        if ($ui.hasClass(\"ui-page\")) {\r\n            selector = \".ui-content .ui-btn\"; // header は自動 ripple 化対象外\r\n        }\r\n\r\n        $ui.find(selector)\r\n            .filter((index, elem) => {\r\n                const $elem = $(elem);\r\n                if ($elem.is(NO_RIPPLE_CLASS.join(\",\"))) {\r\n                    return false;\r\n                } else {\r\n                    return true;\r\n                }\r\n            })\r\n            .addClass(\"ui-ripple\");\r\n\r\n        // ripplify\r\n        $ui.find(\".ui-ripple\")\r\n            .each((index: number, elem: Element) => {\r\n                $(elem).ripple(options);\r\n            });\r\n        return $ui;\r\n    }\r\n\r\n    // 登録\r\n    ExtensionManager.registerDomExtension(applyDomExtension);\r\n}\r\n","/**\r\n * jQuery plugin definition\r\n */\r\ninterface JQuery {\r\n    spinner(options?: CDP.UI.DomExtensionOptions | \"refresh\"): JQuery;\r\n}\r\n\r\nnamespace CDP.UI.Extension {\r\n\r\n    import Template = CDP.Tools.Template;\r\n    import JST      = CDP.Tools.JST;\r\n\r\n    let _template: JST;\r\n\r\n    // jQuery plugin\r\n    $.fn.spinner = function (options?: DomExtensionOptions | \"refresh\") {\r\n        if (\"string\" === typeof options) {\r\n            return refresh($(this));\r\n        } else {\r\n            return spinnerify($(this), options);\r\n        }\r\n    };\r\n\r\n    function spinnerify($target: JQuery, options?: DomExtensionOptions): JQuery {\r\n        if ($target.length <= 0) {\r\n            return $target;\r\n        }\r\n\r\n        if (!_template) {\r\n            _template = Template.getJST(`\r\n                <script type=\"text/template\">\r\n                    <span class=\"ui-spinner-base\">\r\n                        <span class=\"ui-spinner-inner\">\r\n                            <span class=\"ui-spinner-inner-gap\" {{borderTop}}></span>\r\n                            <span class=\"ui-spinner-inner-left\">\r\n                                <span class=\"ui-spinner-inner-half-circle\" {{border}}></span>\r\n                            </span>\r\n                            <span class=\"ui-spinner-inner-right\">\r\n                                <span class=\"ui-spinner-inner-half-circle\" {{border}}></span>\r\n                            </span>\r\n                        </span>\r\n                    </span>\r\n                </script>\r\n            `);\r\n        }\r\n\r\n        const makeTemplateParam = (clr: string): object => {\r\n            return {\r\n                borderTop: \"style=border-top-color:\" + clr + \";\",\r\n                border: \"style=border-color:\" + clr + \";\",\r\n            };\r\n        };\r\n\r\n        const color = $target.data(\"spinner-color\");\r\n        let param = null;\r\n        if (color) {\r\n            $target.css({ \"background-color\": color });\r\n            param = makeTemplateParam(color);\r\n        }\r\n        $target.append(_template(param));\r\n\r\n        return refresh($target);\r\n    }\r\n\r\n    // iOS 10.2+ SVG SMIL アニメーションが 2回目以降動かない問題の対策\r\n    // data:image/svg+xml;<cache bust string>;base64,... とすることで data-url にも cache busting が有効になる\r\n    function refresh($target: JQuery): JQuery {\r\n        const PREFIX = [\"-webkit-\", \"\"];\r\n\r\n        const valid = (prop) => {\r\n            return (prop && \"none\" !== prop);\r\n        };\r\n\r\n        let dataUrl: string;\r\n        for (let i = 0, n = PREFIX.length; i < n; i++) {\r\n            if (!valid(dataUrl)) {\r\n                dataUrl = $target.css(PREFIX[i] + \"mask-image\");\r\n                if (valid(dataUrl)) {\r\n                    // iOS では url(data***); 内に '\"' は入らない\r\n                    const match = dataUrl.match(/(url\\(data:image\\/svg\\+xml;)([\\s\\S]*)?(base64,[\\s\\S]*\\))/);\r\n                    if (match) {\r\n                        dataUrl = `${match[1]}bust=${Date.now().toString(36)};${match[3]}`;\r\n                    } else {\r\n                        dataUrl = null;\r\n                    }\r\n                }\r\n            }\r\n            if (valid(dataUrl)) {\r\n                $target.css(PREFIX[i] + \"mask-image\", dataUrl);\r\n            }\r\n        }\r\n\r\n        return $target;\r\n    }\r\n\r\n    /**\r\n     * Material Design Spinner 拡張\r\n     *\r\n     * @param {jQuery}              $ui       [in] 検索対象の jQuery オブジェクト\r\n     * @param {DomExtensionOptions} [options] [in] オプション\r\n     */\r\n    function applyDomExtension($ui: JQuery, options?: DomExtensionOptions): JQuery {\r\n        $ui.find(\".ui-spinner, .ui-icon-loading\")\r\n            .each((index: number, elem: Element) => {\r\n                $(elem).spinner(options);\r\n            });\r\n        return $ui;\r\n    }\r\n\r\n    // 登録\r\n    ExtensionManager.registerDomExtension(applyDomExtension);\r\n}\r\n","namespace CDP.UI.Extension {\r\n\r\n    /**\r\n     * Text Input 用 Floating Label 拡張\r\n     *\r\n     * @param {jQuery}              $ui       [in] 検索対象の jQuery オブジェクト\r\n     * @param {DomExtensionOptions} [options] [in] オプション\r\n     */\r\n    function applyDomExtension($ui: JQuery, options?: DomExtensionOptions): JQuery {\r\n        const update = (elem: Element, floating: boolean) => {\r\n            const $elem = $(elem);\r\n            if (floating) {\r\n                $elem.addClass(\"ui-float-label-floating\");\r\n            } else {\r\n                $elem.removeClass(\"ui-float-label-floating\");\r\n            }\r\n        };\r\n\r\n        const floatingify = (elem: Element) => {\r\n            const id = $(elem).attr(\"for\");\r\n            const $input = $ui.find(\"#\" + id);\r\n            if (\"search\" === $input.jqmData(\"type\")) {\r\n                $(elem).addClass(\"ui-float-label-has-icon\");\r\n            }\r\n            update(elem, !!$input.val());\r\n            $input.on(\"keyup change input focus blur cut paste\", (event: JQuery.Event) => {\r\n                update(elem, !!$(event.target).val());\r\n            });\r\n        };\r\n\r\n        $ui.find(\"label.ui-float-label, .ui-float-label label\")\r\n            .each((index: number, elem: Element) => {\r\n                floatingify(elem);\r\n            });\r\n\r\n        return $ui;\r\n    }\r\n\r\n    // 登録\r\n    ExtensionManager.registerDomExtension(applyDomExtension);\r\n}\r\n","namespace CDP.UI.Extension {\r\n\r\n    import Framework = CDP.Framework;\r\n\r\n    /**\r\n     * jQuery Mobile Flip Switch 拡張\r\n     *\r\n     * @param {jQuery}              $ui       [in] 検索対象の jQuery オブジェクト\r\n     * @param {DomExtensionOptions} [options] [in] オプション\r\n     */\r\n    function applyDomExtension($ui: JQuery, options?: DomExtensionOptions): JQuery {\r\n        /*\r\n         * flipswitch に紐づく label は OS によって event 発行形式が異なるためフックして独自イベントで対応する.\r\n         * また flipswitch は内部で click を発行しているが、vclick に変更する.\r\n         */\r\n\r\n        const _getAllSwitches = (): JQuery => {\r\n            return $ui.find(\".ui-flipswitch\");\r\n        };\r\n\r\n        const _getInputFromSwitch = ($switch: JQuery): JQuery => {\r\n            const $input = $switch.find(\"input\");\r\n            if ($input.length) {\r\n                return $input;\r\n            }\r\n            const $select = $switch.find(\"select\");\r\n            if ($select.length) {\r\n                return $select;\r\n            }\r\n            return null;\r\n        };\r\n\r\n        const _change = ($input: JQuery, to: boolean): void => {\r\n            if ($input) {\r\n                if (\"INPUT\" === $input[0].nodeName) {\r\n                    $input.prop(\"checked\", to).flipswitch(\"refresh\");\r\n                } else if (\"SELECT\" === $input[0].nodeName) {\r\n                    $input.val(to ? \"on\" : \"off\").flipswitch(\"refresh\");\r\n                }\r\n            }\r\n        };\r\n\r\n        const _getLabelsFromSwitch = ($switch: JQuery): JQuery => {\r\n            const $input = _getInputFromSwitch($switch);\r\n            if ($input) {\r\n                const labels = (<any>$input[0]).labels;\r\n                if (labels) {\r\n                    return $(labels);\r\n                }\r\n            }\r\n            return $();\r\n        };\r\n\r\n        const _getSwitchFromLabel = ($label: JQuery): JQuery => {\r\n            const name = $label.attr(\"for\");\r\n            return _getAllSwitches().find(\"[name='\" + name + \"']\");\r\n        };\r\n\r\n        _getAllSwitches()\r\n            .on(\"vclick _change_flipswich\", (event: JQuery.Event) => {\r\n                const $switch = $(event.currentTarget);\r\n                const $target = $(event.target);\r\n                const $input = _getInputFromSwitch($switch);\r\n                const changeTo = !$switch.hasClass(\"ui-flipswitch-active\");\r\n\r\n                if ($target.hasClass(\"ui-flipswitch-input\")) {\r\n                    _change($input, changeTo);\r\n                } else if ($target.hasClass(\"ui-flipswitch-on\")) {\r\n                    if (Framework.Platform.Mobile && Framework.Patch.isSupportedVclick()) {\r\n                        _change($input, changeTo);\r\n                        event.preventDefault();\r\n                    }\r\n                }\r\n            })\r\n            .each((index: number, flipswitch: Element) => {\r\n                _getLabelsFromSwitch($(flipswitch))\r\n                    .on(\"vclick\", (event: JQuery.Event) => {\r\n                        const $switch = _getSwitchFromLabel($(event.target));\r\n                        if (!$switch.parent().hasClass(\"ui-state-disabled\")) {\r\n                            $switch.trigger(\"_change_flipswich\");\r\n                        }\r\n                        event.preventDefault();\r\n                    });\r\n            });\r\n\r\n        return $ui;\r\n    }\r\n\r\n    // 登録\r\n    ExtensionManager.registerDomExtension(applyDomExtension);\r\n}\r\n","namespace CDP.UI.Extension {\r\n\r\n    /**\r\n     * jQuery Mobile Slider 拡張\r\n     *\r\n     * @param {jQuery}              $ui       [in] 検索対象の jQuery オブジェクト\r\n     * @param {DomExtensionOptions} [options] [in] オプション\r\n     */\r\n    function applyDomExtension($ui: JQuery, options?: DomExtensionOptions): JQuery {\r\n        $ui.find(\".ui-slider-input\")\r\n            .on(\"slidestop\", (event: JQuery.Event) => {\r\n                const $handles = $(event.currentTarget)\r\n                    .parent()\r\n                    .find(\".ui-slider-handle\");\r\n                $handles.blur();\r\n            });\r\n        return $ui;\r\n    }\r\n\r\n    // 登録\r\n    ExtensionManager.registerDomExtension(applyDomExtension);\r\n}\r\n","namespace CDP.UI.Extension {\r\n\r\n    //! iScroll.click patch\r\n    const patch_IScroll_utils_click = function (event: Event): void {\r\n        const target: any = event.target;\r\n        const e: any = event;\r\n        let ev: MouseEvent;\r\n\r\n        // [CDP modified]: set target.clientX.\r\n        if (null == target.clientX || null == target.clientY) {\r\n            if (null != e.pageX && null != e.pageY) {\r\n                target.clientX = e.pageX;\r\n                target.clientY = e.pageY;\r\n            } else if (e.changedTouches && e.changedTouches[0]) {\r\n                target.clientX = e.changedTouches[0].pageX;\r\n                target.clientY = e.changedTouches[0].pageY;\r\n            }\r\n        }\r\n\r\n        if (!(/(SELECT|INPUT|TEXTAREA)/i).test(target.tagName)) {\r\n            ev = document.createEvent(\"MouseEvents\");\r\n            ev.initMouseEvent(\"click\", true, true, e.view, 1,\r\n                target.screenX, target.screenY, target.clientX, target.clientY,\r\n                e.ctrlKey, e.altKey, e.shiftKey, e.metaKey,\r\n                0, null);\r\n\r\n            (<any>ev)._constructed = true;\r\n            target.dispatchEvent(ev);\r\n        }\r\n    };\r\n\r\n    let s_applied = false;\r\n\r\n    /**\r\n     * iScroll Patch 拡張\r\n     *\r\n     * @param {jQuery}              $ui       [in] 検索対象の jQuery オブジェクト\r\n     * @param {DomExtensionOptions} [options] [in] オプション\r\n     */\r\n    function applyPatch($ui: JQuery, options?: DomExtensionOptions): JQuery {\r\n        if (!s_applied && global.IScroll && global.IScroll.utils) {\r\n            global.IScroll.utils.click = patch_IScroll_utils_click;\r\n            s_applied = true;\r\n        }\r\n        return $ui;\r\n    }\r\n\r\n    // 登録\r\n    ExtensionManager.registerDomExtension(applyPatch);\r\n}\r\n"]}