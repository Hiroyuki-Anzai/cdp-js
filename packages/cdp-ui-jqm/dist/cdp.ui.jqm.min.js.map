{"version":3,"sources":["cdp:///CDP/UI/jqm/Theme.ts","cdp:///CDP/UI/jqm/ExtensionManager.ts","cdp:///CDP/UI/jqm/Toast.ts","cdp:///CDP/UI/jqm/Dialog.ts","cdp:///CDP/UI/jqm/DialogCommons.ts","cdp:///CDP/UI/jqm/BaseHeaderView.ts","cdp:///CDP/UI/jqm/BasePage.ts","cdp:///CDP/UI/jqm/PageView.ts","cdp:///CDP/UI/jqm/PageListView.ts","cdp:///CDP/UI/jqm/PageExpandableListView.ts","cdp:///CDP/UI/jqm/Extension/Ripple.ts","cdp:///CDP/UI/jqm/Extension/Spinner.ts","cdp:///CDP/UI/jqm/Extension/FloatLabel.ts","cdp:///CDP/UI/jqm/Extension/FlipSwitch.ts","cdp:///CDP/UI/jqm/Extension/Slider.ts","cdp:///CDP/UI/jqm/Extension/IScroll.ts"],"names":["CDP","UI","applyCustomChangePage","jqmChangePage","_","bind","$","mobile","changePage","to","options","isString","transition","Theme","queryPageTransition","Config","Framework","initialize","opt","extend","platform","reserveScrollbarRegion","detectUIPlatform","setCurrentUIPlatform","console","warn","TAG","getCurrentUIPlatform","$htms","i","n","s_platforms","length","hasClass","indexOf","$htms_1","forEach","target","removeClass","addClass","Platform","iOS","DEBUG","Mobile","css","registerUIPlatforms","platforms","registerPageTransitionMap","map","s_pageTransitionMap","registerDialogTransitionMap","s_dialogTransitionMap","original","convert","fallback","queryDialogTransition","platform-default","ios","android","platform-alternative","waitForInitialize","done","ExtensionManager","registerDomExtension","func","this","s_domExtensions","push","applyDomExtension","$ui","Toast","LENGTH_SHORT","LENGTH_LONG","OffsetX","OffsetY","StyleBuilderDefault","prototype","getClass","getStyle","padding","display","background-color","border-color","color","text-shadow","font-weight","opacity","getOffsetPoint","CENTER","BOTTOM","getOffsetX","getOffsetY","show","message","duration","style","$mobile","info","setCSS","html","replace","box","top","left","appendTo","pageContainer","posX","posY","offsetPoint","$window","window","box_width","width","parseInt","box_height","height","LEFT","RIGHT","TOP","delay","fadeOut","remove","Promise","Dialog","id","_template","_settings","_$dialog","initCommonCondition","s_defaultOptions","Tools","Template","getJST","src","_this","$document","document","$body","$page","pagecontainer","ofcHidden","overflow","overflow-x","overflow-y","ofcBody","parentScrollPos","scrollTop","ofcPage","scrollEvent","scrollHander","event","preventDefault","afterclose","forceOverwriteAfterClose","_titleState","title","localize","append","resolveTheme","on","register","enhanceWithin","domExtensionOptions","onBeforeShow","popup","positionTo","ui","off","autoClose","attr","defaultAutoClose","close","fail","error","trigger","Object","defineProperty","resolve","candidateTheme","queryTheme","jqmData","theme","overlayTheme","setDefaultOptions","dialog","s_activeDialog","isInitialized","s_oldBackKeyHandler","setBackButtonHandler","customBackKeyHandler","idPositive","idNegative","getDefaultClickEvent","dismissible","labelPositive","labelNegative","backKey","alert","confirm","DialogPrompt","_super","call","_eventOK","eventOK","__extends","$el","text","find","val","prompt","Router","View","BaseHeaderView","_owner","_options","el","backCommandSelector","backCommandKind","baseTemplate","setElement","create","createHeaderBase","activate","showIndicator","inactivate","hideIndicator","release","releaseHeaderBase","$header","s_$headerBase","s_refCount","body","_hasBackIndicator","events","eventMap","onCommandBack","handled","onCommand","back","BasePage","url","baseHeader","backCommandHandler","onPageBeforeCreate","_baseHeader","onPageInit","onPageBeforeShow","data","onPageBeforeHide","onPageRemove","onHardwareBackButton","retval","kind","Page","PageContainerView","owner","delegates","PageView","_pageOptions","_basePage","_statusMgr","basePage","StatusManager","statusAddRef","status","statusRelease","statusScope","callback","isStatusIn","active","$footer","intent","newIntent","onOrientationChanged","newOrientation","onBeforeRouteChange","onInitialize","onPageShow","onPageHide","PageListView","autoDestoryElement","_scrollMgr","_needRebuild","ScrollManager","reserveRebuild","setBaseHeight","getPageBaseHeight","destroy","rebuild","addItem","initializer","insertTo","_addLine","LineProfile","Math","floor","removeItem","index","arg2","arg3","getItemInfo","refresh","update","backup","key","restore","hasBackup","clearBackup","backupData","setScrollHandler","handler","setScrollStopHandler","getScrollPos","getScrollPosMax","scrollTo","pos","animate","time","ensureVisible","_line","PageExpandableListView","_expandManager","ExpandManager","newGroup","getGroup","registerTopGroup","topGroup","getTopGroups","expandAll","collapseAll","isExpanding","isCollapsing","isSwitching","layoutKey","Extension","fn","ripple","Patch","s_vclickEvent","surface","prepend","ink","d","max","outerWidth","outerHeight","x","pageX","offset","y","pageY","rippleColor","ev","background","NO_RIPPLE_CLASS","selector","filter","elem","is","join","each","spinnerify","$target","param","clr","borderTop","border","makeTemplateParam","dataUrl","PREFIX","valid","prop","match","Date","now","toString","spinner","floating","$elem","floatingify","$input","_getAllSwitches","_getInputFromSwitch","$switch","$select","_change","nodeName","flipswitch","_getLabelsFromSwitch","labels","_getSwitchFromLabel","$label","name","currentTarget","changeTo","isSupportedVclick","parent","blur","patch_IScroll_utils_click","e","clientX","clientY","changedTouches","test","tagName","createEvent","initMouseEvent","view","screenX","screenY","ctrlKey","altKey","shiftKey","metaKey","_constructed","dispatchEvent","s_applied","global","IScroll","utils","click"],"mappings":"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","sourcesContent":["namespace CDP.UI {\r\n\r\n    import Config       = CDP.Config;\r\n    import Framework    = CDP.Framework;\r\n\r\n    const TAG = \"[CDP.UI.Theme] \";\r\n\r\n    /**\r\n     * @interface PlatformTransition\r\n     * @brief プラットフォームごとの Transition を格納\r\n     */\r\n    export interface PlatformTransition {\r\n        [platform: string]: string;     // ex) ios: \"slide\"\r\n        fallback: string;               // fallback transition prop\r\n    }\r\n\r\n    /**\r\n     * @interface TransitionMap\r\n     * @brief トランジションマップ\r\n     */\r\n    export interface TransitionMap {\r\n        [transitionName: string]: PlatformTransition;\r\n    }\r\n\r\n    /**\r\n     * @interface ThemeInitOptions\r\n     * @brief トランジションマップ\r\n     */\r\n    export interface ThemeInitOptions {\r\n        platform?: string;                  // platform を指定. default:\"auto\"\r\n        reserveScrollbarRegion?: boolean;   // PC デバッグ環境ではスクロールバーを表示. default: \"true\"\r\n    }\r\n\r\n    //__________________________________________________________________________________________________________//\r\n\r\n    /**\r\n     * @class Theme\r\n     * @brief UI Theme 設定を行うユーティリティクラス\r\n     */\r\n    export class Theme {\r\n\r\n        private static s_platforms: string[] = [\"ios\", \"android\"];\r\n        private static s_pageTransitionMap: TransitionMap = {\r\n            \"platform-default\": {\r\n                ios: \"slide\",\r\n                android: \"floatup\",\r\n                fallback: \"slide\",\r\n            },\r\n            \"platform-alternative\": {\r\n                ios: \"slideup\",\r\n                android: \"floatup\",\r\n                fallback: \"slideup\",\r\n            },\r\n        };\r\n        private static s_dialogTransitionMap: TransitionMap = {\r\n            \"platform-default\": {\r\n                ios: \"popzoom\",\r\n                android: \"crosszoom\",\r\n                fallback: \"none\",\r\n            },\r\n        };\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // public static methods:\r\n\r\n        /**\r\n         * Theme の初期化\r\n         *\r\n         * @param options オプション指定\r\n         * @returns true: 成功 / false: 失敗\r\n         */\r\n        public static initialize(options?: ThemeInitOptions): string {\r\n            const opt = $.extend({}, {\r\n                platform: \"auto\",\r\n                reserveScrollbarRegion: true,\r\n            }, options);\r\n\r\n            if (\"auto\" === opt.platform) {\r\n                return Theme.detectUIPlatform(opt.reserveScrollbarRegion);\r\n            } else {\r\n                if (Theme.setCurrentUIPlatform(opt.platform)) {\r\n                    return opt.platform;\r\n                } else {\r\n                    console.warn(TAG + \"setCurrentUIPlatform(), failed. platform: \" + opt.platform);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * 現在指定されている UI Platform を取得\r\n         *\r\n         * @return {String} ex) \"ios\"\r\n         */\r\n        public static getCurrentUIPlatform(): string {\r\n            const $htms = $(\"html\");\r\n            for (let i = 0, n = Theme.s_platforms.length; i < n; i++) {\r\n                if ($htms.hasClass(\"ui-platform-\" + Theme.s_platforms[i])) {\r\n                    return Theme.s_platforms[i];\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n\r\n        /**\r\n         * UI Platform を設定\r\n         *\r\n         * @return {String} true: 成功 / false: 失敗\r\n         */\r\n        public static setCurrentUIPlatform(platform: string): boolean {\r\n            if (null == platform || Theme.s_platforms.indexOf(platform) >= 0) {\r\n                const $htms = $(\"html\");\r\n                Theme.s_platforms.forEach((target) => {\r\n                    $htms.removeClass(\"ui-platform-\" + target);\r\n                });\r\n                if (platform) {\r\n                    $htms.addClass(\"ui-platform-\" + platform);\r\n                }\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * 現在の Platform を判定し最適な platform を自動決定\r\n         *\r\n         * @param reserveScrollbarRegion PC デバッグ環境ではスクロールバーを表示. default: true\r\n         * @returns ex) \"ios\"\r\n         */\r\n        public static detectUIPlatform(reserveScrollbarRegion: boolean = true): string {\r\n            let platform = \"\";\r\n            // platform の設定\r\n            if (Framework.Platform.iOS) {\r\n                $(\"html\").addClass(\"ui-platform-ios\");\r\n                platform = \"ios\";\r\n            } else {\r\n                $(\"html\").addClass(\"ui-platform-android\");\r\n                platform = \"android\";\r\n            }\r\n            // PC デバッグ環境ではスクロールバーを表示\r\n            if (Config.DEBUG && reserveScrollbarRegion && !Framework.Platform.Mobile) {\r\n                $(\"body\").css(\"overflow-y\", \"scroll\");\r\n            }\r\n            return platform;\r\n        }\r\n\r\n        /**\r\n         * platform を配列で登録\r\n         * 上書きされる\r\n         *\r\n         * @param {String[]} platforms [in] OS ex): [\"ios\", \"android\"]\r\n         */\r\n        public static registerUIPlatforms(platforms: string[]): void {\r\n            if (platforms) {\r\n                Theme.s_platforms = platforms;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * page transition を登録\r\n         * 上書きされる\r\n         *\r\n         * @param {TransitionMap} map [in] TransitionMap を指定\r\n         */\r\n        public static registerPageTransitionMap(map: TransitionMap): void {\r\n            if (map) {\r\n                Theme.s_pageTransitionMap = map;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * dialog transition を登録\r\n         * 上書きされる\r\n         *\r\n         * @param {TransitionMap} map [in] TransitionMap を指定\r\n         */\r\n        public static registerDialogTransitionMap(map: TransitionMap): void {\r\n            if (map) {\r\n                Theme.s_dialogTransitionMap = map;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * page transition を取得\r\n         * TransitionMap にアサインされているものであれば変換\r\n         *\r\n         * @return {String[]} \"slide\"\r\n         */\r\n        public static queryPageTransition(original: string): string {\r\n            const convert = Theme.s_pageTransitionMap[original];\r\n            if (convert) {\r\n                return convert[Theme.getCurrentUIPlatform()] || convert.fallback;\r\n            } else {\r\n                return original;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * dialog transition を取得\r\n         * TransitionMap にアサインされているものであれば変換\r\n         *\r\n         * @return {String[]} \"slide\"\r\n         */\r\n        public static queryDialogTransition(original: string): string {\r\n            const convert = Theme.s_dialogTransitionMap[original];\r\n            if (convert) {\r\n                return convert[Theme.getCurrentUIPlatform()] || convert.fallback;\r\n            } else {\r\n                return original;\r\n            }\r\n        }\r\n    }\r\n\r\n    //__________________________________________________________________________________________________________//\r\n\r\n    // jquey.mobile.changePage() の Hook.\r\n    function applyCustomChangePage() {\r\n        const jqmChangePage: (to: any, options?: ChangePageOptions) => void = _.bind($.mobile.changePage, $.mobile);\r\n\r\n        function customChangePage(to: any, options?: ChangePageOptions): void {\r\n            if (_.isString(to)) {\r\n                if (options && options.transition) {\r\n                    options.transition = Theme.queryPageTransition(options.transition);\r\n                }\r\n            }\r\n            jqmChangePage(to, options);\r\n        }\r\n\r\n        $.mobile.changePage = customChangePage;\r\n    }\r\n\r\n    // framework 初期化後に適用\r\n    Framework.waitForInitialize()\r\n        .done(() => {\r\n            applyCustomChangePage();\r\n        });\r\n}\r\n","namespace CDP.UI {\r\n\r\n    /**\r\n     * @interface DomExtensionOptions\r\n     * @breif DomExtension に渡すオプションインターフェイス\r\n     */\r\n    export interface DomExtensionOptions {\r\n        [key: string]: any;\r\n    }\r\n\r\n    /**\r\n     * @type DomExtension\r\n     * @brief DOM 拡張関数\r\n     */\r\n    export type DomExtension = ($target: JQuery, DomExtensionOptions?: Object) => JQuery;\r\n\r\n    //__________________________________________________________________________________________________________//\r\n\r\n    /**\r\n     * @class ExtensionManager\r\n     * @brief 拡張機能を管理するユーティリティクラス\r\n     */\r\n    export class ExtensionManager {\r\n\r\n        private static s_domExtensions: DomExtension[] = [];\r\n\r\n        /**\r\n         * DOM 拡張関数の登録\r\n         *\r\n         * @param {DomExtension} func [in] DOM 拡張関数\r\n         */\r\n        public static registerDomExtension(func: DomExtension): void {\r\n            this.s_domExtensions.push(func);\r\n        }\r\n\r\n        /**\r\n         * DOM 拡張を適用\r\n         *\r\n         * @param {jQuery} $ui       [in] 拡張対象の DOM\r\n         * @param {Object} [options] [in] オプション\r\n         */\r\n        public static applyDomExtension($ui: JQuery, options?: DomExtensionOptions): void {\r\n            this.s_domExtensions.forEach((func: DomExtension) => {\r\n                func($ui, options);\r\n            });\r\n        }\r\n    }\r\n}\r\n","/* tslint:disable:no-bitwise */\r\n\r\nnamespace CDP.UI {\r\n\r\n    const TAG = \"[CDP.UI.Toast] \";\r\n\r\n    /**\r\n     * @class Toast\r\n     * @brief Android SDK の Toast クラスのように自動消滅するメッセージ出力ユーティリティ\r\n     *        入れ子の関係を実現するために module で実装\r\n     */\r\n    export module Toast {\r\n\r\n        // 表示時間の定義\r\n        export let LENGTH_SHORT = 1500;   //!< 短い:1500 msec\r\n        export let LENGTH_LONG  = 4000;   //!< 長い:4000 msec\r\n\r\n        //! @enum オフセットの基準\r\n        export enum OffsetX {\r\n            LEFT    = 0x0001,\r\n            RIGHT   = 0x0002,\r\n            CENTER  = 0x0004,\r\n        }\r\n\r\n        //! @enum オフセットの基準\r\n        export enum OffsetY {\r\n            TOP     = 0x0010,\r\n            BOTTOM  = 0x0020,\r\n            CENTER  = 0x0040,\r\n        }\r\n\r\n        /**\r\n         * @interface StyleBuilder\r\n         * @brief     スタイル変更時に使用するインターフェイス\r\n         *            css にスタイルを逃がす場合、独自の class を設定し、getStyle は null を返すこと。\r\n         */\r\n        export interface StyleBuilder {\r\n            //! class attribute に設定する文字列を取得\r\n            getClass(): string;\r\n            //! style attribute に設定する JSON オブジェクトを取得\r\n            getStyle(): any;\r\n            //! オフセットの基準位置を取得\r\n            getOffsetPoint(): number;\r\n            //! X 座標のオフセット値を取得\r\n            getOffsetX(): number;\r\n            //! Y 座標のオフセット値を取得\r\n            getOffsetY(): number;\r\n        }\r\n\r\n        /**\r\n         * @class StyleBuilderDefault\r\n         * @brief スタイル変更時に使用する既定の構造体オブジェクト\r\n         */\r\n        export class StyleBuilderDefault implements StyleBuilder {\r\n\r\n            //! class attribute に設定する文字列を取得\r\n            getClass(): string {\r\n                return \"ui-loader ui-overlay-shadow ui-corner-all\";\r\n            }\r\n\r\n            //! style attribute に設定する JSON オブジェクトを取得\r\n            getStyle(): any {\r\n                const style = {\r\n                    \"padding\":          \"7px 25px 7px 25px\",\r\n                    \"display\":          \"block\",\r\n                    \"background-color\": \"#1d1d1d\",\r\n                    \"border-color\":     \"#1b1b1b\",\r\n                    \"color\":            \"#fff\",\r\n                    \"text-shadow\":      \"0 1px 0 #111\",\r\n                    \"font-weight\":      \"bold\",\r\n                    \"opacity\":          0.8,\r\n                };\r\n                return style;\r\n            }\r\n\r\n            //! オフセットの基準位置を取得\r\n            getOffsetPoint(): number {\r\n                return OffsetX.CENTER | OffsetY.BOTTOM;\r\n            }\r\n\r\n            //! X 座標のオフセット値を取得\r\n            getOffsetX(): number {\r\n                return 0;\r\n            }\r\n\r\n            //! Y 座標のオフセット値を取得\r\n            getOffsetY(): number {\r\n                return -75;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Toast 表示\r\n         *\r\n         * @param message  [in] メッセージ\r\n         * @param duration [in] 表示時間を設定 (msec) default: LENGTH_SHORT\r\n         * @param style    [in] スタイル変更する場合には派生クラスオブジェクトを指定\r\n         */\r\n        export function show(message: string, duration: number = Toast.LENGTH_SHORT, style?: StyleBuilder): void {\r\n            const $mobile = $.mobile;\r\n            const info = style || new StyleBuilderDefault();\r\n            const setCSS = info.getStyle() ? true : false;\r\n\r\n            // 改行コードは <br/> に置換する\r\n            const msg = message.replace(/\\n/g, \"<br/>\");\r\n\r\n            // メッセージ element の動的生成\r\n            const html = \"<div>\" + msg + \"</div>\";\r\n            const box = $(html).addClass(info.getClass());\r\n            if (setCSS) {\r\n                box.css(info.getStyle());\r\n            }\r\n\r\n            // 自動改行されてもよいように、基点を設定してから追加\r\n            box.css({\r\n                \"top\": 0,\r\n                \"left\": 0,\r\n            }).appendTo($mobile.pageContainer);\r\n\r\n            // 配置位置の決定\r\n            const offsetPoint = info.getOffsetPoint();\r\n            const $window = $(window);\r\n            let posX, posY;\r\n\r\n            const box_width = box.width() + parseInt(box.css(\"padding-left\"), 10) + parseInt(box.css(\"padding-right\"), 10);\r\n            const box_height = box.height() + parseInt(box.css(\"padding-top\"), 10) + parseInt(box.css(\"padding-bottom\"), 10);\r\n\r\n            switch (offsetPoint & 0x000F) {\r\n                case OffsetX.LEFT:\r\n                    posX = 0 + info.getOffsetX();\r\n                    break;\r\n                case OffsetX.RIGHT:\r\n                    posX = $window.width() - box_width + info.getOffsetX();\r\n                    break;\r\n                case OffsetX.CENTER:\r\n                    posX = ($window.width() / 2) - (box_width / 2) + info.getOffsetX();\r\n                    break;\r\n                default:\r\n                    console.warn(TAG + \"warn. unknown offsetPoint:\" + (offsetPoint & 0x000F));\r\n                    posX = ($window.width() / 2) - (box_width / 2) + info.getOffsetX();\r\n                    break;\r\n            }\r\n\r\n            switch (offsetPoint & 0x00F0) {\r\n                case OffsetY.TOP:\r\n                    posY = 0 + info.getOffsetY();\r\n                    break;\r\n                case OffsetY.BOTTOM:\r\n                    posY = $window.height() - box_height + info.getOffsetY();\r\n                    break;\r\n                case OffsetY.CENTER:\r\n                    posY = ($window.height() / 2) - (box_height / 2) + info.getOffsetY();\r\n                    break;\r\n                default:\r\n                    console.warn(TAG + \"warn. unknown offsetPoint:\" + (offsetPoint & 0x00F0));\r\n                    posY = ($window.height() / 2) - (box_height / 2) + info.getOffsetY();\r\n                    break;\r\n            }\r\n\r\n            // 表示\r\n            box.css({\r\n                \"top\": posY,\r\n                \"left\": posX,\r\n            })\r\n            .delay(duration)\r\n            .fadeOut(400, function () {\r\n                $(this).remove();\r\n            });\r\n        }\r\n    }\r\n}\r\n","namespace CDP.UI {\r\n\r\n    import Promise      = CDP.Promise;\r\n    import Framework    = CDP.Framework;\r\n\r\n    const TAG = \"[CDP.UI.Dialog] \";\r\n\r\n    /**\r\n     * H/W Back Key Hook 関数\r\n     */\r\n    export type DialogBackKeyHandler = (event?: JQuery.Event) => void;\r\n\r\n    /**\r\n     * @interface DialogOptions\r\n     *            ダイアログオプションインターフェイス\r\n     */\r\n    export interface DialogOptions extends PopupOptions {\r\n        src?: string;                   //!< {String} template ファイルのパス                                 default: undefined\r\n        title?: string;                 //!< {String} ダイアログタイトル                                      default: undefined\r\n        message?: string;               //!< {String} メインメッセージ                                        default: undefined\r\n        idPositive?: string;            //!< {String} Positive ボタンのID                                     default: \"dlg-btn-positive\"\r\n        idNegative?: string;            //!< {String} Nagative ボタンのID                                     default: \"dlg-btn-negative\"\r\n        event?: string;                 //!< {String} Dialog クラスが管理するイベント                         default: \"vclick\"\r\n        defaultAutoClose?: boolean;     //!< {Boolean} data-auto-close が指定されていない場合の既定値         default: false\r\n        forceOverwriteAfterClose?: boolean; //!< {Boolean} afterclose オプションを強制上書きするための設定    default: false\r\n        labelPositive?: string;         //!< {String} Positive ボタンラベル                                   default: \"OK\"\r\n        labelNegative?: string;         //!< {String} Negative ボタンラベル                                   default: \"Cancel\"\r\n        backKey?: \"close\" | \"deny\" | DialogBackKeyHandler;  //!< H/W backKey の振る舞い                       default: \"close\"\r\n        scrollEvent?: \"deny\" | \"allow\" | \"adjust\";   //!< {String} scrollの抑止方式  (※ adjust は試験的)     default: \"deny\"\r\n        domExtensionOptions?: DomExtensionOptions;   //!< DOM拡張オプション. null|undefined で拡張しない      default: {}\r\n        [x: string]: any;               //!< any dialog template parameters.\r\n    }\r\n\r\n    //___________________________________________________________________________________________________________________//\r\n\r\n    /**\r\n     * @class Dialog\r\n     * @brief 汎用ダイアログクラス\r\n     *        jQM の popup widget によって実装\r\n     */\r\n    export class Dialog {\r\n\r\n        private _template: Tools.JST = null;\r\n        private _settings: DialogOptions = null;\r\n        private _$dialog: JQuery = null;\r\n\r\n        private static s_activeDialog: Dialog = null;\r\n        private static s_oldBackKeyHandler: (event?: JQuery.Event) => void = null;\r\n        private static s_defaultOptions: DialogOptions = null;\r\n\r\n        /**\r\n         * constructor\r\n         *\r\n         * @param id      {String}        [in] ダイアログ DOM ID を指定 ex) #dialog-hoge\r\n         * @param options {DialogOptions} [in] オプション\r\n         */\r\n        constructor(id: string, options?: DialogOptions) {\r\n            // Dialog 共通設定の初期化\r\n            Dialog.initCommonCondition();\r\n            // 設定を更新\r\n            this._settings = $.extend({}, Dialog.s_defaultOptions, options);\r\n            // ダイアログテンプレートを作成\r\n            this._template = Tools.Template.getJST(id, this._settings.src);\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // public methods\r\n\r\n        /**\r\n         * 表示\r\n         * 表示をして始めて DOM が有効になる。\r\n         *\r\n         * @param options {DialogOptions} [in] オプション (src は無視される)\r\n         * @return ダイアログの jQuery オブジェクト\r\n         */\r\n        public show(options?: DialogOptions): JQuery {\r\n            const $document = $(document);\r\n            const $body = $(\"body\");\r\n            const $page = (<any>$body).pagecontainer(\"getActivePage\");\r\n\r\n            const ofcHidden = {\r\n                \"overflow\":     \"hidden\",\r\n                \"overflow-x\":   \"hidden\",\r\n                \"overflow-y\":   \"hidden\",\r\n            };\r\n            const ofcBody = { // body overflow context\r\n                \"overflow\":     $body.css(\"overflow\"),\r\n                \"overflow-x\":   $body.css(\"overflow-x\"),\r\n                \"overflow-y\":   $body.css(\"overflow-y\"),\r\n            };\r\n            const parentScrollPos = $body.scrollTop();\r\n            const ofcPage = { // page overflow context\r\n                \"overflow\":     $page.css(\"overflow\"),\r\n                \"overflow-x\":   $page.css(\"overflow-x\"),\r\n                \"overflow-y\":   $page.css(\"overflow-y\"),\r\n            };\r\n\r\n            const scrollEvent = \"scroll touchmove mousemove MSPointerMove\";\r\n\r\n            const scrollHander = (event: JQuery.Event) => {\r\n                if (\"deny\" === this._settings.scrollEvent) {\r\n                    event.preventDefault();\r\n                } else if (\"adjust\" === this._settings.scrollEvent) {\r\n                    $body.scrollTop(parentScrollPos);\r\n                }\r\n            };\r\n\r\n            // option が指定されていた場合更新\r\n            if (null != options) {\r\n                this._settings = $.extend({}, this._settings, options);\r\n            }\r\n\r\n            // afterclose 処理は Dialog の破棄処理を実装するため基本的に設定禁止 (強制上書きモードを設定使用可)\r\n            if (this._settings.afterclose && !this._settings.forceOverwriteAfterClose) {\r\n                console.warn(TAG + \"cannot accept 'afterclose' option. please instead using 'popupafterclose' event.\");\r\n                delete this._settings.afterclose;\r\n            }\r\n\r\n            // title の有無\r\n            (<any>this._settings)._titleState = this._settings.title ? \"ui-has-title\" : \"ui-no-title\";\r\n\r\n            /*\r\n             * template から jQuery オブジェクトを作成し、\r\n             * <body> 直下に追加.\r\n             * $page では Backbone event を受けられないことに注意\r\n             */\r\n            this._$dialog = $(this._template(this._settings));\r\n            this._$dialog.localize();\r\n            $body.append(this._$dialog);\r\n\r\n            // theme を解決\r\n            this.resolveTheme();\r\n\r\n            this._$dialog\r\n                .on(\"popupcreate\", (event: JQuery.Event) => {\r\n                    // スクロールを抑止\r\n                    if (\"allow\" !== this._settings.scrollEvent) {\r\n                        $document.on(scrollEvent, scrollHander);\r\n                    }\r\n                    $body.css(ofcHidden);\r\n                    $page.css(ofcHidden);\r\n                    Dialog.register(this);\r\n                })\r\n                .enhanceWithin();\r\n\r\n            // DOM 拡張\r\n            if (null != this._settings.domExtensionOptions) {\r\n                ExtensionManager.applyDomExtension(this._$dialog, this._settings.domExtensionOptions);\r\n            }\r\n\r\n            this.onBeforeShow()\r\n                .done(() => {\r\n                    // 表示\r\n                    this._$dialog\r\n                        .popup($.extend({}, {\r\n                            positionTo: \"window\",\r\n                            afterclose: (event: JQuery.Event, ui: any) => {\r\n                                // スクロール状態を戻す\r\n                                $page.css(ofcPage);\r\n                                $body.css(ofcBody);\r\n                                if (\"allow\" !== this._settings.scrollEvent) {\r\n                                    $document.off(scrollEvent, scrollHander);\r\n                                }\r\n                                Dialog.register(null);\r\n                                this._$dialog.remove();\r\n                                this._$dialog = null;\r\n                            },\r\n                        }, this._settings))\r\n                        .popup(\"open\").on(this._settings.event, (event: JQuery.Event) => {\r\n                            // \"data-auto-close='false'\" が指定されている要素は dialog を閉じない\r\n                            let autoClose = $(event.target).attr(\"data-auto-close\");\r\n                            if (null == autoClose) {\r\n                                autoClose = this._settings.defaultAutoClose ? \"true\" : \"false\";\r\n                            }\r\n                            if (\"false\" === autoClose) {\r\n                                return;\r\n                            }\r\n                            this.close();\r\n                            event.preventDefault();\r\n                        });\r\n\r\n                })\r\n                .fail((error) => {\r\n                    console.error(TAG + \"Dialog.show() failed.\");\r\n                    if (this._$dialog) {\r\n                        this._$dialog.trigger(\"error\", error);\r\n                    }\r\n                });\r\n\r\n            return this._$dialog;\r\n        }\r\n\r\n        /**\r\n         * 終了\r\n         * 基本的には自動で閉じるが、\r\n         * 表示中のダイアログをクライアント側から閉じるメソッド\r\n         */\r\n        public close(): void {\r\n            if (this._$dialog) {\r\n                this._$dialog.popup(\"close\");\r\n            }\r\n        }\r\n\r\n        //! ダイアログ element を取得\r\n        public get $el(): JQuery {\r\n            return this._$dialog;\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // protected methods: Override\r\n\r\n        /**\r\n         * ダイアログ表示の直前\r\n         * DOM を操作できるタイミングで呼び出される.\r\n         *\r\n         * @return {IPromiseBase} promise オブジェクト\r\n         */\r\n        protected onBeforeShow(): IPromiseBase<void> {\r\n            return Promise.resolve<void>();\r\n        }\r\n\r\n        /**\r\n         * ダイアログの使用する Theme を解決\r\n         * 不要な場合はオーバーライドすることも可能\r\n         */\r\n        protected resolveTheme(): void {\r\n            const queryTheme = (): string => {\r\n                return $(\".ui-page-active\").jqmData(\"theme\");\r\n            };\r\n\r\n            let candidateTheme: string;\r\n\r\n            if (!this._settings.theme) {\r\n                const domTheme = this._$dialog.jqmData(\"theme\");\r\n                if (!domTheme) {\r\n                    this._settings.theme = candidateTheme = queryTheme();\r\n                }\r\n\r\n            }\r\n            if (!this._settings.overlayTheme) {\r\n                const domOverlayTheme = this._$dialog.jqmData(\"overlay-theme\");\r\n                if (!domOverlayTheme) {\r\n                    this._settings.overlayTheme = candidateTheme || queryTheme();\r\n                }\r\n            }\r\n\r\n            // transition の更新\r\n            this._settings.transition = Theme.queryDialogTransition(this._settings.transition);\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // public static methods\r\n\r\n        /**\r\n         * Dialog の既定オプションを更新\r\n         * すぺての Dialog が使用する共通設定\r\n         *\r\n         * @param options {DialogOptions} [in] ダイアログオプション\r\n         */\r\n        public static setDefaultOptions(options: DialogOptions): void {\r\n            // Dialog 共通設定の初期化\r\n            Dialog.initCommonCondition();\r\n            $.extend(true, Dialog.s_defaultOptions, options);\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // private methods\r\n\r\n        //! 現在 active なダイアログとして登録する\r\n        private static register(dialog: Dialog): void {\r\n            if (null != dialog && null != Dialog.s_activeDialog) {\r\n                console.warn(TAG + \"new dialog proc is called in the past dialog's one. use setTimeout() for post process.\");\r\n            }\r\n            Dialog.s_activeDialog = dialog;\r\n        }\r\n\r\n        /**\r\n         * Dialog 共通設定の初期化\r\n         */\r\n        private static initCommonCondition(): void {\r\n            // Framework の初期化後に処理する必要がある\r\n            if (!Framework.isInitialized()) {\r\n                console.warn(TAG + \"initCommonCondition() should be called after Framework.initialized.\");\r\n                return;\r\n            }\r\n\r\n            if (null == Dialog.s_oldBackKeyHandler) {\r\n                // Back Button Handler\r\n                Dialog.s_oldBackKeyHandler = CDP.setBackButtonHandler(null);\r\n                CDP.setBackButtonHandler(Dialog.customBackKeyHandler);\r\n\r\n                // 既定オプション\r\n                Dialog.s_defaultOptions = {\r\n                    idPositive:             \"dlg-btn-positive\",\r\n                    idNegative:             \"dlg-btn-negative\",\r\n                    event:                  Framework.getDefaultClickEvent(),\r\n                    dismissible:            false,\r\n                    defaultAutoClose:       false,\r\n                    transition:             \"platform-default\",\r\n                    labelPositive:          \"OK\",\r\n                    labelNegative:          \"Cancel\",\r\n                    backKey:                \"close\",\r\n                    scrollEvent:            \"deny\",\r\n                    domExtensionOptions:    {},\r\n                };\r\n            }\r\n        }\r\n\r\n        /**\r\n         * H/W Back Button Handler\r\n         */\r\n        private static customBackKeyHandler(event?: JQuery.Event): void {\r\n            if (null != Dialog.s_activeDialog) {\r\n                if (\"close\" === Dialog.s_activeDialog._settings.backKey) {\r\n                    Dialog.s_activeDialog.close();\r\n                } else if (\"function\" === typeof Dialog.s_activeDialog._settings.backKey) {\r\n                    (<DialogBackKeyHandler>Dialog.s_activeDialog._settings.backKey)(event);\r\n                }\r\n                return; // Dialog が active な場合、常に既定のハンドラには渡さない\r\n            }\r\n            Dialog.s_oldBackKeyHandler(event);\r\n        }\r\n    }\r\n}\r\n","/* tslint:disable:max-line-length */\r\n\r\nnamespace CDP.UI {\r\n\r\n    const TAG = \"[CDP.UI.DialogCommons] \";\r\n\r\n    /**\r\n     * Alert\r\n     * alert メッセージ表示\r\n     *\r\n     * @param {String} message   [in] 表示文字列\r\n     * @param {String} [options] [in] ダイアログオプション\r\n     * @return {jQuery} ダイアログの DOM オブジェクト\r\n     */\r\n    export function alert(message: string, options?: DialogOptions): JQuery {\r\n        const template = `\r\n            <script type=\"text/template\">\r\n                <section class=\"ui-modal\" data-role=\"popup\" data-corners=\"false\">\r\n                    <div class=\"ui-content\">\r\n                        <h1 class=\"ui-title {{_titleState}}\">{{title}}</h1>\r\n                        <p class=\"ui-message\">{{message}}</p>\r\n                    </div>\r\n                    <div class=\"ui-modal-footer ui-grid-solo\">\r\n                        <button id=\"{{idPositive}}\" class=\"ui-btn ui-block-a ui-text-emphasis\" data-auto-close=\"true\">{{labelPositive}}</button>\r\n                    </div>\r\n                </section>\r\n            </script>\r\n        `;\r\n\r\n        const dlgAlert = new Dialog(template, $.extend({}, {\r\n            src: null,\r\n            message: message,\r\n        }, options));\r\n\r\n        return dlgAlert.show();\r\n    }\r\n\r\n    /**\r\n     * Confirm\r\n     * 確認メッセージ表示\r\n     *\r\n     * @param {String} message   [in] 表示文字列\r\n     * @param {String} [options] [in] ダイアログオプション\r\n     * @return {jQuery} ダイアログの DOM オブジェクト\r\n     */\r\n    export function confirm(message: string, options?: DialogOptions): JQuery {\r\n        const template = `\r\n            <script type=\"text/template\">\r\n                <section class=\"ui-modal\" data-role=\"popup\" data-corners=\"false\">\r\n                    <div class=\"ui-content\">\r\n                        <h1 class=\"ui-title {{_titleState}}\">{{title}}</h1>\r\n                        <p class=\"ui-message\">{{message}}</p>\r\n                    </div>\r\n                    <div class=\"ui-modal-footer ui-grid-a\">\r\n                        <button id=\"{{idNegative}}\" class=\"ui-btn ui-block-a\" data-auto-close=\"true\">{{labelNegative}}</button>\r\n                        <button id=\"{{idPositive}}\" class=\"ui-btn ui-block-b ui-text-emphasis\" data-auto-close=\"true\">{{labelPositive}}</button>\r\n                    </div>\r\n                </section>\r\n            </script>\r\n        `;\r\n\r\n        const dlgConfirm = new Dialog(template, $.extend({}, {\r\n            src: null,\r\n            message: message,\r\n        }, options));\r\n\r\n        return dlgConfirm.show();\r\n    }\r\n\r\n    /**\r\n     * @interface DialogCommonsOptions\r\n     * @brief prompt のオプション\r\n     */\r\n    export interface DialogPromptOptions extends DialogOptions {\r\n        eventOK?: string; //!< OK ボタン押下時の event: default: promptok\r\n    }\r\n\r\n    /**\r\n     * @class DialogPrompt\r\n     * @brief prompt ダイアログ (非公開)\r\n     */\r\n    class DialogPrompt extends Dialog {\r\n\r\n        private _eventOK: string;\r\n\r\n        /**\r\n         * constructor\r\n         *\r\n         */\r\n        constructor(id: string, options?: DialogPromptOptions) {\r\n            super(id, options);\r\n            this._eventOK = options.eventOK || \"promptok\";\r\n        }\r\n\r\n        //! ダイアログ表示の直前\r\n        protected onBeforeShow(): IPromiseBase<void> {\r\n            this.$el\r\n                .on(\"vclick\", \".command-prompt-ok \", (event: JQuery.Event) => {\r\n                    const text = this.$el.find(\"#_ui-prompt\").val();\r\n                    this.$el.trigger(this._eventOK, text);\r\n                    this.close();\r\n                    event.preventDefault();\r\n                });\r\n            return super.onBeforeShow();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prompt\r\n     *\r\n     * @param {String} message   [in] 表示文字列\r\n     * @param {String} [options] [in] ダイアログオプション\r\n     * @return {jQuery} ダイアログの DOM オブジェクト\r\n     */\r\n    export function prompt(message: string, options?: DialogPromptOptions): JQuery {\r\n        const template = `\r\n            <script type=\"text/template\">\r\n                <section class=\"ui-modal\" data-role=\"popup\" data-corners=\"false\">\r\n                    <div class=\"ui-content\">\r\n                        <h1 class=\"ui-title {{_titleState}}\">{{title}}</h1>\r\n                        <p class=\"ui-message\">{{message}}</p>\r\n                        <label for=\"_ui-prompt\" class=\"ui-hidden-accessible\"></label>\r\n                        <input type=\"text\" name=\"_ui-prompt\" id=\"_ui-prompt\">\r\n                    </div>\r\n                    <div class=\"ui-modal-footer ui-grid-a\">\r\n                        <button id=\"{{idNegative}}\" class=\"ui-btn ui-block-a\" data-auto-close=\"true\">{{labelNegative}}</button>\r\n                        <button id=\"{{idPositive}}\" class=\"command-prompt-ok ui-btn ui-block-b ui-text-emphasis\" data-auto-close=\"false\">{{labelPositive}}</button>\r\n                    </div>\r\n                </section>\r\n            </script>\r\n        `;\r\n\r\n        const dlgPrompt = new DialogPrompt(template, $.extend({}, {\r\n            src: null,\r\n            message: message,\r\n        }, options));\r\n\r\n        return dlgPrompt.show();\r\n    }\r\n}\r\n","namespace CDP.UI {\r\n\r\n    import Router       = CDP.Framework.Router;\r\n    import IPage        = CDP.Framework.IPage;\r\n    import Model        = CDP.Framework.Model;\r\n    import View         = CDP.Framework.View;\r\n    import ViewOptions  = CDP.Framework.ViewOptions;\r\n    import Template     = CDP.Tools.Template;\r\n    import JST          = CDP.Tools.JST;\r\n\r\n    const TAG: string = \"[CDP.UI.BaseHeaderView] \";\r\n\r\n    /**\r\n     * @interface BaseHeaderViewOptions\r\n     * @brief BaseHeaderView に指定するオプションインターフェイス\r\n     */\r\n    export interface BaseHeaderViewOptions<TModel extends Model = Model> extends ViewOptions<TModel> {\r\n        baseTemplate?: JST;             //!< 固定ヘッダ用 JavaScript テンプレート.\r\n        backCommandSelector?: string;   //!< \"戻る\"コマンドセレクタ. default: \"command-back\"\r\n        backCommandKind?: string;       //!< \"戻る\"コマンド種別 (onCommand 第2引数). default: \"pageback\"\r\n    }\r\n\r\n    //__________________________________________________________________________________________________________//\r\n\r\n    /**\r\n     * @class BaseHeaderView\r\n     * @brief 共通ヘッダを操作するクラス\r\n     */\r\n    export class BaseHeaderView<TModel extends Model = Model> extends View<TModel> {\r\n\r\n        private static s_$headerBase: JQuery;   //!< ページ外に配置される共通ヘッダのベース部品用 jQuery オブジェクト\r\n        private static s_refCount = 0;          //!< 参照カウント\r\n        private _template: JST;\r\n        private _hasBackIndicator: boolean;\r\n\r\n        /**\r\n         * constructor\r\n         *\r\n         * @param {IPage} _owner [in] オーナーページインスタンス\r\n         */\r\n        constructor(private _owner: IPage, private _options?: BaseHeaderViewOptions<TModel>) {\r\n            super(_options = $.extend({\r\n                el: _owner.$page.find(\"[data-role='header']\"),\r\n                backCommandSelector: \".command-back\",\r\n                backCommandKind: \"pageback\",\r\n            }, _options));\r\n\r\n            // template 設定\r\n            if (_options.baseTemplate) {\r\n                this._template = _options.baseTemplate;\r\n            } else {\r\n                this._template = Template.getJST(`\r\n                    <script type='text/template'>\r\n                        <header class='ui-header-base ui-body-{{theme}}'>\r\n                            <div class='ui-fixed-back-indicator'></div>\r\n                        </header>\r\n                    </script>\r\n                `);\r\n            }\r\n\r\n            // Backbone.View 用の初期化\r\n            this.setElement(this.$el, true);\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // public methods\r\n\r\n        /**\r\n         * 初期化\r\n         */\r\n        public create(): JQuery {\r\n            return this.createHeaderBase();\r\n        }\r\n\r\n        /**\r\n         * 有効化\r\n         */\r\n        public activate(): JQuery {\r\n            return this.showIndicator();\r\n        }\r\n\r\n        /**\r\n         * 無効化\r\n         */\r\n        public inactivate(): JQuery {\r\n            return this.hideIndicator();\r\n        }\r\n\r\n        /**\r\n         * 破棄\r\n         */\r\n        public release(): JQuery {\r\n            return this.releaseHeaderBase();\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // private methods\r\n\r\n        //! 共通ヘッダのベースを準備\r\n        private createHeaderBase(): JQuery {\r\n            // 固定ヘッダのときに有効化\r\n            if (\"fixed\" === this._owner.$header.jqmData(\"position\")) {\r\n                if (null == BaseHeaderView.s_$headerBase) {\r\n                    BaseHeaderView.s_$headerBase = $(this._template({\r\n                        theme: this._owner.$page.jqmData(\"theme\"),\r\n                    }));\r\n                }\r\n                BaseHeaderView.s_refCount++;\r\n                BaseHeaderView.s_$headerBase.appendTo($(document.body));\r\n            }\r\n            // Back Indicator を持っているか判定\r\n            if (0 < this.$el.find(\".ui-back-indicator\").length) {\r\n                this._hasBackIndicator = true;\r\n            }\r\n            return BaseHeaderView.s_$headerBase;\r\n        }\r\n\r\n        //! indicator の表示\r\n        private showIndicator(): JQuery {\r\n            // Back Indicator を持っていない場合表示しない\r\n            if (null != BaseHeaderView.s_$headerBase && this._hasBackIndicator) {\r\n                BaseHeaderView.s_$headerBase.find(\".ui-fixed-back-indicator\").addClass(\"show\");\r\n            }\r\n            return BaseHeaderView.s_$headerBase;\r\n        }\r\n\r\n        //! indicator の非表示\r\n        private hideIndicator(): JQuery {\r\n            if (null != BaseHeaderView.s_$headerBase) {\r\n                BaseHeaderView.s_$headerBase.find(\".ui-fixed-back-indicator\").removeClass(\"show\");\r\n            }\r\n            return BaseHeaderView.s_$headerBase;\r\n        }\r\n\r\n        //! 共通ヘッダのベースを破棄\r\n        private releaseHeaderBase(): JQuery {\r\n            // 固定ヘッダ時に参照カウントを管理\r\n            if (\"fixed\" === this._owner.$header.jqmData(\"position\")) {\r\n                if (null != BaseHeaderView.s_$headerBase) {\r\n                    BaseHeaderView.s_refCount--;\r\n                    if (0 === BaseHeaderView.s_refCount) {\r\n                        BaseHeaderView.s_$headerBase.remove();\r\n                        BaseHeaderView.s_$headerBase = null;\r\n                    }\r\n                }\r\n            }\r\n            return BaseHeaderView.s_$headerBase;\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Override: Backbone.View\r\n\r\n        //! events binding\r\n        events(): any {\r\n            const eventMap = {};\r\n            if (this._options) {\r\n                eventMap[\"vclick \" + this._options.backCommandSelector] = this.onCommandBack;\r\n            }\r\n            return eventMap;\r\n        }\r\n\r\n        //! back のハンドラ\r\n        private onCommandBack(event: JQuery.Event): void {\r\n            event.preventDefault();\r\n            let handled = false;\r\n            if (this._owner) {\r\n                handled = this._owner.onCommand(event, this._options.backCommandKind);\r\n            }\r\n            if (!handled) {\r\n                Router.back();\r\n            }\r\n        }\r\n    }\r\n}\r\n","/* tslint:disable:max-line-length */\r\n\r\nnamespace CDP.UI {\r\n\r\n    import Framework = CDP.Framework;\r\n\r\n    const TAG: string = \"[CDP.UI.BasePage] \";\r\n\r\n    /**\r\n     * @interface BasePageOptions\r\n     * @brief BasePage に指定するオプションインターフェイス\r\n     */\r\n    export interface BasePageOptions<TModel extends Framework.Model = Framework.Model> extends Framework.PageConstructOptions, BaseHeaderViewOptions<TModel> {\r\n        baseHeader?: new (owner: Framework.IPage, options?: BaseHeaderViewOptions<TModel>) => BaseHeaderView<TModel>;   //!< Header 機能を提供する基底インスタンス\r\n        backCommandHandler?: string;                //!< \"戻る\" コマンドハンドラメソッド名.                             default: onPageBack\r\n        domExtensionOptions?: DomExtensionOptions;  //!< DOM拡張に渡すオプション. null|undefined を指定すると拡張しない default: {}\r\n    }\r\n\r\n    //__________________________________________________________________________________________________________//\r\n\r\n    /**\r\n     * @class BasePage\r\n     * @brief Header を備える Page クラス\r\n     */\r\n    export class BasePage<TModel extends Framework.Model = Framework.Model> extends Framework.Page {\r\n\r\n        private _baseHeader: BaseHeaderView<TModel>;    //!< ヘッダクラス\r\n\r\n        /**\r\n         * constructor\r\n         *\r\n         * @param {String}          url       [in] ページ URL\r\n         * @param {String}          id        [in] ページ ID\r\n         * @param {BasePageOptions} [options] [in] オプション\r\n         */\r\n        constructor(url: string, id: string, private _options?: BasePageOptions<TModel>) {\r\n            super(url, id, _options = $.extend({\r\n                baseHeader: BaseHeaderView,\r\n                backCommandHandler: \"onPageBack\",\r\n                backCommandKind: \"pageback\",\r\n                domExtensionOptions: {},\r\n            }, _options));\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Override: Framework Page\r\n\r\n        /**\r\n         * jQM event: \"pagebeforecreate\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         */\r\n        onPageBeforeCreate(event: JQuery.Event): void {\r\n            if (this._options.baseHeader) {\r\n                this._baseHeader = new this._options.baseHeader(this, this._options);\r\n                this._baseHeader.create();\r\n            }\r\n            super.onPageBeforeCreate(event);\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagecreate\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         */\r\n        onPageInit(event: JQuery.Event): void {\r\n            if (null != this._options.domExtensionOptions) {\r\n                ExtensionManager.applyDomExtension(this.$page, this._options.domExtensionOptions);\r\n            }\r\n            super.onPageInit(event);\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagebeforeshow\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         * @param data  {ShowEventData}     [in] 付加情報\r\n         */\r\n        onPageBeforeShow(event: JQuery.Event, data?: Framework.ShowEventData): void {\r\n            if (this._baseHeader) {\r\n                this._baseHeader.activate();\r\n            }\r\n            super.onPageBeforeShow(event, data);\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagebeforehide\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         * @param data  {HideEventData}     [in] 付加情報\r\n         */\r\n        onPageBeforeHide(event: JQuery.Event, data?: Framework.HideEventData): void {\r\n            if (this._baseHeader) {\r\n                this._baseHeader.inactivate();\r\n            }\r\n            super.onPageBeforeHide(event, data);\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pageremove\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         */\r\n        onPageRemove(event: JQuery.Event): void {\r\n            if (this._baseHeader) {\r\n                this._baseHeader.release();\r\n                this._baseHeader = null;\r\n            }\r\n            super.onPageRemove(event);\r\n        }\r\n\r\n        /**\r\n         * H/W Back Button ハンドラ\r\n         *\r\n         * @param  event {JQuery.Event} [in] event object\r\n         * @return {Boolean} true: 既定の処理を行わない / false: 既定の処理を行う\r\n         */\r\n        onHardwareBackButton(event?: JQuery.Event): boolean {\r\n            let retval = super.onHardwareBackButton(event);\r\n            if (!retval) {\r\n                retval = this.onCommand(event, this._options.backCommandKind);\r\n            }\r\n            return retval;\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Override: Custom Event\r\n\r\n        /**\r\n         * \"戻る\" event 発行時にコールされる\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         * @return {Boolean} true: 既定の処理を行わない / false: 既定の処理を行う\r\n         */\r\n        onCommand(event: JQuery.Event, kind: string): boolean {\r\n            if (this._options.backCommandKind === kind) {\r\n                if (this._owner && this._owner[this._options.backCommandHandler]) {\r\n                    return this._owner[this._options.backCommandHandler](event);\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n}\r\n","/* tslint:disable:max-line-length */\r\n\r\nnamespace CDP.UI {\r\n    import Promise      = CDP.Promise;\r\n    import Framework    = CDP.Framework;\r\n\r\n    const TAG = \"[CDP.UI.PageView] \";\r\n\r\n    /**\r\n     * @interface PageViewConstructOptions\r\n     * @brief Router への登録情報と Backbone.View への初期化情報を格納するインターフェイスクラス\r\n     */\r\n    export interface PageViewConstructOptions<TModel extends Framework.Model = Framework.Model> extends BasePageOptions<TModel> {\r\n        basePage?: new (url: string, id: string, options?: Framework.PageConstructOptions) => Framework.Page;    //!< Page 機能を提供する基底インスタンス\r\n    }\r\n\r\n    /* tslint:disable:no-use-before-declare */\r\n    /**\r\n     * @interface PageContainerViewOptions\r\n     * @brief PageContainer のオプション\r\n     */\r\n    export interface PageContainerViewOptions<TModel extends Framework.Model = Framework.Model> extends Framework.ViewOptions<TModel> {\r\n        owner: PageView;\r\n        $el?: JQuery;\r\n    }\r\n\r\n    /**\r\n     * @class PageContainerView\r\n     * @brief PageView と連携可能な コンテナビュークラス\r\n     */\r\n    export class PageContainerView<TModel extends Framework.Model = Framework.Model> extends Framework.View<TModel> {\r\n\r\n        private _owner: PageView = null;\r\n\r\n        /**\r\n         * constructor\r\n         */\r\n        constructor(options: PageContainerViewOptions<TModel>) {\r\n            super(options);\r\n            this._owner = options.owner;\r\n            if (options.$el) {\r\n                const delegates = (<any>this).events ? true : false;\r\n                this.setElement(options.$el, delegates);\r\n            }\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // short cut methods\r\n\r\n        //! Owner 取得\r\n        get owner(): PageView {\r\n            return this._owner;\r\n        }\r\n    }\r\n    /* tslint:enable:no-use-before-declare */\r\n\r\n    //___________________________________________________________________________________________________________________//\r\n\r\n    /**\r\n     * @class PageView\r\n     * @brief CDP.Framework.Page と Backbone.View の両方の機能を提供するページの基底クラス\r\n     */\r\n    export class PageView<TModel extends Framework.Model = Framework.Model> extends Framework.View<TModel> implements Framework.IPage, IStatusManager {\r\n\r\n        protected _pageOptions: PageViewConstructOptions<TModel> = null;\r\n        protected _basePage: Framework.Page = null;\r\n        private _statusMgr: StatusManager = null;\r\n\r\n        /**\r\n         * constructor\r\n         *\r\n         * @param url     {String}                   [in] ページ URL\r\n         * @param id      {String}                   [in] ページ ID\r\n         * @param options {PageViewConstructOptions} [in] オプション\r\n         */\r\n        constructor(url: string, id: string, options?: PageViewConstructOptions<TModel>) {\r\n            super(options);\r\n\r\n            // PageView 設定\r\n            this._pageOptions = $.extend({}, { owner: this }, options);\r\n            this._basePage = this._pageOptions.basePage ? new this._pageOptions.basePage(url, id, this._pageOptions) : new BasePage(url, id, this._pageOptions);\r\n\r\n            // StatusManager\r\n            this._statusMgr = new StatusManager();\r\n            // Backbone.View 用の初期化\r\n            const delegates = (<any>this).events ? true : false;\r\n            this.setElement(this.$page, delegates);\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Implements: IStatusManager 状態管理\r\n\r\n        /**\r\n         * 状態変数の参照カウントのインクリメント\r\n         *\r\n         * @param status {String} [in] 状態識別子\r\n         */\r\n        statusAddRef(status: string): number {\r\n            return this._statusMgr.statusAddRef(status);\r\n        }\r\n\r\n        /**\r\n         * 状態変数の参照カウントのデクリメント\r\n         *\r\n         * @param status {String} [in] 状態識別子\r\n         */\r\n        statusRelease(status: string): number {\r\n            return this._statusMgr.statusRelease(status);\r\n        }\r\n\r\n        /**\r\n         * 処理スコープ毎に状態変数を設定\r\n         *\r\n         * @param status   {String}   [in] 状態識別子\r\n         * @param callback {Function} [in] 処理コールバック\r\n         */\r\n        statusScope(status: string, callback: () => void): void {\r\n            this._statusMgr.statusScope(status, callback);\r\n        }\r\n\r\n        /**\r\n         * 指定した状態中であるか確認\r\n         *\r\n         * @param status {String}   [in] 状態識別子\r\n         * @return {Boolean} true: 状態内 / false: 状態外\r\n         */\r\n        isStatusIn(status: string): boolean {\r\n            return this._statusMgr.isStatusIn(status);\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // IPage stub stuff.\r\n\r\n        get active(): boolean                   { return this._basePage.active;                     }\r\n        get url(): string                       { return this._basePage.url;                        }\r\n        get id(): string                        { return this._basePage ? this._basePage.id : null; }\r\n        get $page(): JQuery                     { return this._basePage.$page;                      }\r\n        get $header(): JQuery                   { return this._basePage.$header;                    }\r\n        get $footer(): JQuery                   { return this._basePage.$footer;                    }\r\n        get intent(): Framework.Intent          { return this._basePage.intent;                     }\r\n        set intent(newIntent: Framework.Intent) { this._basePage.intent = newIntent;                }\r\n\r\n        /**\r\n         * Orientation の変更を受信\r\n         *\r\n         * @param newOrientation {Orientation} [in] new orientation code.\r\n         */\r\n        onOrientationChanged(newOrientation: Framework.Orientation): void {\r\n            // Override\r\n        }\r\n\r\n        /**\r\n         * H/W Back Button ハンドラ\r\n         *\r\n         * @param  event {JQuery.Event} [in] event object\r\n         * @return {Boolean} true: 既定の処理を行わない / false: 既定の処理を行う\r\n         */\r\n        onHardwareBackButton(event?: JQuery.Event): boolean {\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Router \"before route change\" ハンドラ\r\n         * ページ遷移直前に非同期処理を行うことが可能\r\n         *\r\n         * @return {IPromiseBase} Promise オブジェクト\r\n         */\r\n        onBeforeRouteChange(): IPromiseBase<any> {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        /**\r\n         * 汎用コマンドを受信\r\n         *\r\n         * @param  event {JQuery.Event} [in] event object\r\n         * @param  event {kind}              [in] command kind string\r\n         * @return {Boolean} true: 既定の処理を行わない / false: 既定の処理を行う\r\n         */\r\n        onCommand(event?: JQuery.Event, kind?: string): boolean {\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * 最初の OnPageInit() のときにのみコールされる\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         */\r\n        onInitialize(event: JQuery.Event): void {\r\n            // Override\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagebeforecreate\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         */\r\n        onPageBeforeCreate(event: JQuery.Event): void {\r\n            this.setElement(this.$page, true);\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagecreate\" (旧:\"pageinit\") に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         */\r\n        onPageInit(event: JQuery.Event): void {\r\n            // Override\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagebeforeshow\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         * @param data  {ShowEventData}     [in] 付加情報\r\n         */\r\n        onPageBeforeShow(event: JQuery.Event, data?: Framework.ShowEventData): void {\r\n            // Override\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagecontainershow\" (旧:\"pageshow\") に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         * @param data  {ShowEventData}     [in] 付加情報\r\n         */\r\n        onPageShow(event: JQuery.Event, data?: Framework.ShowEventData): void {\r\n            // Override\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagebeforehide\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         * @param data  {HideEventData}     [in] 付加情報\r\n         */\r\n        onPageBeforeHide(event: JQuery.Event, data?: Framework.HideEventData): void {\r\n            // Override\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagecontainerhide\" (旧:\"pagehide\") に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         * @param data  {HideEventData}     [in] 付加情報\r\n         */\r\n        onPageHide(event: JQuery.Event, data?: Framework.HideEventData): void {\r\n            // Override\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pageremove\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         */\r\n        onPageRemove(event: JQuery.Event): void {\r\n            this.remove();\r\n            this.el  = null;\r\n            this.$el = null;\r\n        }\r\n    }\r\n}\r\n","/* tslint:disable:max-line-length */\r\n\r\nnamespace CDP.UI {\r\n\r\n    import Model = CDP.Framework.Model;\r\n\r\n    const TAG = \"[CDP.UI.PageListView] \";\r\n\r\n    /**\r\n     * @interface PageListViewConstructOptions\r\n     * @brief PageListView への初期化情報を格納するインターフェイスクラス\r\n     */\r\n    export interface PageListViewConstructOptions<TModel extends Model = Model> extends ListViewOptions, PageViewConstructOptions<TModel> {\r\n        autoDestoryElement?: boolean;        //!< ページ遷移前に List Element を破棄する場合は true を指定\r\n    }\r\n\r\n    /**\r\n     * @class PageListView\r\n     * @brief 仮想リストビュー機能を持つ PageView クラス\r\n     */\r\n    export class PageListView<TModel extends Model = Model> extends PageView<TModel> implements IListView {\r\n\r\n        private _scrollMgr: ScrollManager = null;    //!< scroll コアロジック\r\n        private _needRebuild: boolean = false;       //!< ページ表示時に rebuild() をコールするための内部変数\r\n\r\n        /**\r\n         * constructor\r\n         *\r\n         * @param url     {String}                       [in] page template に使用する URL\r\n         * @param id      {String}                       [in] page に振られた ID\r\n         * @param options {PageListViewConstructOptions} [in] オプション\r\n         */\r\n        constructor(url: string, id: string, options?: PageListViewConstructOptions<TModel>) {\r\n            super(url, id, $.extend({}, {\r\n                autoDestoryElement: false,\r\n            }, options));\r\n            this._scrollMgr = new ScrollManager(options);\r\n        }\r\n\r\n        //! rebuild() のスケジューリング\r\n        public reserveRebuild(): void {\r\n            this._needRebuild = true;\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Override: PageView\r\n\r\n        //! Orientation の変更検知\r\n        onOrientationChanged(newOrientation: Framework.Orientation): void {\r\n            this._scrollMgr.setBaseHeight(this.getPageBaseHeight());\r\n        }\r\n\r\n        //! ページ遷移直前イベント処理\r\n        onBeforeRouteChange(): IPromiseBase<any> {\r\n            if ((<PageListViewConstructOptions<TModel>>this._pageOptions).autoDestoryElement) {\r\n                this._scrollMgr.destroy();\r\n            }\r\n            return super.onBeforeRouteChange();\r\n        }\r\n\r\n        //! jQM event: \"pagebeforeshow\" に対応\r\n        onPageBeforeShow(event: JQuery.Event, data?: Framework.ShowEventData): void {\r\n            super.onPageBeforeShow(event, data);\r\n            this._scrollMgr.initialize(this.$page, this.getPageBaseHeight());\r\n        }\r\n\r\n        //! jQM event: \"pagecontainershow\" (旧:\"pageshow\") に対応\r\n        onPageShow(event: JQuery.Event, data?: Framework.ShowEventData): void {\r\n            super.onPageShow(event, data);\r\n            this._scrollMgr.setBaseHeight(this.getPageBaseHeight());\r\n            if (this._needRebuild) {\r\n                this.rebuild();\r\n                this._needRebuild = false;\r\n            }\r\n        }\r\n\r\n        //! jQM event: \"pageremove\" に対応\r\n        onPageRemove(event: JQuery.Event): void {\r\n            super.onPageRemove(event);\r\n            this.release();\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Implements: IListView Profile 管理\r\n\r\n        //! 初期化済みか判定\r\n        isInitialized(): boolean {\r\n            return this._scrollMgr.isInitialized();\r\n        }\r\n\r\n        //! プロパティを指定して、ListItem を管理\r\n        addItem(\r\n            height: number,\r\n            initializer: new (options?: any) => BaseListItemView,\r\n            info: any,\r\n            insertTo?: number\r\n            ): void {\r\n            this._addLine(new LineProfile(this._scrollMgr, Math.floor(height), initializer, info), insertTo);\r\n        }\r\n\r\n        //! 指定した Item を削除\r\n        removeItem(index: number, size?: number, delay?: number): void;\r\n        removeItem(index: number[], delay?: number): void;\r\n        removeItem(index: any, arg2?: number, arg3?: number): void {\r\n            this._scrollMgr.removeItem(index, arg2, arg3);\r\n        }\r\n\r\n        //! 指定した Item に設定した情報を取得\r\n        getItemInfo(target: number): any;\r\n        getItemInfo(target: JQuery.Event): any;\r\n        getItemInfo(target: any): any {\r\n            return this._scrollMgr.getItemInfo(target);\r\n        }\r\n\r\n        //! アクティブページを更新\r\n        refresh(): void {\r\n            this._scrollMgr.refresh();\r\n        }\r\n\r\n        //! 未アサインページを構築\r\n        update(): void {\r\n            this._scrollMgr.update();\r\n        }\r\n\r\n        //! ページアサインを再構成\r\n        rebuild(): void {\r\n            this._scrollMgr.rebuild();\r\n        }\r\n\r\n        //! 管轄データを破棄\r\n        release(): void {\r\n            this._scrollMgr.release();\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Implements: IListView Profile Backup / Restore\r\n\r\n        //! 内部データをバックアップ\r\n        backup(key: string): boolean {\r\n            return this._scrollMgr.backup(key);\r\n        }\r\n\r\n        //! 内部データをリストア\r\n        restore(key: string, rebuild: boolean = true): boolean {\r\n            const retval = this._scrollMgr.restore(key, rebuild);\r\n            if (retval && !rebuild) {\r\n                this.reserveRebuild();\r\n            }\r\n            return retval;\r\n        }\r\n\r\n        //! バックアップデータの有無\r\n        hasBackup(key: string): boolean {\r\n            return this._scrollMgr.hasBackup(key);\r\n        }\r\n\r\n        //! バックアップデータの破棄\r\n        clearBackup(key?: string): boolean {\r\n            return this._scrollMgr.clearBackup(key);\r\n        }\r\n\r\n        //! バックアップデータにアクセス\r\n        get backupData(): any {\r\n            return this._scrollMgr.backupData;\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Implements: IListView Scroll\r\n\r\n        //! スクロールイベントハンドラ設定/解除\r\n        setScrollHandler(handler: (event: JQuery.Event) => void, on: boolean): void {\r\n            this._scrollMgr.setScrollHandler(handler, on);\r\n        }\r\n\r\n        //! スクロール終了イベントハンドラ設定/解除\r\n        setScrollStopHandler(handler: (event: JQuery.Event) => void, on: boolean): void {\r\n            this._scrollMgr.setScrollStopHandler(handler, on);\r\n        }\r\n\r\n        //! スクロール位置を取得\r\n        getScrollPos(): number {\r\n            return this._scrollMgr.getScrollPos();\r\n        }\r\n\r\n        //! スクロール位置の最大値を取得\r\n        getScrollPosMax(): number {\r\n            return this._scrollMgr.getScrollPosMax();\r\n        }\r\n\r\n        //! スクロール位置を指定\r\n        scrollTo(pos: number, animate?: boolean, time?: number): void {\r\n            this._scrollMgr.scrollTo(pos, animate, time);\r\n        }\r\n\r\n        //! 指定された ListItemView の表示を保証\r\n        ensureVisible(index: number, options?: EnsureVisibleOptions): void {\r\n            this._scrollMgr.ensureVisible(index, options);\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Implements: IListView Properties\r\n\r\n        //! core framework access\r\n        get core(): IListViewFramework {\r\n            return this._scrollMgr;\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Implements: IListView Internal I/F\r\n\r\n        //! 登録 framework が使用する\r\n        _addLine(_line: any, insertTo?: number): void {\r\n            this._scrollMgr._addLine(_line, insertTo);\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // private method:\r\n\r\n        //! ページの基準値を取得\r\n        private getPageBaseHeight(): number {\r\n            return $(window).height() - parseInt(this.$page.css(\"padding-top\"), 10);\r\n        }\r\n    }\r\n}\r\n","namespace CDP.UI {\r\n\r\n    import Model = CDP.Framework.Model;\r\n\r\n    const TAG = \"[CDP.UI.PageExpandableListView] \";\r\n\r\n    /**\r\n     * @class PageExpandableListView\r\n     * @brief 開閉リストビュー機能を持つ PageView クラス\r\n     */\r\n    export class PageExpandableListView<TModel extends Model = Model> extends PageListView<TModel> implements IExpandableListView {\r\n\r\n        private _expandManager: ExpandManager = null;\r\n\r\n        /**\r\n         * constructor\r\n         *\r\n         * @param url     {String}                       [in] page template に使用する URL\r\n         * @param id      {String}                       [in] page に振られた ID\r\n         * @param options {PageListViewConstructOptions} [in] オプション\r\n         */\r\n        constructor(url: string, id: string, options?: PageListViewConstructOptions<TModel>) {\r\n            super(url, id, options);\r\n            this._expandManager = new ExpandManager(this);\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Implements: IExpandableListView\r\n\r\n        //! 新規 GroupProfile を作成\r\n        newGroup(id?: string): GroupProfile {\r\n            return this._expandManager.newGroup(id);\r\n        }\r\n\r\n        //! 登録済み Group を取得\r\n        getGroup(id: string): GroupProfile {\r\n            return this._expandManager.getGroup(id);\r\n        }\r\n\r\n        //! 第1階層の Group 登録\r\n        registerTopGroup(topGroup: GroupProfile): void {\r\n            this._expandManager.registerTopGroup(topGroup);\r\n        }\r\n\r\n        //! 第1階層の Group を取得\r\n        getTopGroups(): GroupProfile[] {\r\n            return this._expandManager.getTopGroups();\r\n        }\r\n\r\n        //! すべてのグループを展開 (1階層)\r\n        expandAll(): void {\r\n            this._expandManager.expandAll();\r\n        }\r\n\r\n        //! すべてのグループを収束 (1階層)\r\n        collapseAll(delay?: number): void {\r\n            this._expandManager.collapseAll(delay);\r\n        }\r\n\r\n        //! 展開中か判定\r\n        isExpanding(): boolean {\r\n            return this._expandManager.isExpanding();\r\n        }\r\n\r\n        //! 収束中か判定\r\n        isCollapsing(): boolean {\r\n            return this._expandManager.isCollapsing();\r\n        }\r\n\r\n        //! 開閉中か判定\r\n        isSwitching(): boolean {\r\n            return this._expandManager.isSwitching();\r\n        }\r\n\r\n        //! layout key を取得\r\n        get layoutKey(): string {\r\n            return this._expandManager.layoutKey;\r\n        }\r\n\r\n        //! layout key を設定\r\n        set layoutKey(key: string) {\r\n            this._expandManager.layoutKey = key;\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Override: PageListView\r\n\r\n        //! データを破棄\r\n        release(): void {\r\n            super.release();\r\n            this._expandManager.release();\r\n        }\r\n\r\n        //! 内部データをバックアップ\r\n        backup(key: string): boolean {\r\n            return this._expandManager.backup(key);\r\n        }\r\n\r\n        //! 内部データをリストア\r\n        restore(key: string, rebuild: boolean = true): boolean {\r\n            return this._expandManager.restore(key, rebuild);\r\n        }\r\n    }\r\n}\r\n","/**\r\n * jQuery plugin definition\r\n */\r\ninterface JQuery {\r\n    ripple(options?: CDP.UI.DomExtensionOptions): JQuery;\r\n}\r\n\r\nnamespace CDP.UI.Extension {\r\n\r\n    import Framework = CDP.Framework;\r\n\r\n    // jQuery plugin\r\n    $.fn.ripple = function (options?: DomExtensionOptions): JQuery {\r\n        const $el = $(this);\r\n        if ($el.length <= 0) {\r\n            return $el;\r\n        }\r\n        return $el.on(Framework.Patch.s_vclickEvent, function (event: JQuery.Event) {\r\n            const surface = $(this);\r\n\r\n            // create surface if it doesn't exist\r\n            if (surface.find(\".ui-ripple-ink\").length === 0) {\r\n                surface.prepend(\"<div class='ui-ripple-ink'></div>\");\r\n            }\r\n\r\n            let ink = surface.find(\".ui-ripple-ink\");\r\n\r\n            // stop the previous animation\r\n            ink.removeClass(\"ui-ripple-animate\");\r\n\r\n            // ink size:\r\n            if (!ink.height() && !ink.width()) {\r\n                const d = Math.max(surface.outerWidth(), surface.outerHeight());\r\n                ink.css({ height: d, width: d });\r\n            }\r\n\r\n            const x = event.pageX - surface.offset().left - (ink.width() / 2);\r\n            const y = event.pageY - surface.offset().top - (ink.height() / 2);\r\n\r\n            const rippleColor = surface.data(\"ripple-color\");\r\n\r\n            // animation end handler\r\n            const ANIMATION_END_EVENT = \"animationend webkitAnimationEnd\";\r\n            ink.on(ANIMATION_END_EVENT, function (ev: JQuery.Event) {\r\n                ink.off();\r\n                ink.removeClass(\"ui-ripple-animate\");\r\n                ink = null;\r\n            });\r\n\r\n            // set the position and add class .animate\r\n            ink.css({\r\n                top: y + \"px\",\r\n                left: x + \"px\",\r\n                background: rippleColor\r\n            }).addClass(\"ui-ripple-animate\");\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Material Design Ripple 拡張\r\n     *\r\n     * @param {jQuery}              $ui       [in] 検索対象の jQuery オブジェクト\r\n     * @param {DomExtensionOptions} [options] [in] オプション\r\n     */\r\n    function applyDomExtension($ui: JQuery, options?: DomExtensionOptions): JQuery {\r\n        const NO_RIPPLE_CLASS = [\r\n            \".ui-ripple-none\",\r\n            \".ui-flipswitch-on\",\r\n            \".ui-slider-handle\",\r\n            \".ui-input-clear\",\r\n        ];\r\n\r\n        let selector = \".ui-btn\";\r\n        if ($ui.hasClass(\"ui-page\")) {\r\n            selector = \".ui-content .ui-btn\"; // header は自動 ripple 化対象外\r\n        }\r\n\r\n        $ui.find(selector)\r\n            .filter((index, elem) => {\r\n                const $elem = $(elem);\r\n                if ($elem.is(NO_RIPPLE_CLASS.join(\",\"))) {\r\n                    return false;\r\n                } else {\r\n                    return true;\r\n                }\r\n            })\r\n            .addClass(\"ui-ripple\");\r\n\r\n        // ripplify\r\n//        $ui.find(\".ui-ripple\").ripple(options);\r\n        $ui.find(\".ui-ripple\")\r\n            .each((index: number, elem: Element) => {\r\n                $(elem).ripple(options);\r\n            });\r\n        return $ui;\r\n    }\r\n\r\n    // 登録\r\n    ExtensionManager.registerDomExtension(applyDomExtension);\r\n}\r\n","/**\r\n * jQuery plugin definition\r\n */\r\ninterface JQuery {\r\n    spinner(options?: CDP.UI.DomExtensionOptions | \"refresh\"): JQuery;\r\n}\r\n\r\nnamespace CDP.UI.Extension {\r\n\r\n    import Template = CDP.Tools.Template;\r\n    import JST      = CDP.Tools.JST;\r\n\r\n    let _template: JST;\r\n\r\n    // jQuery plugin\r\n    $.fn.spinner = function (options?: DomExtensionOptions | \"refresh\") {\r\n        if (\"string\" === typeof options) {\r\n            return refresh($(this));\r\n        } else {\r\n            return spinnerify($(this), options);\r\n        }\r\n    };\r\n\r\n    function spinnerify($target: JQuery, options?: DomExtensionOptions): JQuery {\r\n        if ($target.length <= 0) {\r\n            return $target;\r\n        }\r\n\r\n        if (!_template) {\r\n            _template = Template.getJST(`\r\n                <script type=\"text/template\">\r\n                    <span class=\"ui-spinner-base\">\r\n                        <span class=\"ui-spinner-inner\">\r\n                            <span class=\"ui-spinner-inner-gap\" {{borderTop}}></span>\r\n                            <span class=\"ui-spinner-inner-left\">\r\n                                <span class=\"ui-spinner-inner-half-circle\" {{border}}></span>\r\n                            </span>\r\n                            <span class=\"ui-spinner-inner-right\">\r\n                                <span class=\"ui-spinner-inner-half-circle\" {{border}}></span>\r\n                            </span>\r\n                        </span>\r\n                    </span>\r\n                </script>\r\n            `);\r\n        }\r\n\r\n        const makeTemplateParam = (clr: string): object => {\r\n            return {\r\n                borderTop: \"style=border-top-color:\" + clr + \";\",\r\n                border: \"style=border-color:\" + clr + \";\",\r\n            };\r\n        };\r\n\r\n        const color = $target.data(\"spinner-color\");\r\n        let param = null;\r\n        if (color) {\r\n            $target.css({ \"background-color\": color });\r\n            param = makeTemplateParam(color);\r\n        }\r\n        $target.append(_template(param));\r\n\r\n        return refresh($target);\r\n    }\r\n\r\n    // iOS 10.2+ SVG SMIL アニメーションが 2回目以降動かない問題の対策\r\n    // data:image/svg+xml;<cache bust string>;base64,... とすることで data-url にも cache busting が有効になる\r\n    function refresh($target: JQuery): JQuery {\r\n        const PREFIX = [\"-webkit-\", \"\"];\r\n\r\n        const valid = (prop) => {\r\n            return (prop && \"none\" !== prop);\r\n        };\r\n\r\n        let dataUrl: string;\r\n        for (let i = 0, n = PREFIX.length; i < n; i++) {\r\n            if (!valid(dataUrl)) {\r\n                dataUrl = $target.css(PREFIX[i] + \"mask-image\");\r\n                if (valid(dataUrl)) {\r\n                    // iOS では url(data***); 内に '\"' は入らない\r\n                    const match = dataUrl.match(/(url\\(data:image\\/svg\\+xml;)([\\s\\S]*)?(base64,[\\s\\S]*\\))/);\r\n                    if (match) {\r\n                        dataUrl = `${match[1]}bust=${Date.now().toString(36)};${match[3]}`;\r\n                    } else {\r\n                        dataUrl = null;\r\n                    }\r\n                }\r\n            }\r\n            if (valid(dataUrl)) {\r\n                $target.css(PREFIX[i] + \"mask-image\", dataUrl);\r\n            }\r\n        }\r\n\r\n        return $target;\r\n    }\r\n\r\n    /**\r\n     * Material Design Spinner 拡張\r\n     *\r\n     * @param {jQuery}              $ui       [in] 検索対象の jQuery オブジェクト\r\n     * @param {DomExtensionOptions} [options] [in] オプション\r\n     */\r\n    function applyDomExtension($ui: JQuery, options?: DomExtensionOptions): JQuery {\r\n        $ui.find(\".ui-spinner, .ui-icon-loading\")\r\n            .each((index: number, elem: Element) => {\r\n                $(elem).spinner(options);\r\n            });\r\n        return $ui;\r\n    }\r\n\r\n    // 登録\r\n    ExtensionManager.registerDomExtension(applyDomExtension);\r\n}\r\n","namespace CDP.UI.Extension {\r\n\r\n    /**\r\n     * Text Input 用 Floating Label 拡張\r\n     *\r\n     * @param {jQuery}              $ui       [in] 検索対象の jQuery オブジェクト\r\n     * @param {DomExtensionOptions} [options] [in] オプション\r\n     */\r\n    function applyDomExtension($ui: JQuery, options?: DomExtensionOptions): JQuery {\r\n        const update = (elem: Element, floating: boolean) => {\r\n            const $elem = $(elem);\r\n            if (floating) {\r\n                $elem.addClass(\"ui-float-label-floating\");\r\n            } else {\r\n                $elem.removeClass(\"ui-float-label-floating\");\r\n            }\r\n        };\r\n\r\n        const floatingify = (elem: Element) => {\r\n            const id = $(elem).attr(\"for\");\r\n            const $input = $ui.find(\"#\" + id);\r\n            if (\"search\" === $input.jqmData(\"type\")) {\r\n                $(elem).addClass(\"ui-float-label-has-icon\");\r\n            }\r\n            update(elem, !!$input.val());\r\n            $input.on(\"keyup change input focus blur cut paste\", (event: JQuery.Event) => {\r\n                update(elem, !!$(event.target).val());\r\n            });\r\n        };\r\n\r\n        $ui.find(\"label.ui-float-label, .ui-float-label label\")\r\n            .each((index: number, elem: Element) => {\r\n                floatingify(elem);\r\n            });\r\n\r\n        return $ui;\r\n    }\r\n\r\n    // 登録\r\n    ExtensionManager.registerDomExtension(applyDomExtension);\r\n}\r\n","namespace CDP.UI.Extension {\r\n\r\n    import Framework = CDP.Framework;\r\n\r\n    /**\r\n     * jQuery Mobile Flip Switch 拡張\r\n     *\r\n     * @param {jQuery}              $ui       [in] 検索対象の jQuery オブジェクト\r\n     * @param {DomExtensionOptions} [options] [in] オプション\r\n     */\r\n    function applyDomExtension($ui: JQuery, options?: DomExtensionOptions): JQuery {\r\n        /*\r\n         * flipswitch に紐づく label は OS によって event 発行形式が異なるためフックして独自イベントで対応する.\r\n         * また flipswitch は内部で click を発行しているが、vclick に変更する.\r\n         */\r\n\r\n        const _getAllSwitches = (): JQuery => {\r\n            return $ui.find(\".ui-flipswitch\");\r\n        };\r\n\r\n        const _getInputFromSwitch = ($switch: JQuery): JQuery => {\r\n            const $input = $switch.find(\"input\");\r\n            if ($input.length) {\r\n                return $input;\r\n            }\r\n            const $select = $switch.find(\"select\");\r\n            if ($select.length) {\r\n                return $select;\r\n            }\r\n            return null;\r\n        };\r\n\r\n        const _change = ($input: JQuery, to: boolean): void => {\r\n            if ($input) {\r\n                if (\"INPUT\" === $input[0].nodeName) {\r\n                    $input.prop(\"checked\", to).flipswitch(\"refresh\");\r\n                } else if (\"SELECT\" === $input[0].nodeName) {\r\n                    $input.val(to ? \"on\" : \"off\").flipswitch(\"refresh\");\r\n                }\r\n            }\r\n        };\r\n\r\n        const _getLabelsFromSwitch = ($switch: JQuery): JQuery => {\r\n            const $input = _getInputFromSwitch($switch);\r\n            if ($input) {\r\n                const labels = (<any>$input[0]).labels;\r\n                if (labels) {\r\n                    return $(labels);\r\n                }\r\n            }\r\n            return $();\r\n        };\r\n\r\n        const _getSwitchFromLabel = ($label: JQuery): JQuery => {\r\n            const name = $label.attr(\"for\");\r\n            return _getAllSwitches().find(\"[name='\" + name + \"']\");\r\n        };\r\n\r\n        _getAllSwitches()\r\n            .on(\"vclick _change_flipswich\", (event: JQuery.Event) => {\r\n                const $switch = $(event.currentTarget);\r\n                const $target = $(event.target);\r\n                const $input = _getInputFromSwitch($switch);\r\n                const changeTo = !$switch.hasClass(\"ui-flipswitch-active\");\r\n\r\n                if ($target.hasClass(\"ui-flipswitch-input\")) {\r\n                    _change($input, changeTo);\r\n                } else if ($target.hasClass(\"ui-flipswitch-on\")) {\r\n                    if (Framework.Platform.Mobile && Framework.Patch.isSupportedVclick()) {\r\n                        _change($input, changeTo);\r\n                        event.preventDefault();\r\n                    }\r\n                }\r\n            })\r\n            .each((index: number, flipswitch: Element) => {\r\n                _getLabelsFromSwitch($(flipswitch))\r\n                    .on(\"vclick\", (event: JQuery.Event) => {\r\n                        const $switch = _getSwitchFromLabel($(event.target));\r\n                        if (!$switch.parent().hasClass(\"ui-state-disabled\")) {\r\n                            $switch.trigger(\"_change_flipswich\");\r\n                        }\r\n                        event.preventDefault();\r\n                    });\r\n            });\r\n\r\n        return $ui;\r\n    }\r\n\r\n    // 登録\r\n    ExtensionManager.registerDomExtension(applyDomExtension);\r\n}\r\n","namespace CDP.UI.Extension {\r\n\r\n    /**\r\n     * jQuery Mobile Slider 拡張\r\n     *\r\n     * @param {jQuery}              $ui       [in] 検索対象の jQuery オブジェクト\r\n     * @param {DomExtensionOptions} [options] [in] オプション\r\n     */\r\n    function applyDomExtension($ui: JQuery, options?: DomExtensionOptions): JQuery {\r\n        $ui.find(\".ui-slider-input\")\r\n            .on(\"slidestop\", (event: JQuery.Event) => {\r\n                const $handles = $(event.currentTarget)\r\n                    .parent()\r\n                    .find(\".ui-slider-handle\");\r\n                $handles.blur();\r\n            });\r\n        return $ui;\r\n    }\r\n\r\n    // 登録\r\n    ExtensionManager.registerDomExtension(applyDomExtension);\r\n}\r\n","namespace CDP.UI.Extension {\r\n\r\n    //! iScroll.click patch\r\n    const patch_IScroll_utils_click = function (event: Event): void {\r\n        const target: any = event.target;\r\n        const e: any = event;\r\n        let ev: MouseEvent;\r\n\r\n        // [CDP modified]: set target.clientX.\r\n        if (null == target.clientX || null == target.clientY) {\r\n            if (null != e.pageX && null != e.pageY) {\r\n                target.clientX = e.pageX;\r\n                target.clientY = e.pageY;\r\n            } else if (e.changedTouches && e.changedTouches[0]) {\r\n                target.clientX = e.changedTouches[0].pageX;\r\n                target.clientY = e.changedTouches[0].pageY;\r\n            }\r\n        }\r\n\r\n        if (!(/(SELECT|INPUT|TEXTAREA)/i).test(target.tagName)) {\r\n            ev = document.createEvent(\"MouseEvents\");\r\n            ev.initMouseEvent(\"click\", true, true, e.view, 1,\r\n                target.screenX, target.screenY, target.clientX, target.clientY,\r\n                e.ctrlKey, e.altKey, e.shiftKey, e.metaKey,\r\n                0, null);\r\n\r\n            (<any>ev)._constructed = true;\r\n            target.dispatchEvent(ev);\r\n        }\r\n    };\r\n\r\n    let s_applied = false;\r\n\r\n    /**\r\n     * iScroll Patch 拡張\r\n     *\r\n     * @param {jQuery}              $ui       [in] 検索対象の jQuery オブジェクト\r\n     * @param {DomExtensionOptions} [options] [in] オプション\r\n     */\r\n    function applyPatch($ui: JQuery, options?: DomExtensionOptions): JQuery {\r\n        if (!s_applied && global.IScroll && global.IScroll.utils) {\r\n            global.IScroll.utils.click = patch_IScroll_utils_click;\r\n            s_applied = true;\r\n        }\r\n        return $ui;\r\n    }\r\n\r\n    // 登録\r\n    ExtensionManager.registerDomExtension(applyPatch);\r\n}\r\n"]}