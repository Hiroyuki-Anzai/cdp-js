// media queries break points definitions
$screen-extralarge-min: 1838px;
$screen-large-max:      $screen-extralarge-min - 1px;
$screen-large-min:      1280px;
$screen-mid-max:        $screen-large-min - 1px;
$screen-mid-min:        640px;
$screen-small-max:      $screen-mid-min - 1px;
$screen-small-min:      320px;
$screen-extrasmall-min: $screen-small-min - 1px;

$bp-table-threshold: 600px;
$bp-phone-threshold: $bp-table-threshold - 1px;

@mixin orientation-landscape {
    @media screen and (orientation: landscape) {
        @content;
    }
}

@mixin orientation-portrait {
    @media screen and (orientation: portrait) {
        @content;
    }
}

@mixin media($media-type) {
    @if $media-type == tablet {
        @media only screen and (min-width: $bp-table-threshold) and (min-height: $bp-table-threshold){
            @content;
        }
    }
    @else if $media-type == phone {
        @media only screen and (orientation: landscape) and (max-height: $bp-phone-threshold){
            @content;
        }
        @media only screen and (orientation: portrait) and (max-width: $bp-phone-threshold){
            @content;
        }
    }
}

// font
@mixin font-text-overflow($value: ellipsis) {
    @if $experimental-support-for-microsoft { -ms-text-overflow: $value; }
    @if $experimental-support-for-opera     {  -o-text-overflow: $value; }
    text-overflow: $value;
}

@mixin font-base($size, $align: left, $overflow: ellipsis) {
    text-align: $align;
    vertical-align: middle;
    @include font-text-overflow($overflow);
    font-size: $size;
    font-weight: normal;
}

@mixin font-base-set($align: left, $overflow: ellipsis, $font-base-size: 16px) {
    @include font-base($font-base-size, $align, $overflow);

    &.text-s {
        font-size: $font-base-size * 0.625; // 10px
    }
    &.text-m {
        font-size: $font-base-size * 0.75;  // 12px
    }
    &.text-l {
        font-size: $font-base-size * 0.875; // 14px
    }
    &.text-2l {
        font-size: $font-base-size * 1;     // 16px
    }
    &.text-2l-5l {
        font-size: $font-base-size * 1.125; // 18px
    }
    &.text-3l {
        font-size: $font-base-size * 1.5;   // 24px
    }
    &.text-4l {
        font-size: $font-base-size * 2;     // 32px
    }
}

// background image center crop.
@mixin background-center-crop {
    background-position: center;
    background-repeat: no-repeat;
    @include background-size(cover);
}

// get background drawable path with media queries.
@mixin background-drawable-url($root, $path) {
    @content;
    background-image: url("#{$root}mdpi/#{$path}");

    @media screen and (-webkit-min-device-pixel-ratio: 2) {
        background-image: url("#{$root}xxhdpi/#{$path}");
    }
    @media screen and (-webkit-max-device-pixel-ratio: 2) {
        background-image: url("#{$root}xhdpi/#{$path}");
    }
    @media screen and (-webkit-max-device-pixel-ratio: 1.5) {
        background-image: url("#{$root}hdpi/#{$path}");
    }
    @media screen and (-webkit-max-device-pixel-ratio: 1) {
        background-image: url("#{$root}mdpi/#{$path}");
    }
    @media screen and (-webkit-max-device-pixel-ratio: .75) {
        background-image: url("#{$root}mdpi/#{$path}");
    }
}

// shadow
@mixin linear-gradient-shadow($direction, $colors...) {
    @if $experimental-support-for-webkit    { background-image: -webkit-linear-gradient($direction, $colors); }
    @if $experimental-support-for-mozilla   { background-image:    -moz-linear-gradient($direction, $colors); }
    @if $experimental-support-for-microsoft { background-image:     -ms-linear-gradient($direction, $colors); }
    @if $experimental-support-for-opera     { background-image:      -o-linear-gradient($direction, $colors); }
    background-image:         linear-gradient($direction, $colors);
}

// css transition properties
@mixin hardware-accelerator-props {
    @include transform(scale3d(1,1,1) translate3d(0,0,0));
}

// fade-in
@mixin transition-fade($animation-interval, $timing-func) {
    @if $experimental-support-for-webkit    { -webkit-transition: opacity $animation-interval $timing-func, -webkit-transform $animation-interval $timing-func; }
    @if $experimental-support-for-mozilla   {    -moz-transition: opacity $animation-interval $timing-func,    -moz-transform $animation-interval $timing-func; }
    @if $experimental-support-for-microsoft {      -o-transition: opacity $animation-interval $timing-func,      -o-transform $animation-interval $timing-func; }
    transition: opacity $animation-interval $timing-func,   transform $animation-interval $timing-func;
}

@mixin fade-in-out($animation-interval, $timing-func) {
    opacity: 0;
    @include transition-fade($animation-interval, $timing-func);
    &.fade-in {
        opacity: 1;
    }
}

// fixed-aspect container
@mixin fixed-aspect-container($width, $height) {
    position:   relative;
    width:      100%;
    margin:     0;
    padding:    0;
    &:before {
        content:"";
        display: block;
        padding-top: ($height / $width) * 100%;
    }
}

// declare fixed-aspect layout
@mixin declare-fixed-aspect-layout($width, $height, $container-selector: ".container", $content-selector: ".content") {
    #{$container-selector} {
        @include fixed-aspect-container($width, $height);
        #{$content-selector} {
            position:   absolute;
            top:        0;
            left:       0;
            bottom:     0;
            right:      0;
            @content;
        }
    }
}

// em to px
@function to-px($em) {
    $unitless: $em / 1em;
    @return $unitless * 16px;
}

// px to em
@function to-em($px) {
    $unitless: $px / 1px;
    @return $unitless / 16 * 1em;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// compass 0.13+ duplicate

$keyframes-official: true;

// keyframes
@mixin keyframes($name) {
    $backup-experimental-support-for-webkit:       $experimental-support-for-webkit !global;
    $backup-experimental-support-for-mozilla:      $experimental-support-for-mozilla !global;
    $backup-experimental-support-for-opera:        $experimental-support-for-opera !global;
    $backup-experimental-support-for-microsoft:    $experimental-support-for-microsoft !global;
    $backup-experimental-support-for-khtml:        $experimental-support-for-khtml !global;

    $keyframes-official: false !global;

    @if $experimental-support-for-webkit {
        $experimental-support-for-webkit:       true !global;
        $experimental-support-for-mozilla:      false !global;
        $experimental-support-for-opera:        false !global;
        $experimental-support-for-microsoft:    false !global;
        $experimental-support-for-khtml:        false !global;
        @-webkit-keyframes #{$name} {
            @content;
        }
        $experimental-support-for-webkit:       $backup-experimental-support-for-webkit !global;
        $experimental-support-for-mozilla:      $backup-experimental-support-for-mozilla !global;
        $experimental-support-for-opera:        $backup-experimental-support-for-opera !global;
        $experimental-support-for-microsoft:    $backup-experimental-support-for-microsoft !global;
        $experimental-support-for-khtml:        $backup-experimental-support-for-khtml !global;
    }
    @if $experimental-support-for-mozilla {
        $experimental-support-for-webkit:       false !global;
        $experimental-support-for-mozilla:      true !global;
        $experimental-support-for-opera:        false !global;
        $experimental-support-for-microsoft:    false !global;
        $experimental-support-for-khtml:        false !global;
        @-moz-keyframes #{$name} {
            @content;
        }
        $experimental-support-for-webkit:       $backup-experimental-support-for-webkit !global;
        $experimental-support-for-mozilla:      $backup-experimental-support-for-mozilla !global;
        $experimental-support-for-opera:        $backup-experimental-support-for-opera !global;
        $experimental-support-for-microsoft:    $backup-experimental-support-for-microsoft !global;
        $experimental-support-for-khtml:        $backup-experimental-support-for-khtml !global;
    }
    @if $experimental-support-for-microsoft {
        $experimental-support-for-webkit:       false !global;
        $experimental-support-for-mozilla:      false !global;
        $experimental-support-for-opera:        false !global;
        $experimental-support-for-microsoft:    true !global;
        $experimental-support-for-khtml:        false !global;
        @-ms-keyframes #{$name} {
            @content;
        }
        $experimental-support-for-webkit:       $backup-experimental-support-for-webkit !global;
        $experimental-support-for-mozilla:      $backup-experimental-support-for-mozilla !global;
        $experimental-support-for-opera:        $backup-experimental-support-for-opera !global;
        $experimental-support-for-microsoft:    $backup-experimental-support-for-microsoft !global;
        $experimental-support-for-khtml:        $backup-experimental-support-for-khtml !global;
    }

    $experimental-support-for-webkit:       false !global;
    $experimental-support-for-mozilla:      false !global;
    $experimental-support-for-opera:        false !global;
    $experimental-support-for-microsoft:    false !global;
    $experimental-support-for-khtml:        false !global;
    $keyframes-official: true !global;
    @keyframes #{$name} {
        @content;
    }
    $experimental-support-for-webkit:       $backup-experimental-support-for-webkit !global;
    $experimental-support-for-mozilla:      $backup-experimental-support-for-mozilla !global;
    $experimental-support-for-opera:        $backup-experimental-support-for-opera !global;
    $experimental-support-for-microsoft:    $backup-experimental-support-for-microsoft !global;
    $experimental-support-for-khtml:        $backup-experimental-support-for-khtml !global;
}

@mixin experimental-property($property, $value) {
    @include experimental($property, $value,
        -moz, -webkit, -o, -ms, -khtml, $keyframes-official
    );
}

// transform-origin for one arguments (original compass requires ",")
@mixin transform-origin-value($value) {
    @include experimental(transform-origin, $value,
        -moz, -webkit, -o, -ms, not -khtml, official
    );
}

// animation
@mixin animation($value) {
    @include experimental(animation, $value,
        -moz, -webkit, not -o, -ms, not -khtml, official
    );
}

// animation-timing-function
@mixin animation-timing-function($value) {
    @include experimental(animation-timing-function, $value,
        -moz, -webkit, -o, -ms, not -khtml, official
    );
}

// animation-duration
@mixin animation-duration($value) {
    @include experimental(animation-duration, $value,
        -moz, -webkit, -o, -ms, not -khtml, official
    );
}

// animation-name
@mixin animation-name($value) {
    @include experimental(animation-name, $value,
        -moz, -webkit, -o, -ms, not -khtml, official
    );
}

// animation-iteration-count
@mixin animation-iteration-count($value) {
    @include experimental(animation-iteration-count, $value,
        -moz, -webkit, -o, -ms, not -khtml, official
    );
}

// mask
@mixin mask($value) {
    @include experimental(mask, $value,
        -moz, -webkit, not -o, -ms, not -khtml, official
    );
}

// mask-image
@mixin mask-image($value) {
    @include experimental(mask-image, $value,
        -moz, -webkit, not -o, -ms, not -khtml, official
    );
}

// mask-position
@mixin mask-position($value) {
    @include experimental(mask-position, $value,
        -moz, -webkit, not -o, -ms, not -khtml, official
    );
}

// mask-repeat
@mixin mask-repeat($value) {
    @include experimental(mask-repeat, $value,
        -moz, -webkit, not -o, -ms, not -khtml, official
    );
}

// mask-size
@mixin mask-size($value) {
    @include experimental(mask-size, $value,
        -moz, -webkit, not -o, -ms, not -khtml, official
    );
}

// input-placeholder
@mixin input-placeholder {
    @if $experimental-support-for-webkit {
        &::-webkit-input-placeholder {
            @content;
        }
    }
    @if $experimental-support-for-mozilla {
        &::-moz-placeholder {
            @content;
        }
    }
    @if $experimental-support-for-microsoft {
        &:-ms-input-placeholder {
            @content;
        }
    }
}
