{"version":3,"sources":["dist/cdp.tools.js"],"names":["root","factory","define","amd","CDP","jQuery","$","this","self","global","Tools","RESULT_CODE_BASE","MODULE_RESULT_CODE_RANGE_CDP","FUNCTION_CODE_RANGE","LOCAL_CODE_BASE","RESULT_CODE","DECLARE_ERROR_CODE","CDP_TOOLS","FUNCTIONS","BLOB","Promise","TAG","abs","x","max","lhs","rhs","min","toZeroPadding","no","limit","signed","Number","isNaN","Array","join","slice","getStringSize","src","Blob","type","size","toStringChunks","inherit","subClass","superClass","_prototype","prototype","_inherit","constructor","extend","mixin","derived","bases","_i","arguments","length","forEach","base","Object","getOwnPropertyNames","name","protoProps","staticProps","parent","child","hasOwnProperty","apply","Surrogate","__super__","getDevicePixcelRatio","mediaQuery","is_firefox","navigator","userAgent","toLowerCase","indexOf","window","devicePixelRatio","matchMedia","matches","s_canvasFactory","getCanvas","document","createElement","cloneNode","ensureImageLoaded","url","img","Image","destroy","resolve","reject","onload","event","onerror","makeErrorInfo","ERROR_CDP_TOOLS_IMAGE_LOAD_FAILED","resizeImage","longSideLength","canvas","ih","height","iw","width","ia","cw","ch","ERROR_CDP_TOOLS_INVALID_IMAGE","Math","round","getContext","drawImage","toDataURL","Binary","getBlobBuilder","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","makeErrorInfoFromDOMError","resultCode","cause","tag","message","_cause","arrayBufferToBlob","buf","mimeType","blob","blobBuilderObject","blobBuilder","append","getBlob","base64ToBlob","base64","base64ToArrayBuffer","dataUrlToBlob","dataUrl","split","bytes","atob","arrayBuffer","ArrayBuffer","data","Uint8Array","i","len","charCodeAt","base64ToUint8Array","encoded","arrayBufferToBase64","uint8ArrayToBase64","byteLength","String","fromCharCode","btoa","readBlobAsArrayBuffer","reader","FileReader","cancel","abort","result","ERROR_CDP_TOOLS_FILE_READER_ERROR","error","readAsArrayBuffer","readBlobAsUint8Array","dependOn","then","catch","readBlobAsText","encode","readAsText","readBlobAsDataURL","readAsDataURL","blobURL","URL","webkitURL","xhrSuccessStatus","0","1223","ajaxTransport","options","originalOptions","jqXHR","FormData","dataType","abortCallback_1","send","headers","callback","xhr","XMLHttpRequest","async","responseType","username","password","_callback","addEventListener","_data","response","status","statusText","getAllResponseHeaders","open","setRequestHeader","DateTime","computeDate","addDays","dt","Date","getTime","baseSec","addSec","targetSec","setTime","convertISOStringToDate","dateString","dateTime","dateArray","timeArray","secArray","dateObject","convertDateToISOString","date","target","isoDateString","console","warn","getFullYear","numberToDoubleDigitsString","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","toFixed","convertFileSystemStringToDate","convertDateToFileSystemString","fileSystemString","num","Template","getTemplateElement","key","cache","mapElement","getElementMap","$element","html","findHtmlFromSource","find","exception","empty","_mapElement","_mapSource","getJST","template","jst","Hogan","compile","text","render","_","replace","getSourceMap","mapSource","ajax","method","success","__assign","assign","t","s","n","p","call","ProgressCounter","reset","_settings","beginTime","now","allowIncrementeRemain","lastRemainTime","Infinity","compute","progress","passTime","remainTime"],"mappings":"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","sourcesContent":["﻿/*!\n * cdp.tools.js 2.0.0\n *\n * Date: 2017-08-02T06:54:34.299Z\n */\n(function (root, factory) { if (typeof define === \"function\" && define.amd) { define([\"cdp.core\", \"cdp.promise\"], function () { return factory(root.CDP || (root.CDP = {}), root.jQuery || root.$); }); } else { factory(root.CDP || (root.CDP = {}), root.jQuery || root.$); } }(((this || 0).self || global), function (CDP, $) { CDP.Tools = CDP.Tools || {};\nvar CDP;\n(function (CDP) {\n    /**\n     * @enum  RESULT_CODE_BASE\n     * @brief リザルトコードのオフセット値\n     */\n    var RESULT_CODE_BASE;\n    (function (RESULT_CODE_BASE) {\n        RESULT_CODE_BASE[RESULT_CODE_BASE[\"CDP_TOOLS_DECLARERATION\"] = 0] = \"CDP_TOOLS_DECLARERATION\";\n        RESULT_CODE_BASE[RESULT_CODE_BASE[\"CDP_TOOLS\"] = 4 * CDP.MODULE_RESULT_CODE_RANGE_CDP] = \"CDP_TOOLS\";\n    })(RESULT_CODE_BASE = CDP.RESULT_CODE_BASE || (CDP.RESULT_CODE_BASE = {}));\n    ///////////////////////////////////////////////////////////////////////\n    // module error declaration:\n    var FUNCTION_CODE_RANGE = 10;\n    /**\n     * @enum  LOCAL_CODE_BASE\n     * @brief cdp.tools 内のローカルコードオフセット値\n     */\n    var LOCAL_CODE_BASE;\n    (function (LOCAL_CODE_BASE) {\n        LOCAL_CODE_BASE[LOCAL_CODE_BASE[\"FUNCTIONS\"] = 0] = \"FUNCTIONS\";\n        LOCAL_CODE_BASE[LOCAL_CODE_BASE[\"BLOB\"] = 1 * FUNCTION_CODE_RANGE] = \"BLOB\";\n    })(LOCAL_CODE_BASE || (LOCAL_CODE_BASE = {}));\n    /* tslint:disable:max-line-length */\n    /**\n     * @enum  RESULT_CODE\n     * @brief cdp.tools のエラーコード定義\n     */\n    var RESULT_CODE;\n    (function (RESULT_CODE) {\n        RESULT_CODE[RESULT_CODE[\"ERROR_CDP_TOOLS_DECLARATION\"] = 0] = \"ERROR_CDP_TOOLS_DECLARATION\";\n        RESULT_CODE[RESULT_CODE[\"ERROR_CDP_TOOLS_IMAGE_LOAD_FAILED\"] = CDP.DECLARE_ERROR_CODE(RESULT_CODE_BASE.CDP_TOOLS, LOCAL_CODE_BASE.FUNCTIONS + 1, \"image load failed.\")] = \"ERROR_CDP_TOOLS_IMAGE_LOAD_FAILED\";\n        RESULT_CODE[RESULT_CODE[\"ERROR_CDP_TOOLS_INVALID_IMAGE\"] = CDP.DECLARE_ERROR_CODE(RESULT_CODE_BASE.CDP_TOOLS, LOCAL_CODE_BASE.FUNCTIONS + 2, \"invalid image.\")] = \"ERROR_CDP_TOOLS_INVALID_IMAGE\";\n        RESULT_CODE[RESULT_CODE[\"ERROR_CDP_TOOLS_FILE_READER_ERROR\"] = CDP.DECLARE_ERROR_CODE(RESULT_CODE_BASE.CDP_TOOLS, LOCAL_CODE_BASE.BLOB + 1, \"FileReader method failed.\")] = \"ERROR_CDP_TOOLS_FILE_READER_ERROR\";\n    })(RESULT_CODE = CDP.RESULT_CODE || (CDP.RESULT_CODE = {}));\n    /* tslint:enable:max-line-length */\n})(CDP || (CDP = {}));\n/// <reference types=\"jquery\" />\nvar CDP;\n(function (CDP) {\n    var Tools;\n    (function (Tools) {\n        var Promise = CDP.Promise;\n        var TAG = \"[CDP.Tools.Functions] \";\n        /**\n         * Math.abs よりも高速な abs\n         */\n        function abs(x) {\n            return x >= 0 ? x : -x;\n        }\n        Tools.abs = abs;\n        /**\n         * Math.max よりも高速な max\n         */\n        function max(lhs, rhs) {\n            return lhs >= rhs ? lhs : rhs;\n        }\n        Tools.max = max;\n        /**\n         * Math.min よりも高速な min\n         */\n        function min(lhs, rhs) {\n            return lhs <= rhs ? lhs : rhs;\n        }\n        Tools.min = min;\n        /**\n         * 数値を 0 詰めして文字列を生成\n         */\n        function toZeroPadding(no, limit) {\n            var signed = \"\";\n            no = Number(no);\n            if (isNaN(no) || isNaN(limit) || limit <= 0) {\n                return null;\n            }\n            if (no < 0) {\n                no = Tools.abs(no);\n                signed = \"-\";\n            }\n            return signed + (Array(limit).join(\"0\") + no).slice(-limit);\n        }\n        Tools.toZeroPadding = toZeroPadding;\n        /**\n         * 文字列のバイト数をカウント\n         */\n        function getStringSize(src) {\n            return (new CDP.global.Blob([src], { type: \"text/plain\" })).size;\n        }\n        Tools.getStringSize = getStringSize;\n        /**\n         * 文字列をバイト制限して分割\n         */\n        function toStringChunks(src, limit) {\n            // TODO:\n            return [src];\n        }\n        Tools.toStringChunks = toStringChunks;\n        /**\n         * 多重継承のための実行時継承関数\n         *\n         * Sub Class 候補オブジェクトに対して Super Class 候補オブジェクトを直前の Super Class として挿入する。\n         * prototype のみコピーする。\n         * インスタンスメンバをコピーしたい場合、Super Class が疑似コンストラクタを提供する必要がある。\n         * 詳細は cdp.tools.Functions.spec.ts を参照。\n         *\n         * @param subClass   {constructor} [in] オブジェクトの constructor を指定\n         * @param superClass {constructor} [in] オブジェクトの constructor を指定\n         */\n        function inherit(subClass, superClass) {\n            var _prototype = subClass.prototype;\n            function _inherit() {\n                this.constructor = subClass;\n            }\n            _inherit.prototype = superClass.prototype;\n            subClass.prototype = new _inherit();\n            $.extend(subClass.prototype, _prototype);\n        }\n        Tools.inherit = inherit;\n        /**\n         * mixin 関数\n         *\n         * TypeScript Official Site に載っている mixin 関数\n         * http://www.typescriptlang.org/Handbook#mixins\n         * 既に定義されているオブジェクトから、新規にオブジェクトを合成する。\n         *\n         * @param derived {constructor}    [in] 合成されるオブジェクトの constructor を指定\n         * @param bases   {constructor...} [in] 合成元オブジェクトの constructor を指定 (可変引数)\n         */\n        function mixin(derived) {\n            var bases = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                bases[_i - 1] = arguments[_i];\n            }\n            bases.forEach(function (base) {\n                Object.getOwnPropertyNames(base.prototype).forEach(function (name) {\n                    derived.prototype[name] = base.prototype[name];\n                });\n            });\n        }\n        Tools.mixin = mixin;\n        /**\n         * \\~english\n         * Helper function to correctly set up the prototype chain, for subclasses.\n         * The function behavior is same as extend() function of Backbone.js.\n         *\n         * @param protoProps  {Object} [in] set prototype properties as object.\n         * @param staticProps {Object} [in] set static properties as object.\n         * @return {Object} subclass constructor.\n         *\n         * \\~japanese\n         * クラス継承のためのヘルパー関数\n         * Backbone.js extend() 関数と同等\n         *\n         * @param protoProps  {Object} [in] prototype properties をオブジェクトで指定\n         * @param staticProps {Object} [in] static properties をオブジェクトで指定\n         * @return {Object} サブクラスのコンストラクタ\n         */\n        function extend(protoProps, staticProps) {\n            var parent = this;\n            var child;\n            if (protoProps && protoProps.hasOwnProperty(\"constructor\")) {\n                child = protoProps.constructor;\n            }\n            else {\n                child = function () {\n                    return parent.apply(this, arguments);\n                };\n            }\n            $.extend(child, parent, staticProps);\n            var Surrogate = function () {\n                this.constructor = child;\n            };\n            Surrogate.prototype = parent.prototype;\n            child.prototype = new Surrogate;\n            if (protoProps) {\n                $.extend(child.prototype, protoProps);\n            }\n            child.__super__ = parent.prototype;\n            return child;\n        }\n        Tools.extend = extend;\n        /**\n         * DPI 取得\n         */\n        function getDevicePixcelRatio() {\n            var mediaQuery;\n            var is_firefox = navigator.userAgent.toLowerCase().indexOf(\"firefox\") > -1;\n            if (null != window.devicePixelRatio && !is_firefox) {\n                return window.devicePixelRatio;\n            }\n            else if (window.matchMedia) {\n                mediaQuery =\n                    \"(-webkit-min-device-pixel-ratio: 1.5),\\\n                    (min--moz-device-pixel-ratio: 1.5),\\\n                    (-o-min-device-pixel-ratio: 3/2),\\\n                    (min-resolution: 1.5dppx)\";\n                if (window.matchMedia(mediaQuery).matches) {\n                    return 1.5;\n                }\n                mediaQuery =\n                    \"(-webkit-min-device-pixel-ratio: 2),\\\n                    (min--moz-device-pixel-ratio: 2),\\\n                    (-o-min-device-pixel-ratio: 2/1),\\\n                    (min-resolution: 2dppx)\";\n                if (window.matchMedia(mediaQuery).matches) {\n                    return 2;\n                }\n                mediaQuery =\n                    \"(-webkit-min-device-pixel-ratio: 0.75),\\\n                    (min--moz-device-pixel-ratio: 0.75),\\\n                    (-o-min-device-pixel-ratio: 3/4),\\\n                    (min-resolution: 0.75dppx)\";\n                if (window.matchMedia(mediaQuery).matches) {\n                    return 0.7;\n                }\n            }\n            else {\n                return 1;\n            }\n        }\n        Tools.getDevicePixcelRatio = getDevicePixcelRatio;\n        // Canvas element のキャッシュ\n        var s_canvasFactory;\n        // キャッシュ済みの Canvas を取得する\n        function getCanvas() {\n            s_canvasFactory = s_canvasFactory || document.createElement(\"canvas\");\n            return s_canvasFactory.cloneNode(false);\n        }\n        Tools.getCanvas = getCanvas;\n        /**\n         * 画像リソースのロード完了を保証\n         * ブラウザ既定のプログレッシブロードを走らせないため.\n         *\n         * @param  {String} url [in] url (data-url)\n         * @return {IPromise<string>} 表示可能な url\n         */\n        function ensureImageLoaded(url) {\n            var img = new Image();\n            var destroy = function () {\n                if (img) {\n                    img.src = \"\"; // 読み込み停止\n                    img = null;\n                }\n            };\n            return new Promise(function (resolve, reject) {\n                img.onload = function (event) {\n                    destroy();\n                    resolve(url);\n                };\n                img.onerror = function (event) {\n                    destroy();\n                    reject(CDP.makeErrorInfo(CDP.RESULT_CODE.ERROR_CDP_TOOLS_IMAGE_LOAD_FAILED, TAG, \"image load failed. [url: \" + url + \"]\"));\n                };\n                img.src = url;\n            }, destroy);\n        }\n        Tools.ensureImageLoaded = ensureImageLoaded;\n        /**\n         * 画像のリサイズ\n         * 指定した長辺の長さにアスペクト比を維持してリサイズを行う\n         * longSideLength より小さな場合はオリジナルサイズで data-url を返却する\n         *\n         * @param  {String} src            [in] image に指定するソース\n         * @param  {Number} longSideLength [in] リサイズに使用する長辺の最大値を指定\n         * @return {IPromise<string>} base64 data url を返却\n         */\n        function resizeImage(src, longSideLength) {\n            var img = new Image();\n            var destroy = function () {\n                if (img) {\n                    img.src = \"\"; // 読み込み停止\n                    img = null;\n                }\n            };\n            return new Promise(function (resolve, reject) {\n                img.onload = function (event) {\n                    var canvas = getCanvas();\n                    var ih = img.height, iw = img.width, ia = ih / iw;\n                    var cw, ch;\n                    if (iw === 0 || 0 === ia) {\n                        reject(CDP.makeErrorInfo(CDP.RESULT_CODE.ERROR_CDP_TOOLS_INVALID_IMAGE, TAG, \"invalid image. [src: \" + src + \"]\"));\n                    }\n                    else {\n                        if (longSideLength <= 0) {\n                            longSideLength = (ia < 1) ? iw : ih;\n                        }\n                        if (ia < 1) {\n                            cw = (longSideLength < iw) ? longSideLength : iw;\n                            ch = Math.round(cw * ia);\n                        }\n                        else {\n                            ch = (longSideLength < ih) ? longSideLength : ih;\n                            cw = Math.round(ch / ia);\n                        }\n                        canvas.width = cw;\n                        canvas.height = ch;\n                        canvas.getContext(\"2d\").drawImage(img, 0, 0, cw, ch);\n                        resolve(canvas.toDataURL());\n                    }\n                    destroy();\n                };\n                img.onerror = function (event) {\n                    destroy();\n                    reject(CDP.makeErrorInfo(CDP.RESULT_CODE.ERROR_CDP_TOOLS_IMAGE_LOAD_FAILED, TAG, \"image load failed. [src: \" + src + \"]\"));\n                };\n                img.src = src;\n            });\n        }\n        Tools.resizeImage = resizeImage;\n    })(Tools = CDP.Tools || (CDP.Tools = {}));\n})(CDP || (CDP = {}));\nvar CDP;\n(function (CDP) {\n    var Tools;\n    (function (Tools) {\n        var Promise = CDP.Promise;\n        var TAG = \"[CDP.Tools.Binary] \";\n        /**\n         * @class Binary\n         * @brief バイナリユーティリティ\n         */\n        var Binary = (function () {\n            // private constructor\n            function Binary() {\n                // noop\n            }\n            /**\n             * Get BlobBuilder\n             *\n             * @return {any} BlobBuilder\n             */\n            Binary.getBlobBuilder = function () {\n                return CDP.global.BlobBuilder || CDP.global.WebKitBlobBuilder || CDP.global.MozBlobBuilder || CDP.global.MSBlobBuilder;\n            };\n            /**\n             * エラー情報生成 from DOMError\n             *\n             * @param resultCode [in] RESULT_CODE を指定\n             * @param cause      [in] 下位の DOM エラーを指定\n             * @param [tag]      [in] TAG を指定\n             * @param [message]  [in] メッセージを指定\n             * @returns エラーオブジェクト\n             */\n            Binary.makeErrorInfoFromDOMError = function (resultCode, cause, tag, message) {\n                var _cause;\n                if (cause) {\n                    _cause = {\n                        name: cause.name,\n                        message: cause.name,\n                    };\n                }\n                return CDP.makeErrorInfo(resultCode, tag, message, _cause);\n            };\n            /**\n             * ArrayBuffer to Blob\n             *\n             * @param buf [in] ArrayBuffer data\n             * @param mimeType [in] MimeType of data\n             * @returns Blob data\n             */\n            Binary.arrayBufferToBlob = function (buf, mimeType) {\n                var blob = null;\n                if (CDP.global.Blob) {\n                    blob = new CDP.global.Blob([buf], { type: mimeType });\n                }\n                else {\n                    // under Android 4.4 KitKat\n                    var blobBuilderObject = Binary.getBlobBuilder();\n                    var blobBuilder = new blobBuilderObject();\n                    blobBuilder.append(buf);\n                    blob = blobBuilder.getBlob(mimeType);\n                }\n                return blob;\n            };\n            /**\n             * Base64 string to Blob\n             *\n             * @param base64 {string} [in] Base64 string data\n             * @param mimeType {string} [in] MimeType of data\n             * @return {Blob} Blob data\n             */\n            Binary.base64ToBlob = function (base64, mimeType) {\n                var blob = null;\n                if (CDP.global.Blob) {\n                    blob = new CDP.global.Blob([Binary.base64ToArrayBuffer(base64)], { type: mimeType });\n                }\n                else {\n                    // under Android 4.4 KitKat\n                    var blobBuilderObject = Binary.getBlobBuilder();\n                    var blobBuilder = new blobBuilderObject();\n                    blobBuilder.append(Binary.base64ToArrayBuffer(base64));\n                    blob = blobBuilder.getBlob(mimeType);\n                }\n                return blob;\n            };\n            /**\n             * data-url 形式画像から Blob オブジェクトへ変換\n             *\n             * @param  {String} dataUrl    [in] data url\n             * @param  {String} [mimeType] [in] mime type を指定. 既定では \"image/png\"\n             * @return {Blob} Blob インスタンス\n             */\n            Binary.dataUrlToBlob = function (dataUrl, mimeType) {\n                if (mimeType === void 0) { mimeType = \"image/png\"; }\n                var base64 = dataUrl.split(\",\")[1];\n                return Binary.base64ToBlob(base64, mimeType);\n            };\n            /**\n             * Base64 string to ArrayBuffer\n             *\n             * @param base64 {string} [in] Base64 string data\n             * @return {ArrayBuffer} ArrayBuffer data\n             */\n            Binary.base64ToArrayBuffer = function (base64) {\n                var bytes = window.atob(base64);\n                var arrayBuffer = new ArrayBuffer(bytes.length);\n                var data = new Uint8Array(arrayBuffer);\n                for (var i = 0, len = bytes.length; i < len; ++i) {\n                    data[i] = bytes.charCodeAt(i);\n                }\n                return arrayBuffer;\n            };\n            /**\n             * Base64 string to Uint8Array\n             *\n             * @param base64 {string} [in] Base64 string data\n             * @return {Uint8Array} Uint8Array data\n             */\n            Binary.base64ToUint8Array = function (encoded) {\n                var bytes = window.atob(encoded);\n                var data = new Uint8Array(bytes.length);\n                for (var i = 0, len = bytes.length; i < len; ++i) {\n                    data[i] = bytes.charCodeAt(i);\n                }\n                return data;\n            };\n            /**\n             * ArrayBuffer to base64 string\n             *\n             * @param arrayBuffer {ArrayBuffer} [in] ArrayBuffer data\n             * @return {string} base64 data\n             */\n            Binary.arrayBufferToBase64 = function (arrayBuffer) {\n                var bytes = new Uint8Array(arrayBuffer);\n                return Binary.uint8ArrayToBase64(bytes);\n            };\n            /**\n             * Uint8Array to base64 string\n             *\n             * @param bytes {Uint8Array} [in] Uint8Array data\n             * @return {string} base64 data\n             */\n            Binary.uint8ArrayToBase64 = function (bytes) {\n                var data = \"\";\n                for (var i = 0, len = bytes.byteLength; i < len; ++i) {\n                    data += String.fromCharCode(bytes[i]);\n                }\n                return window.btoa(data);\n            };\n            /**\n             * read Blob as ArrayBuffer\n             *\n             * @param  {Blob} blob [in] blob data\n             * @return {CDP.IPromise<ArrayBuffer>} promise object\n             */\n            Binary.readBlobAsArrayBuffer = function (blob) {\n                var reader = new FileReader();\n                var cancel = function () { return reader.abort(); };\n                return new Promise(function (resolve, reject) {\n                    reader.onload = function () {\n                        resolve(reader.result);\n                    };\n                    reader.onerror = function () {\n                        reject(Binary.makeErrorInfoFromDOMError(CDP.RESULT_CODE.ERROR_CDP_TOOLS_FILE_READER_ERROR, reader.error, TAG, \"FileReader.readAsArrayBuffer() failed.\"));\n                    };\n                    reader.readAsArrayBuffer(blob);\n                }, cancel);\n            };\n            /**\n             * read Blob as Uint8Array\n             *\n             * @param  {Blob} blob [in] blob data\n             * @return {CDP.IPromise<Uint8Array>} promise object\n             */\n            Binary.readBlobAsUint8Array = function (blob) {\n                return new Promise(function (resolve, reject, dependOn) {\n                    dependOn(Binary.readBlobAsArrayBuffer(blob))\n                        .then(function (result) {\n                        resolve(new Uint8Array(result));\n                    })\n                        .catch(function (error) {\n                        reject(error);\n                    });\n                });\n            };\n            /**\n             * read Blob as text string\n             *\n             * @param  {Blob} blob [in] blob data\n             * @return {CDP.IPromise<Uint8Array>} promise object\n             */\n            Binary.readBlobAsText = function (blob, encode) {\n                if (encode === void 0) { encode = \"utf-8\"; }\n                var reader = new FileReader();\n                var cancel = function () { return reader.abort(); };\n                return new Promise(function (resolve, reject) {\n                    reader.onload = function () {\n                        resolve(reader.result);\n                    };\n                    reader.onerror = function () {\n                        reject(Binary.makeErrorInfoFromDOMError(CDP.RESULT_CODE.ERROR_CDP_TOOLS_FILE_READER_ERROR, reader.error, TAG, \"FileReader.readAsText() failed.\"));\n                    };\n                    reader.readAsText(blob, encode);\n                }, cancel);\n            };\n            /**\n             * read Blob as Data URL\n             *\n             * @param  {Blob} blob [in] blob data\n             * @return {CDP.IPromise<string>} promise object\n             */\n            Binary.readBlobAsDataURL = function (blob) {\n                var reader = new FileReader();\n                var cancel = function () { return reader.abort(); };\n                return new Promise(function (resolve, reject) {\n                    reader.onload = function () {\n                        resolve(reader.result);\n                    };\n                    reader.onerror = function () {\n                        reject(Binary.makeErrorInfoFromDOMError(CDP.RESULT_CODE.ERROR_CDP_TOOLS_FILE_READER_ERROR, reader.error, TAG, \"FileReader.readAsDataURL() failed.\"));\n                    };\n                    reader.readAsDataURL(blob);\n                }, cancel);\n            };\n            /**\n             * URL Object\n             *\n             * @obsolete\n             * @return {any} URL Object\n             */\n            Binary.blobURL = (function () {\n                return CDP.global.URL || CDP.global.webkitURL;\n            })();\n            return Binary;\n        }());\n        Tools.Binary = Binary;\n    })(Tools = CDP.Tools || (CDP.Tools = {}));\n})(CDP || (CDP = {}));\n/**\n * @file  BinaryTransport.ts\n * @brief jQuery ajax transport for making binary data type requests.\n *\n *        original: https://github.com/henrya/js-jquery/blob/master/BinaryTransport/jquery.binarytransport.js\n *        author:   Henry Algus <henryalgus@gmail.com>\n */\nvar CDP;\n(function (CDP) {\n    var Tools;\n    (function (Tools) {\n        // Support file protocol. (as same as official way)\n        var xhrSuccessStatus = {\n            0: 200,\n            1223: 204\n        };\n        $.ajaxTransport(\"+binary\", function (options, originalOptions, jqXHR) {\n            if (CDP.global.FormData &&\n                ((options.dataType && (options.dataType === \"binary\")) ||\n                    (options.data && ((CDP.global.ArrayBuffer && options.data instanceof ArrayBuffer) ||\n                        (CDP.global.Blob && options.data instanceof CDP.global.Blob))))) {\n                var abortCallback_1;\n                return {\n                    send: function (headers, callback) {\n                        // setup all variables\n                        var xhr = new XMLHttpRequest();\n                        var url = options.url;\n                        var type = options.type;\n                        var async = options.async || true;\n                        // blob or arraybuffer. Default is blob\n                        var dataType = options.responseType || \"blob\";\n                        var data = options.data || null;\n                        var username = options.username || null;\n                        var password = options.password || null;\n                        var _callback = callback || (function () { });\n                        // succeeded handler\n                        xhr.addEventListener(\"load\", function () {\n                            var _data = {};\n                            _data[options.dataType] = xhr.response;\n                            _callback(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, _data, xhr.getAllResponseHeaders());\n                        });\n                        // error handler\n                        xhr.addEventListener(\"error\", function () {\n                            var _data = {};\n                            _data[options.dataType] = xhr.response;\n                            // make callback and send data\n                            _callback(xhr.status, xhr.statusText, _data, xhr.getAllResponseHeaders());\n                        });\n                        // abort handler\n                        xhr.addEventListener(\"abort\", function () {\n                            var _data = {};\n                            _data[options.dataType] = xhr.response;\n                            // make callback and send data\n                            _callback(xhr.status, xhr.statusText, _data, xhr.getAllResponseHeaders());\n                        });\n                        // abort callback\n                        abortCallback_1 = function () {\n                            xhr.abort();\n                        };\n                        xhr.open(type, url, async, username, password);\n                        // setup custom headers\n                        for (var i in headers) {\n                            if (headers.hasOwnProperty(i)) {\n                                xhr.setRequestHeader(i, headers[i]);\n                            }\n                        }\n                        xhr.responseType = dataType;\n                        xhr.send(data);\n                    },\n                    abort: function () {\n                        if (abortCallback_1) {\n                            abortCallback_1();\n                        }\n                    }\n                };\n            }\n        });\n    })(Tools = CDP.Tools || (CDP.Tools = {}));\n})(CDP || (CDP = {}));\n/* tslint:disable:max-line-length */\nvar CDP;\n(function (CDP) {\n    var Tools;\n    (function (Tools) {\n        var TAG = \"[CDP.Tools.DateTime] \";\n        /**\n         * @class DateTime\n         * @brief 時刻操作のユーティリティクラス\n         */\n        var DateTime = (function () {\n            function DateTime() {\n            }\n            ///////////////////////////////////////////////////////////////////////\n            // public static method\n            /**\n             * 基点となる日付から、n日後、n日前を算出\n             *\n             * @param base    {Date}   [in] 基準日\n             * @param addDays {Number} [in] 加算日. マイナス指定でn日前も設定可能\n             * @return {Date} 日付オブジェクト\n             */\n            DateTime.computeDate = function (base, addDays) {\n                var dt = new Date(base.getTime());\n                var baseSec = dt.getTime();\n                var addSec = addDays * 86400000; //日数 * 1日のミリ秒数\n                var targetSec = baseSec + addSec;\n                dt.setTime(targetSec);\n                return dt;\n            };\n            /**\n             * Convert string to date object\n             *\n             * @param {String} date string ex) YYYY-MM-DDTHH:mm:SS.SSS\n             * @return {Object} date object\n             */\n            DateTime.convertISOStringToDate = function (dateString) {\n                var dateTime = dateString.split(\"T\"), dateArray = dateTime[0].split(\"-\");\n                var timeArray, secArray, dateObject;\n                if (dateTime[1]) {\n                    timeArray = dateTime[1].split(\":\");\n                    secArray = timeArray[2].split(\".\");\n                }\n                if (timeArray) {\n                    dateObject = new Date(dateArray[0], dateArray[1] - 1, dateArray[2], timeArray[0], timeArray[1], secArray[0], secArray[1]);\n                }\n                else {\n                    if (dateArray[2]) {\n                        dateObject = new Date(dateArray[0], dateArray[1] - 1, dateArray[2]);\n                    }\n                    else if (dateArray[1]) {\n                        dateObject = new Date(dateArray[0], dateArray[1] - 1);\n                    }\n                    else {\n                        dateObject = new Date(dateArray[0]);\n                    }\n                }\n                return dateObject;\n            };\n            /**\n             *  Convert a date object into a string in PMOAPI recorded_date format(the ISO 8601 Extended Format)\n             *\n             * @param date   {Date}   [in] date object\n             * @param target {String} [in] {year | month | date | hour | min | sec | msec }\n             * @return {String}\n             */\n            DateTime.convertDateToISOString = function (date, target) {\n                if (target === void 0) { target = \"msec\"; }\n                var isoDateString;\n                switch (target) {\n                    case \"year\":\n                    case \"month\":\n                    case \"date\":\n                    case \"hour\":\n                    case \"min\":\n                    case \"sec\":\n                    case \"msec\":\n                        break;\n                    default:\n                        console.warn(TAG + \"unknown target: \" + target);\n                        target = \"msec\";\n                }\n                isoDateString = date.getFullYear();\n                if (\"year\" === target) {\n                    return isoDateString;\n                }\n                isoDateString += (\"-\" + DateTime.numberToDoubleDigitsString(date.getMonth() + 1));\n                if (\"month\" === target) {\n                    return isoDateString;\n                }\n                isoDateString += (\"-\" + DateTime.numberToDoubleDigitsString(date.getDate()));\n                if (\"date\" === target) {\n                    return isoDateString;\n                }\n                isoDateString += (\"T\" + DateTime.numberToDoubleDigitsString(date.getHours()));\n                if (\"hour\" === target) {\n                    return isoDateString;\n                }\n                isoDateString += (\":\" + DateTime.numberToDoubleDigitsString(date.getMinutes()));\n                if (\"min\" === target) {\n                    return isoDateString;\n                }\n                isoDateString += (\":\" + DateTime.numberToDoubleDigitsString(date.getSeconds()));\n                if (\"sec\" === target) {\n                    return isoDateString;\n                }\n                isoDateString += (\".\" + String((date.getMilliseconds() / 1000).toFixed(3)).slice(2, 5));\n                return isoDateString;\n            };\n            /**\n             * Convert file system compatible string to date object\n             *\n             * @param {String} date string ex) yyyy_MM_ddTHH_mm_ss_SSS\n             * @return {Object} date object\n             */\n            DateTime.convertFileSystemStringToDate = function (dateString) {\n                var dateTime = dateString.split(\"T\"), dateArray = dateTime[0].split(\"_\");\n                var timeArray, dateObject;\n                if (dateTime[1]) {\n                    timeArray = dateTime[1].split(\"_\");\n                }\n                if (timeArray) {\n                    dateObject = new Date(dateArray[0], dateArray[1] - 1, dateArray[2], timeArray[0], timeArray[1], timeArray[2], timeArray[3]);\n                }\n                else {\n                    if (dateArray[2]) {\n                        dateObject = new Date(dateArray[0], dateArray[1] - 1, dateArray[2]);\n                    }\n                    else if (dateArray[1]) {\n                        dateObject = new Date(dateArray[0], dateArray[1] - 1);\n                    }\n                    else {\n                        dateObject = new Date(dateArray[0]);\n                    }\n                }\n                return dateObject;\n            };\n            /**\n             *  Convert a date object into a string in file system compatible format(yyyy_MM_ddTHH_mm_ss_SSS)\n             *\n             * @param date   {Date}   [in] date object\n             * @param target {String} [in] {year | month | date | hour | min | sec | msec }\n             * @return {String}\n             */\n            DateTime.convertDateToFileSystemString = function (date, target) {\n                if (target === void 0) { target = \"msec\"; }\n                var fileSystemString;\n                switch (target) {\n                    case \"year\":\n                    case \"month\":\n                    case \"date\":\n                    case \"hour\":\n                    case \"min\":\n                    case \"sec\":\n                    case \"msec\":\n                        break;\n                    default:\n                        console.warn(TAG + \"unknown target: \" + target);\n                        target = \"msec\";\n                }\n                fileSystemString = date.getFullYear();\n                if (\"year\" === target) {\n                    return fileSystemString;\n                }\n                fileSystemString += (\"_\" + DateTime.numberToDoubleDigitsString(date.getMonth() + 1));\n                if (\"month\" === target) {\n                    return fileSystemString;\n                }\n                fileSystemString += (\"_\" + DateTime.numberToDoubleDigitsString(date.getDate()));\n                if (\"date\" === target) {\n                    return fileSystemString;\n                }\n                fileSystemString += (\"T\" + DateTime.numberToDoubleDigitsString(date.getHours()));\n                if (\"hour\" === target) {\n                    return fileSystemString;\n                }\n                fileSystemString += (\"_\" + DateTime.numberToDoubleDigitsString(date.getMinutes()));\n                if (\"min\" === target) {\n                    return fileSystemString;\n                }\n                fileSystemString += (\"_\" + DateTime.numberToDoubleDigitsString(date.getSeconds()));\n                if (\"sec\" === target) {\n                    return fileSystemString;\n                }\n                fileSystemString += (\"_\" + String((date.getMilliseconds() / 1000).toFixed(3)).slice(2, 5));\n                return fileSystemString;\n            };\n            ///////////////////////////////////////////////////////////////////////\n            // private static method\n            /**\n             * Convert num to string(double digits)\n             *\n             * @param  {Number} number (0 <number < 100)\n             * @return {String} double digits string\n             */\n            DateTime.numberToDoubleDigitsString = function (num) {\n                if (num < 0 || num > 100) {\n                    return null;\n                }\n                if (num < 10) {\n                    return \"0\" + num;\n                }\n                return \"\" + num;\n            };\n            return DateTime;\n        }());\n        Tools.DateTime = DateTime;\n    })(Tools = CDP.Tools || (CDP.Tools = {}));\n})(CDP || (CDP = {}));\n/// <reference types=\"jquery\" />\nvar CDP;\n(function (CDP) {\n    var Tools;\n    (function (Tools) {\n        var TAG = \"[CDP.Tools.Template] \";\n        //___________________________________________________________________________________________________________________//\n        /**\n         * @class Template\n         * @brief template script を管理するユーティリティクラス\n         */\n        var Template = (function () {\n            function Template() {\n            }\n            ///////////////////////////////////////////////////////////////////////\n            // 公開メソッド\n            /**\n             * 指定した id, class 名, Tag 名をキーにテンプレートの JQuery Element を取得する。\n             *\n             * @param {String}  key     [in] id, class, tag を表す文字列\n             * @param {String}  [src]   [in] 外部 html を指定する場合は url を設定\n             * @param {Boolean} [cache] [in] src html をキャッシュする場合は true. src が指定されているときのみ有効\n             * @return template が格納されている JQuery Element\n             */\n            Template.getTemplateElement = function (key, src, cache) {\n                if (src === void 0) { src = null; }\n                if (cache === void 0) { cache = true; }\n                var mapElement = Template.getElementMap();\n                var $element = mapElement[key];\n                try {\n                    if (!$element) {\n                        if (src) {\n                            var html = Template.findHtmlFromSource(src);\n                            $element = $(html).find(key);\n                        }\n                        else {\n                            $element = $(key);\n                        }\n                        // 要素の検証\n                        if ($element <= 0) {\n                            throw (\"invalid [key, src] = [\" + key + \", \" + src + \"]\");\n                        }\n                        if (src && cache) {\n                            mapElement[key] = $element;\n                        }\n                    }\n                }\n                catch (exception) {\n                    console.error(TAG + exception);\n                    return null;\n                }\n                return $element;\n            };\n            /**\n             * Map オブジェクトの削除\n             * 明示的にキャッシュを開放する場合は本メソッドをコールする\n             */\n            Template.empty = function () {\n                Template._mapElement = null;\n                Template._mapSource = null;\n            };\n            Template.getJST = function (key, src, cache) {\n                var template = null;\n                var jst;\n                var $element;\n                if (key instanceof jQuery) {\n                    $element = key;\n                }\n                else {\n                    $element = Template.getTemplateElement(key, src, cache);\n                }\n                if (null != CDP.global.Hogan) {\n                    template = Hogan.compile($element.text());\n                    jst = function (data) {\n                        return template.render(data);\n                    };\n                }\n                else if (null != CDP.global._) {\n                    template = _.template($element.html());\n                    jst = function (data) {\n                        // 改行とタブは削除する\n                        return template(data).replace(/\\n|\\t/g, \"\");\n                    };\n                }\n                else {\n                    console.warn(TAG + \"cannot find template engine module.\");\n                    console.warn(\"    'hogan' or 'underscore' is required.\");\n                }\n                return jst;\n            };\n            ///////////////////////////////////////////////////////////////////////\n            // 内部メソッド\n            //! Element Map オブジェクトの取得\n            Template.getElementMap = function () {\n                if (!Template._mapElement) {\n                    Template._mapElement = {};\n                }\n                return Template._mapElement;\n            };\n            //! URL Map オブジェクトの取得\n            Template.getSourceMap = function () {\n                if (!Template._mapSource) {\n                    Template._mapSource = {};\n                }\n                return Template._mapSource;\n            };\n            //! URL Map から HTML を検索. 失敗した場合は undefined が返る\n            Template.findHtmlFromSource = function (src) {\n                var mapSource = Template.getSourceMap();\n                var html = mapSource[src];\n                if (!html) {\n                    $.ajax({\n                        url: src,\n                        method: \"GET\",\n                        async: false,\n                        dataType: \"html\",\n                        success: function (data) {\n                            html = data;\n                        },\n                        error: function (data, status) {\n                            throw (\"ajax request failed. status: \" + status);\n                        }\n                    });\n                    // キャッシュに格納\n                    mapSource[src] = html;\n                }\n                return html;\n            };\n            return Template;\n        }());\n        Tools.Template = Template;\n    })(Tools = CDP.Tools || (CDP.Tools = {}));\n})(CDP || (CDP = {}));\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nvar CDP;\n(function (CDP) {\n    var Tools;\n    (function (Tools) {\n        var TAG = \"[CDP.Tools.ProgressCounter] \";\n        /**\n         * @class ProgressCounter\n         * @brief 進捗の時間を扱うユーティリティクラス\n         */\n        var ProgressCounter = (function () {\n            /**\n             * constructor\n             *\n             * @param [options] オプション\n             */\n            function ProgressCounter(options) {\n                this.reset(options);\n            }\n            /**\n             * 開始時間を初期化\n             */\n            ProgressCounter.prototype.reset = function (options) {\n                this._settings = __assign({\n                    max: 100,\n                    beginTime: Date.now(),\n                    allowIncrementeRemain: false,\n                    lastRemainTime: Infinity,\n                }, options);\n            };\n            /**\n             * 経過時間と推定残り時間を取得する\n             * 進捗値が 0 の場合は、推定残り時間に Infinity を返す\n             *\n             * @param   progress [in] 進捗値\n             * @returns 経過時間と推定残り時間 [msec]\n             */\n            ProgressCounter.prototype.compute = function (progress) {\n                var passTime = Date.now() - this._settings.beginTime;\n                var remainTime = Infinity;\n                if (null != progress && 0 !== progress) {\n                    remainTime = passTime * this._settings.max / progress - passTime;\n                }\n                if (this._settings.allowIncrementeRemain || (remainTime < this._settings.lastRemainTime)) {\n                    this._settings.lastRemainTime = remainTime;\n                }\n                else {\n                    remainTime = this._settings.lastRemainTime;\n                }\n                return { passTime: passTime, remainTime: remainTime };\n            };\n            return ProgressCounter;\n        }());\n        Tools.ProgressCounter = ProgressCounter;\n    })(Tools = CDP.Tools || (CDP.Tools = {}));\n})(CDP || (CDP = {}));\n\nreturn CDP.Tools; }));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"]}