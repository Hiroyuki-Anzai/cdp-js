{"version":3,"sources":["dist/cdp.tools.js"],"names":["root","factory","define","amd","CDP","jQuery","$","this","self","global","Tools","RESULT_CODE_BASE","MODULE_RESULT_CODE_RANGE_CDP","FUNCTION_CODE_RANGE","LOCAL_CODE_BASE","RESULT_CODE","DECLARE_ERROR_CODE","CDP_TOOLS","FUNCTIONS","BLOB","Promise","TAG","abs","x","max","lhs","rhs","min","toZeroPadding","no","limit","signed","Number","isNaN","Array","join","slice","inherit","subClass","superClass","_prototype","prototype","_inherit","constructor","extend","mixin","derived","bases","_i","arguments","length","forEach","base","Object","getOwnPropertyNames","name","protoProps","staticProps","parent","child","hasOwnProperty","apply","Surrogate","__super__","getDevicePixcelRatio","mediaQuery","is_firefox","navigator","userAgent","toLowerCase","indexOf","window","devicePixelRatio","matchMedia","matches","s_canvasFactory","getCanvas","document","createElement","cloneNode","ensureImageLoaded","url","img","Image","destroy","src","resolve","reject","onload","event","onerror","makeErrorInfo","ERROR_CDP_TOOLS_IMAGE_LOAD_FAILED","resizeImage","longSideLength","canvas","ih","height","iw","width","ia","cw","ch","ERROR_CDP_TOOLS_INVALID_IMAGE","Math","round","getContext","drawImage","toDataURL","Blob","getBlobBuilder","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","makeErrorInfoFromDOMError","resultCode","cause","tag","message","_cause","arrayBufferToBlob","buf","mimeType","blob","blobBuilderObject","blobBuilder","append","getBlob","type","base64ToBlob","base64","base64ToArrayBuffer","dataUrlToBlob","dataUrl","split","bytes","atob","arrayBuffer","ArrayBuffer","data","Uint8Array","i","len","charCodeAt","base64ToUint8Array","encoded","arrayBufferToBase64","uint8ArrayToBase64","byteLength","String","fromCharCode","btoa","readBlobAsArrayBuffer","reader","FileReader","cancel","abort","result","ERROR_CDP_TOOLS_FILE_READER_ERROR","error","readAsArrayBuffer","readBlobAsUint8Array","dependOn","then","catch","readBlobAsText","encode","readAsText","readBlobAsDataURL","readAsDataURL","URL","webkitURL","xhrSuccessStatus","0","1223","ajaxTransport","options","originalOptions","jqXHR","FormData","dataType","abortCallback_1","send","headers","callback","xhr","XMLHttpRequest","async","responseType","username","password","_callback","addEventListener","_data","response","status","statusText","getAllResponseHeaders","open","setRequestHeader","DateTime","computeDate","addDays","dt","Date","getTime","baseSec","addSec","targetSec","setTime","convertISOStringToDate","dateString","dateTime","dateArray","timeArray","secArray","dateObject","convertDateToISOString","date","target","isoDateString","console","warn","getFullYear","numberToDoubleDigitsString","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","toFixed","convertFileSystemStringToDate","convertDateToFileSystemString","fileSystemString","num","Template","getTemplateElement","key","cache","mapElement","getElementMap","$element","html","findHtmlFromSource","find","exception","empty","_mapElement","_mapSource","getJST","template","jst","Hogan","compile","text","render","_","replace","getSourceMap","mapSource","ajax","method","success"],"mappings":";;;;;CAKC,SAAUA,KAAMC,SAAW,UAAWC,SAAW,YAAcA,OAAOC,IAAK,CAAED,QAAQ,WAAY,eAAgB,WAAc,OAAOD,QAAQD,KAAKI,MAAQJ,KAAKI,QAAWJ,KAAKK,QAAUL,KAAKM,SAAe,CAAEL,QAAQD,KAAKI,MAAQJ,KAAKI,QAAWJ,KAAKK,QAAUL,KAAKM,KAA1Q,EAAoRC,MAAQ,GAAGC,MAAQC,OAAS,SAAUL,IAAKE,GAAKF,IAAIM,MAAQN,IAAIM,UACpV,IAAIN,KACJ,SAAWA,KAKP,IAAIO,kBACJ,SAAWA,kBACPA,iBAAiBA,iBAAiB,2BAA6B,GAAK,0BACpEA,iBAAiBA,iBAAiB,aAAe,EAAIP,IAAIQ,8BAAgC,aAF7F,CAGGD,iBAAmBP,IAAIO,mBAAqBP,IAAIO,sBAGnD,IAAIE,oBAAsB,GAK1B,IAAIC,iBACJ,SAAWA,iBACPA,gBAAgBA,gBAAgB,aAAe,GAAK,YACpDA,gBAAgBA,gBAAgB,QAAU,EAAID,qBAAuB,QAFzE,CAGGC,kBAAoBA,qBAMvB,IAAIC,aACJ,SAAWA,aACPA,YAAYA,YAAY,+BAAiC,GAAK,8BAC9DA,YAAYA,YAAY,qCAAuCX,IAAIY,mBAAmBL,iBAAiBM,UAAWH,gBAAgBI,UAAY,EAAG,uBAAyB,oCAC1KH,YAAYA,YAAY,iCAAmCX,IAAIY,mBAAmBL,iBAAiBM,UAAWH,gBAAgBI,UAAY,EAAG,mBAAqB,gCAClKH,YAAYA,YAAY,qCAAuCX,IAAIY,mBAAmBL,iBAAiBM,UAAWH,gBAAgBK,KAAO,EAAG,8BAAgC,qCAJhL,CAKGJ,YAAcX,IAAIW,cAAgBX,IAAIW,kBAjC7C,CAmCGX,MAAQA,SAEX,IAAIA,KACJ,SAAWA,KACP,IAAIM,OACJ,SAAWA,OACP,IAAIU,QAAUhB,IAAIgB,QAClB,IAAIC,IAAM,yBAIV,SAASC,IAAIC,GACT,OAAOA,GAAK,EAAIA,GAAKA,EAEzBb,MAAMY,IAAMA,IAIZ,SAASE,IAAIC,IAAKC,KACd,OAAOD,KAAOC,IAAMD,IAAMC,IAE9BhB,MAAMc,IAAMA,IAIZ,SAASG,IAAIF,IAAKC,KACd,OAAOD,KAAOC,IAAMD,IAAMC,IAE9BhB,MAAMiB,IAAMA,IAIZ,SAASC,cAAcC,GAAIC,OACvB,IAAIC,OAAS,GACbF,GAAKG,OAAOH,IACZ,GAAII,MAAMJ,KAAOI,MAAMH,QAAUA,OAAS,EAAG,CACzC,OAAO,KAEX,GAAID,GAAK,EAAG,CACRA,GAAKnB,MAAMY,IAAIO,IACfE,OAAS,IAEb,OAAOA,QAAUG,MAAMJ,OAAOK,KAAK,KAAON,IAAIO,OAAON,OAEzDpB,MAAMkB,cAAgBA,cAYtB,SAASS,QAAQC,SAAUC,YACvB,IAAIC,WAAaF,SAASG,UAC1B,SAASC,WACLnC,KAAKoC,YAAcL,SAEvBI,SAASD,UAAYF,WAAWE,UAChCH,SAASG,UAAY,IAAIC,SACzBpC,EAAEsC,OAAON,SAASG,UAAWD,YAEjC9B,MAAM2B,QAAUA,QAWhB,SAASQ,MAAMC,SACX,IAAIC,SACJ,IAAK,IAAIC,GAAK,EAAGA,GAAKC,UAAUC,OAAQF,KAAM,CAC1CD,MAAMC,GAAK,GAAKC,UAAUD,IAE9BD,MAAMI,QAAQ,SAAUC,MACpBC,OAAOC,oBAAoBF,KAAKX,WAAWU,QAAQ,SAAUI,MACzDT,QAAQL,UAAUc,MAAQH,KAAKX,UAAUc,UAIrD7C,MAAMmC,MAAQA,MAkBd,SAASD,OAAOY,WAAYC,aACxB,IAAIC,OAASnD,KACb,IAAIoD,MACJ,GAAIH,YAAcA,WAAWI,eAAe,eAAgB,CACxDD,MAAQH,WAAWb,gBAElB,CACDgB,MAAQ,WACJ,OAAOD,OAAOG,MAAMtD,KAAM0C,YAGlC3C,EAAEsC,OAAOe,MAAOD,OAAQD,aACxB,IAAIK,UAAY,WACZvD,KAAKoC,YAAcgB,OAEvBG,UAAUrB,UAAYiB,OAAOjB,UAC7BkB,MAAMlB,UAAY,IAAIqB,UACtB,GAAIN,WAAY,CACZlD,EAAEsC,OAAOe,MAAMlB,UAAWe,YAE9BG,MAAMI,UAAYL,OAAOjB,UACzB,OAAOkB,MAEXjD,MAAMkC,OAASA,OAIf,SAASoB,uBACL,IAAIC,WACJ,IAAIC,WAAaC,UAAUC,UAAUC,cAAcC,QAAQ,YAAc,EACzE,GAAI,MAAQC,OAAOC,mBAAqBN,WAAY,CAChD,OAAOK,OAAOC,sBAEb,GAAID,OAAOE,WAAY,CACxBR,WACI,kMAIJ,GAAIM,OAAOE,WAAWR,YAAYS,QAAS,CACvC,OAAO,IAEXT,WACI,4LAIJ,GAAIM,OAAOE,WAAWR,YAAYS,QAAS,CACvC,OAAO,EAEXT,WACI,qMAIJ,GAAIM,OAAOE,WAAWR,YAAYS,QAAS,CACvC,MAAO,QAGV,CACD,OAAO,GAGfhE,MAAMsD,qBAAuBA,qBAE7B,IAAIW,gBAEJ,SAASC,YACLD,gBAAkBA,iBAAmBE,SAASC,cAAc,UAC5D,OAAOH,gBAAgBI,UAAU,OAErCrE,MAAMkE,UAAYA,UAQlB,SAASI,kBAAkBC,KACvB,IAAIC,IAAM,IAAIC,MACd,IAAIC,QAAU,WACV,GAAIF,IAAK,CACLA,IAAIG,IAAM,GACVH,IAAM,OAGd,OAAO,IAAI9D,QAAQ,SAAUkE,QAASC,QAClCL,IAAIM,OAAS,SAAUC,OACnBL,UACAE,QAAQL,MAEZC,IAAIQ,QAAU,SAAUD,OACpBL,UACAG,OAAOnF,IAAIuF,cAAcvF,IAAIW,YAAY6E,kCAAmCvE,IAAK,4BAA8B4D,IAAM,OAEzHC,IAAIG,IAAMJ,KACXG,SAEP1E,MAAMsE,kBAAoBA,kBAU1B,SAASa,YAAYR,IAAKS,gBACtB,IAAIZ,IAAM,IAAIC,MACd,IAAIC,QAAU,WACV,GAAIF,IAAK,CACLA,IAAIG,IAAM,GACVH,IAAM,OAGd,OAAO,IAAI9D,QAAQ,SAAUkE,QAASC,QAClCL,IAAIM,OAAS,SAAUC,OACnB,IAAIM,OAASnB,YACb,IAAIoB,GAAKd,IAAIe,OAAQC,GAAKhB,IAAIiB,MAAOC,GAAKJ,GAAKE,GAC/C,IAAIG,GAAIC,GACR,GAAIJ,KAAO,GAAK,IAAME,GAAI,CACtBb,OAAOnF,IAAIuF,cAAcvF,IAAIW,YAAYwF,8BAA+BlF,IAAK,wBAA0BgE,IAAM,UAE5G,CACD,GAAIS,gBAAkB,EAAG,CACrBA,eAAkBM,GAAK,EAAKF,GAAKF,GAErC,GAAII,GAAK,EAAG,CACRC,GAAMP,eAAiBI,GAAMJ,eAAiBI,GAC9CI,GAAKE,KAAKC,MAAMJ,GAAKD,QAEpB,CACDE,GAAMR,eAAiBE,GAAMF,eAAiBE,GAC9CK,GAAKG,KAAKC,MAAMH,GAAKF,IAEzBL,OAAOI,MAAQE,GACfN,OAAOE,OAASK,GAChBP,OAAOW,WAAW,MAAMC,UAAUzB,IAAK,EAAG,EAAGmB,GAAIC,IACjDhB,QAAQS,OAAOa,aAEnBxB,WAEJF,IAAIQ,QAAU,SAAUD,OACpBL,UACAG,OAAOnF,IAAIuF,cAAcvF,IAAIW,YAAY6E,kCAAmCvE,IAAK,4BAA8BgE,IAAM,OAEzHH,IAAIG,IAAMA,MAGlB3E,MAAMmF,YAAcA,aA3PxB,CA4PGnF,MAAQN,IAAIM,QAAUN,IAAIM,YA9PjC,CA+PGN,MAAQA,SACX,IAAIA,KACJ,SAAWA,KACP,IAAIM,OACJ,SAAWA,OACP,IAAIU,QAAUhB,IAAIgB,QAClB,IAAIC,IAAM,oBACV,IAAIwF,MACJ,SAAWA,MAMP,SAASC,iBACL,OAAO1G,IAAIK,OAAOsG,aAAe3G,IAAIK,OAAOuG,mBAAqB5G,IAAIK,OAAOwG,gBAAkB7G,IAAIK,OAAOyG,cAW7G,SAASC,0BAA0BC,WAAYC,MAAOC,IAAKC,SACvD,IAAIC,OACJ,GAAIH,MAAO,CACPG,QACIjE,KAAM8D,MAAM9D,KACZgE,QAASF,MAAM9D,MAGvB,OAAOnD,IAAIuF,cAAcyB,WAAYE,IAAKC,QAASC,QASvD,SAASC,kBAAkBC,IAAKC,UAC5B,IAAIC,KAAO,KACX,IAAIC,kBAAoBf,iBACxB,GAAIe,mBAAqB,KAAM,CAC3B,IAAIC,YAAc,IAAID,kBACtBC,YAAYC,OAAOL,KACnBE,KAAOE,YAAYE,QAAQL,cAE1B,CAEDC,KAAO,IAAIxH,IAAIK,OAAOoG,MAAMa,MAAQO,KAAMN,WAE9C,OAAOC,KAEXf,KAAKY,kBAAoBA,kBAQzB,SAASS,aAAaC,OAAQR,UAC1B,IAAIC,KAAO,KACX,IAAIC,kBAAoBf,iBACxB,GAAIe,mBAAqB,KAAM,CAC3B,IAAIC,YAAc,IAAID,kBACtBC,YAAYC,OAAOK,oBAAoBD,SACvCP,KAAOE,YAAYE,QAAQL,cAE1B,CAEDC,KAAO,IAAIxH,IAAIK,OAAOoG,MAAMuB,oBAAoBD,UAAYF,KAAMN,WAEtE,OAAOC,KAEXf,KAAKqB,aAAeA,aAQpB,SAASG,cAAcC,QAASX,UAC5B,GAAIA,gBAAkB,EAAG,CAAEA,SAAW,YACtC,IAAIQ,OAASG,QAAQC,MAAM,KAAK,GAChC,OAAOL,aAAaC,OAAQR,UAEhCd,KAAKwB,cAAgBA,cAOrB,SAASD,oBAAoBD,QACzB,IAAIK,MAAQjE,OAAOkE,KAAKN,QACxB,IAAIO,YAAc,IAAIC,YAAYH,MAAMtF,QACxC,IAAI0F,KAAO,IAAIC,WAAWH,aAC1B,IAAK,IAAII,EAAI,EAAGC,IAAMP,MAAMtF,OAAQ4F,EAAIC,MAAOD,EAAG,CAC9CF,KAAKE,GAAKN,MAAMQ,WAAWF,GAE/B,OAAOJ,YAEX7B,KAAKuB,oBAAsBA,oBAO3B,SAASa,mBAAmBC,SACxB,IAAIV,MAAQjE,OAAOkE,KAAKS,SACxB,IAAIN,KAAO,IAAIC,WAAWL,MAAMtF,QAChC,IAAK,IAAI4F,EAAI,EAAGC,IAAMP,MAAMtF,OAAQ4F,EAAIC,MAAOD,EAAG,CAC9CF,KAAKE,GAAKN,MAAMQ,WAAWF,GAE/B,OAAOF,KAEX/B,KAAKoC,mBAAqBA,mBAO1B,SAASE,oBAAoBT,aACzB,IAAIF,MAAQ,IAAIK,WAAWH,aAC3B,OAAOU,mBAAmBZ,OAE9B3B,KAAKsC,oBAAsBA,oBAO3B,SAASC,mBAAmBZ,OACxB,IAAII,KAAO,GACX,IAAK,IAAIE,EAAI,EAAGC,IAAMP,MAAMa,WAAYP,EAAIC,MAAOD,EAAG,CAClDF,MAAQU,OAAOC,aAAaf,MAAMM,IAEtC,OAAOvE,OAAOiF,KAAKZ,MAEvB/B,KAAKuC,mBAAqBA,mBAO1B,SAASK,sBAAsB7B,MAC3B,IAAI8B,OAAS,IAAIC,WACjB,IAAIC,OAAS,WAAc,OAAOF,OAAOG,SACzC,OAAO,IAAIzI,QAAQ,SAAUkE,QAASC,QAClCmE,OAAOlE,OAAS,WACZF,QAAQoE,OAAOI,SAEnBJ,OAAOhE,QAAU,WACbH,OAAO4B,0BAA0B/G,IAAIW,YAAYgJ,kCAAmCL,OAAOM,MAAO3I,IAAK,4CAE3GqI,OAAOO,kBAAkBrC,OAC1BgC,QAEP/C,KAAK4C,sBAAwBA,sBAO7B,SAASS,qBAAqBtC,MAC1B,OAAO,IAAIxG,QAAQ,SAAUkE,QAASC,OAAQ4E,UAC1CA,SAASV,sBAAsB7B,OAC1BwC,KAAK,SAAUN,QAChBxE,QAAQ,IAAIuD,WAAWiB,WAEtBO,MAAM,SAAUL,OACjBzE,OAAOyE,WAInBnD,KAAKqD,qBAAuBA,qBAO5B,SAASI,eAAe1C,KAAM2C,QAC1B,GAAIA,cAAgB,EAAG,CAAEA,OAAS,QAClC,IAAIb,OAAS,IAAIC,WACjB,IAAIC,OAAS,WAAc,OAAOF,OAAOG,SACzC,OAAO,IAAIzI,QAAQ,SAAUkE,QAASC,QAClCmE,OAAOlE,OAAS,WACZF,QAAQoE,OAAOI,SAEnBJ,OAAOhE,QAAU,WACbH,OAAO4B,0BAA0B/G,IAAIW,YAAYgJ,kCAAmCL,OAAOM,MAAO3I,IAAK,qCAE3GqI,OAAOc,WAAW5C,KAAM2C,SACzBX,QAEP/C,KAAKyD,eAAiBA,eAOtB,SAASG,kBAAkB7C,MACvB,IAAI8B,OAAS,IAAIC,WACjB,IAAIC,OAAS,WAAc,OAAOF,OAAOG,SACzC,OAAO,IAAIzI,QAAQ,SAAUkE,QAASC,QAClCmE,OAAOlE,OAAS,WACZF,QAAQoE,OAAOI,SAEnBJ,OAAOhE,QAAU,WACbH,OAAO4B,0BAA0B/G,IAAIW,YAAYgJ,kCAAmCL,OAAOM,MAAO3I,IAAK,wCAE3GqI,OAAOgB,cAAc9C,OACtBgC,QAEP/C,KAAK4D,kBAAoBA,kBAMzB5D,KAAK8D,IAAM,WACP,OAAOvK,IAAIK,OAAOkK,KAAOvK,IAAIK,OAAOmK,UAD7B,IAjOf,CAoOG/D,KAAOnG,MAAMmG,OAASnG,MAAMmG,WAxOnC,CAyOGnG,MAAQN,IAAIM,QAAUN,IAAIM,YA3OjC,CA4OGN,MAAQA,SAQX,IAAIA,KACJ,SAAWA,KACP,IAAIM,OACJ,SAAWA,OAEP,IAAImK,kBACAC,EAAG,IACHC,KAAM,KAEVzK,EAAE0K,cAAc,UAAW,SAAUC,QAASC,gBAAiBC,OAC3D,GAAI/K,IAAIK,OAAO2K,WACTH,QAAQI,UAAaJ,QAAQI,WAAa,UACvCJ,QAAQrC,OAAUxI,IAAIK,OAAOkI,aAAesC,QAAQrC,gBAAgBD,aAChEvI,IAAIK,OAAOoG,MAAQoE,QAAQrC,gBAAgBxI,IAAIK,OAAOoG,OAAU,CACzE,IAAIyE,gBACJ,OACIC,KAAM,SAAUC,QAASC,UAErB,IAAIC,IAAM,IAAIC,eACd,IAAI1G,IAAMgG,QAAQhG,IAClB,IAAIgD,KAAOgD,QAAQhD,KACnB,IAAI2D,MAAQX,QAAQW,OAAS,KAE7B,IAAIP,SAAWJ,QAAQY,cAAgB,OACvC,IAAIjD,KAAOqC,QAAQrC,MAAQ,KAC3B,IAAIkD,SAAWb,QAAQa,UAAY,KACnC,IAAIC,SAAWd,QAAQc,UAAY,KACnC,IAAIC,UAAYP,UAAY,aAE5BC,IAAIO,iBAAiB,OAAQ,WACzB,IAAIC,SACJA,MAAMjB,QAAQI,UAAYK,IAAIS,SAC9BH,UAAUnB,iBAAiBa,IAAIU,SAAWV,IAAIU,OAAQV,IAAIW,WAAYH,MAAOR,IAAIY,2BAGrFZ,IAAIO,iBAAiB,QAAS,WAC1B,IAAIC,SACJA,MAAMjB,QAAQI,UAAYK,IAAIS,SAE9BH,UAAUN,IAAIU,OAAQV,IAAIW,WAAYH,MAAOR,IAAIY,2BAGrDZ,IAAIO,iBAAiB,QAAS,WAC1B,IAAIC,SACJA,MAAMjB,QAAQI,UAAYK,IAAIS,SAE9BH,UAAUN,IAAIU,OAAQV,IAAIW,WAAYH,MAAOR,IAAIY,2BAGrDhB,gBAAkB,WACdI,IAAI7B,SAER6B,IAAIa,KAAKtE,KAAMhD,IAAK2G,MAAOE,SAAUC,UAErC,IAAK,IAAIjD,KAAK0C,QAAS,CACnB,GAAIA,QAAQ5H,eAAekF,GAAI,CAC3B4C,IAAIc,iBAAiB1D,EAAG0C,QAAQ1C,KAGxC4C,IAAIG,aAAeR,SACnBK,IAAIH,KAAK3C,OAEbiB,MAAO,WACH,GAAIyB,gBAAiB,CACjBA,yBA7DxB,CAmEG5K,MAAQN,IAAIM,QAAUN,IAAIM,YArEjC,CAsEGN,MAAQA,SAEX,IAAIA,KACJ,SAAWA,KACP,IAAIM,OACJ,SAAWA,OACP,IAAIW,IAAM,wBAKV,IAAIoL,SAAY,WACZ,SAASA,YAWTA,SAASC,YAAc,SAAUtJ,KAAMuJ,SACnC,IAAIC,GAAK,IAAIC,KAAKzJ,KAAK0J,WACvB,IAAIC,QAAUH,GAAGE,UACjB,IAAIE,OAASL,QAAU,MACvB,IAAIM,UAAYF,QAAUC,OAC1BJ,GAAGM,QAAQD,WACX,OAAOL,IAQXH,SAASU,uBAAyB,SAAUC,YACxC,IAAIC,SAAWD,WAAW7E,MAAM,KAAM+E,UAAYD,SAAS,GAAG9E,MAAM,KACpE,IAAIgF,UAAWC,SAAUC,WACzB,GAAIJ,SAAS,GAAI,CACbE,UAAYF,SAAS,GAAG9E,MAAM,KAC9BiF,SAAWD,UAAU,GAAGhF,MAAM,KAElC,GAAIgF,UAAW,CACXE,WAAa,IAAIZ,KAAKS,UAAU,GAAIA,UAAU,GAAK,EAAGA,UAAU,GAAIC,UAAU,GAAIA,UAAU,GAAIC,SAAS,GAAIA,SAAS,QAErH,CACD,GAAIF,UAAU,GAAI,CACdG,WAAa,IAAIZ,KAAKS,UAAU,GAAIA,UAAU,GAAK,EAAGA,UAAU,SAE/D,GAAIA,UAAU,GAAI,CACnBG,WAAa,IAAIZ,KAAKS,UAAU,GAAIA,UAAU,GAAK,OAElD,CACDG,WAAa,IAAIZ,KAAKS,UAAU,KAGxC,OAAOG,YASXhB,SAASiB,uBAAyB,SAAUC,KAAMC,QAC9C,GAAIA,cAAgB,EAAG,CAAEA,OAAS,OAClC,IAAIC,cACJ,OAAQD,QACJ,IAAK,OACL,IAAK,QACL,IAAK,OACL,IAAK,OACL,IAAK,MACL,IAAK,MACL,IAAK,OACD,MACJ,QACIE,QAAQC,KAAK1M,IAAM,mBAAqBuM,QACxCA,OAAS,OAEjBC,cAAgBF,KAAKK,cACrB,GAAI,SAAWJ,OAAQ,CACnB,OAAOC,cAEXA,eAAkB,IAAMpB,SAASwB,2BAA2BN,KAAKO,WAAa,GAC9E,GAAI,UAAYN,OAAQ,CACpB,OAAOC,cAEXA,eAAkB,IAAMpB,SAASwB,2BAA2BN,KAAKQ,WACjE,GAAI,SAAWP,OAAQ,CACnB,OAAOC,cAEXA,eAAkB,IAAMpB,SAASwB,2BAA2BN,KAAKS,YACjE,GAAI,SAAWR,OAAQ,CACnB,OAAOC,cAEXA,eAAkB,IAAMpB,SAASwB,2BAA2BN,KAAKU,cACjE,GAAI,QAAUT,OAAQ,CAClB,OAAOC,cAEXA,eAAkB,IAAMpB,SAASwB,2BAA2BN,KAAKW,cACjE,GAAI,QAAUV,OAAQ,CAClB,OAAOC,cAEXA,eAAkB,IAAMvE,QAAQqE,KAAKY,kBAAoB,KAAMC,QAAQ,IAAIpM,MAAM,EAAG,GACpF,OAAOyL,eAQXpB,SAASgC,8BAAgC,SAAUrB,YAC/C,IAAIC,SAAWD,WAAW7E,MAAM,KAAM+E,UAAYD,SAAS,GAAG9E,MAAM,KACpE,IAAIgF,UAAWE,WACf,GAAIJ,SAAS,GAAI,CACbE,UAAYF,SAAS,GAAG9E,MAAM,KAElC,GAAIgF,UAAW,CACXE,WAAa,IAAIZ,KAAKS,UAAU,GAAIA,UAAU,GAAK,EAAGA,UAAU,GAAIC,UAAU,GAAIA,UAAU,GAAIA,UAAU,GAAIA,UAAU,QAEvH,CACD,GAAID,UAAU,GAAI,CACdG,WAAa,IAAIZ,KAAKS,UAAU,GAAIA,UAAU,GAAK,EAAGA,UAAU,SAE/D,GAAIA,UAAU,GAAI,CACnBG,WAAa,IAAIZ,KAAKS,UAAU,GAAIA,UAAU,GAAK,OAElD,CACDG,WAAa,IAAIZ,KAAKS,UAAU,KAGxC,OAAOG,YASXhB,SAASiC,8BAAgC,SAAUf,KAAMC,QACrD,GAAIA,cAAgB,EAAG,CAAEA,OAAS,OAClC,IAAIe,iBACJ,OAAQf,QACJ,IAAK,OACL,IAAK,QACL,IAAK,OACL,IAAK,OACL,IAAK,MACL,IAAK,MACL,IAAK,OACD,MACJ,QACIE,QAAQC,KAAK1M,IAAM,mBAAqBuM,QACxCA,OAAS,OAEjBe,iBAAmBhB,KAAKK,cACxB,GAAI,SAAWJ,OAAQ,CACnB,OAAOe,iBAEXA,kBAAqB,IAAMlC,SAASwB,2BAA2BN,KAAKO,WAAa,GACjF,GAAI,UAAYN,OAAQ,CACpB,OAAOe,iBAEXA,kBAAqB,IAAMlC,SAASwB,2BAA2BN,KAAKQ,WACpE,GAAI,SAAWP,OAAQ,CACnB,OAAOe,iBAEXA,kBAAqB,IAAMlC,SAASwB,2BAA2BN,KAAKS,YACpE,GAAI,SAAWR,OAAQ,CACnB,OAAOe,iBAEXA,kBAAqB,IAAMlC,SAASwB,2BAA2BN,KAAKU,cACpE,GAAI,QAAUT,OAAQ,CAClB,OAAOe,iBAEXA,kBAAqB,IAAMlC,SAASwB,2BAA2BN,KAAKW,cACpE,GAAI,QAAUV,OAAQ,CAClB,OAAOe,iBAEXA,kBAAqB,IAAMrF,QAAQqE,KAAKY,kBAAoB,KAAMC,QAAQ,IAAIpM,MAAM,EAAG,GACvF,OAAOuM,kBAUXlC,SAASwB,2BAA6B,SAAUW,KAC5C,GAAIA,IAAM,GAAKA,IAAM,IAAK,CACtB,OAAO,KAEX,GAAIA,IAAM,GAAI,CACV,MAAO,IAAMA,IAEjB,MAAO,GAAKA,KAEhB,OAAOnC,SAlMI,GAoMf/L,MAAM+L,SAAWA,UA1MrB,CA2MG/L,MAAQN,IAAIM,QAAUN,IAAIM,YA7MjC,CA8MGN,MAAQA,SAEX,IAAIA,KACJ,SAAWA,KACP,IAAIM,OACJ,SAAWA,OACP,IAAIW,IAAM,wBAMV,IAAIwN,SAAY,WACZ,SAASA,YAYTA,SAASC,mBAAqB,SAAUC,IAAK1J,IAAK2J,OAC9C,GAAI3J,WAAa,EAAG,CAAEA,IAAM,KAC5B,GAAI2J,aAAe,EAAG,CAAEA,MAAQ,KAChC,IAAIC,WAAaJ,SAASK,gBAC1B,IAAIC,SAAWF,WAAWF,KAC1B,IACI,IAAKI,SAAU,CACX,GAAI9J,IAAK,CACL,IAAI+J,KAAOP,SAASQ,mBAAmBhK,KACvC8J,SAAW7O,EAAE8O,MAAME,KAAKP,SAEvB,CACDI,SAAW7O,EAAEyO,KAGjB,GAAII,UAAY,EAAG,CACf,KAAO,yBAA2BJ,IAAM,KAAO1J,IAAM,IAEzD,GAAIA,KAAO2J,MAAO,CACdC,WAAWF,KAAOI,WAI9B,MAAOI,WACHzB,QAAQ9D,MAAM3I,IAAMkO,WACpB,OAAO,KAEX,OAAOJ,UAMXN,SAASW,MAAQ,WACbX,SAASY,YAAc,KACvBZ,SAASa,WAAa,MAE1Bb,SAASc,OAAS,SAAUZ,IAAK1J,IAAK2J,OAClC,IAAIY,SAAW,KACf,IAAIC,IACJ,IAAIV,SACJ,GAAIJ,eAAe1O,OAAQ,CACvB8O,SAAWJ,QAEV,CACDI,SAAWN,SAASC,mBAAmBC,IAAK1J,IAAK2J,OAErD,GAAI,MAAQ5O,IAAIK,OAAOqP,MAAO,CAC1BF,SAAWE,MAAMC,QAAQZ,SAASa,QAClCH,IAAM,SAAUjH,MACZ,OAAOgH,SAASK,OAAOrH,YAG1B,GAAI,MAAQxI,IAAIK,OAAOyP,EAAG,CAC3BN,SAAWM,EAAEN,SAAST,SAASC,QAC/BS,IAAM,SAAUjH,MAEZ,OAAOgH,SAAShH,MAAMuH,QAAQ,SAAU,SAG3C,CACDrC,QAAQC,KAAK1M,IAAM,uCACnByM,QAAQC,KAAK,4CAEjB,OAAO8B,KAKXhB,SAASK,cAAgB,WACrB,IAAKL,SAASY,YAAa,CACvBZ,SAASY,eAEb,OAAOZ,SAASY,aAGpBZ,SAASuB,aAAe,WACpB,IAAKvB,SAASa,WAAY,CACtBb,SAASa,cAEb,OAAOb,SAASa,YAGpBb,SAASQ,mBAAqB,SAAUhK,KACpC,IAAIgL,UAAYxB,SAASuB,eACzB,IAAIhB,KAAOiB,UAAUhL,KACrB,IAAK+J,KAAM,CACP9O,EAAEgQ,MACErL,IAAKI,IACLkL,OAAQ,MACR3E,MAAO,MACPP,SAAU,OACVmF,QAAS,SAAU5H,MACfwG,KAAOxG,MAEXoB,MAAO,SAAUpB,KAAMwD,QACnB,KAAO,gCAAkCA,UAIjDiE,UAAUhL,KAAO+J,KAErB,OAAOA,MAEX,OAAOP,SArHI,GAuHfnO,MAAMmO,SAAWA,UA9HrB,CA+HGnO,MAAQN,IAAIM,QAAUN,IAAIM,YAjIjC,CAkIGN,MAAQA,SAEX,OAAOA,IAAIM","sourcesContent":["﻿/*!\n * cdp.tools.js 2.0.0\n *\n * Date: 2017-07-31T02:19:37.107Z\n */\n(function (root, factory) { if (typeof define === \"function\" && define.amd) { define([\"cdp.core\", \"cdp.promise\"], function () { return factory(root.CDP || (root.CDP = {}), root.jQuery || root.$); }); } else { factory(root.CDP || (root.CDP = {}), root.jQuery || root.$); } }(((this || 0).self || global), function (CDP, $) { CDP.Tools = CDP.Tools || {};\nvar CDP;\n(function (CDP) {\n    /**\n     * @enum  RESULT_CODE_BASE\n     * @brief リザルトコードのオフセット値\n     */\n    var RESULT_CODE_BASE;\n    (function (RESULT_CODE_BASE) {\n        RESULT_CODE_BASE[RESULT_CODE_BASE[\"CDP_TOOLS_DECLARERATION\"] = 0] = \"CDP_TOOLS_DECLARERATION\";\n        RESULT_CODE_BASE[RESULT_CODE_BASE[\"CDP_TOOLS\"] = 4 * CDP.MODULE_RESULT_CODE_RANGE_CDP] = \"CDP_TOOLS\";\n    })(RESULT_CODE_BASE = CDP.RESULT_CODE_BASE || (CDP.RESULT_CODE_BASE = {}));\n    ///////////////////////////////////////////////////////////////////////\n    // module error declaration:\n    var FUNCTION_CODE_RANGE = 10;\n    /**\n     * @enum  LOCAL_CODE_BASE\n     * @brief cdp.tools 内のローカルコードオフセット値\n     */\n    var LOCAL_CODE_BASE;\n    (function (LOCAL_CODE_BASE) {\n        LOCAL_CODE_BASE[LOCAL_CODE_BASE[\"FUNCTIONS\"] = 0] = \"FUNCTIONS\";\n        LOCAL_CODE_BASE[LOCAL_CODE_BASE[\"BLOB\"] = 1 * FUNCTION_CODE_RANGE] = \"BLOB\";\n    })(LOCAL_CODE_BASE || (LOCAL_CODE_BASE = {}));\n    /* tslint:disable:max-line-length */\n    /**\n     * @enum  RESULT_CODE\n     * @brief cdp.tools のエラーコード定義\n     */\n    var RESULT_CODE;\n    (function (RESULT_CODE) {\n        RESULT_CODE[RESULT_CODE[\"ERROR_CDP_TOOLS_DECLARATION\"] = 0] = \"ERROR_CDP_TOOLS_DECLARATION\";\n        RESULT_CODE[RESULT_CODE[\"ERROR_CDP_TOOLS_IMAGE_LOAD_FAILED\"] = CDP.DECLARE_ERROR_CODE(RESULT_CODE_BASE.CDP_TOOLS, LOCAL_CODE_BASE.FUNCTIONS + 1, \"image load failed.\")] = \"ERROR_CDP_TOOLS_IMAGE_LOAD_FAILED\";\n        RESULT_CODE[RESULT_CODE[\"ERROR_CDP_TOOLS_INVALID_IMAGE\"] = CDP.DECLARE_ERROR_CODE(RESULT_CODE_BASE.CDP_TOOLS, LOCAL_CODE_BASE.FUNCTIONS + 2, \"invalid image.\")] = \"ERROR_CDP_TOOLS_INVALID_IMAGE\";\n        RESULT_CODE[RESULT_CODE[\"ERROR_CDP_TOOLS_FILE_READER_ERROR\"] = CDP.DECLARE_ERROR_CODE(RESULT_CODE_BASE.CDP_TOOLS, LOCAL_CODE_BASE.BLOB + 1, \"FileReader method failed.\")] = \"ERROR_CDP_TOOLS_FILE_READER_ERROR\";\n    })(RESULT_CODE = CDP.RESULT_CODE || (CDP.RESULT_CODE = {}));\n    /* tslint:enable:max-line-length */\n})(CDP || (CDP = {}));\n/// <reference types=\"jquery\" />\nvar CDP;\n(function (CDP) {\n    var Tools;\n    (function (Tools) {\n        var Promise = CDP.Promise;\n        var TAG = \"[CDP.Tools.Functions] \";\n        /**\n         * Math.abs よりも高速な abs\n         */\n        function abs(x) {\n            return x >= 0 ? x : -x;\n        }\n        Tools.abs = abs;\n        /**\n         * Math.max よりも高速な max\n         */\n        function max(lhs, rhs) {\n            return lhs >= rhs ? lhs : rhs;\n        }\n        Tools.max = max;\n        /**\n         * Math.min よりも高速な min\n         */\n        function min(lhs, rhs) {\n            return lhs <= rhs ? lhs : rhs;\n        }\n        Tools.min = min;\n        /**\n         * 数値を 0 詰めして文字列を生成\n         */\n        function toZeroPadding(no, limit) {\n            var signed = \"\";\n            no = Number(no);\n            if (isNaN(no) || isNaN(limit) || limit <= 0) {\n                return null;\n            }\n            if (no < 0) {\n                no = Tools.abs(no);\n                signed = \"-\";\n            }\n            return signed + (Array(limit).join(\"0\") + no).slice(-limit);\n        }\n        Tools.toZeroPadding = toZeroPadding;\n        /**\n         * 多重継承のための実行時継承関数\n         *\n         * Sub Class 候補オブジェクトに対して Super Class 候補オブジェクトを直前の Super Class として挿入する。\n         * prototype のみコピーする。\n         * インスタンスメンバをコピーしたい場合、Super Class が疑似コンストラクタを提供する必要がある。\n         * 詳細は cdp.tools.Functions.spec.ts を参照。\n         *\n         * @param subClass   {constructor} [in] オブジェクトの constructor を指定\n         * @param superClass {constructor} [in] オブジェクトの constructor を指定\n         */\n        function inherit(subClass, superClass) {\n            var _prototype = subClass.prototype;\n            function _inherit() {\n                this.constructor = subClass;\n            }\n            _inherit.prototype = superClass.prototype;\n            subClass.prototype = new _inherit();\n            $.extend(subClass.prototype, _prototype);\n        }\n        Tools.inherit = inherit;\n        /**\n         * mixin 関数\n         *\n         * TypeScript Official Site に載っている mixin 関数\n         * http://www.typescriptlang.org/Handbook#mixins\n         * 既に定義されているオブジェクトから、新規にオブジェクトを合成する。\n         *\n         * @param derived {constructor}    [in] 合成されるオブジェクトの constructor を指定\n         * @param bases   {constructor...} [in] 合成元オブジェクトの constructor を指定 (可変引数)\n         */\n        function mixin(derived) {\n            var bases = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                bases[_i - 1] = arguments[_i];\n            }\n            bases.forEach(function (base) {\n                Object.getOwnPropertyNames(base.prototype).forEach(function (name) {\n                    derived.prototype[name] = base.prototype[name];\n                });\n            });\n        }\n        Tools.mixin = mixin;\n        /**\n         * \\~english\n         * Helper function to correctly set up the prototype chain, for subclasses.\n         * The function behavior is same as extend() function of Backbone.js.\n         *\n         * @param protoProps  {Object} [in] set prototype properties as object.\n         * @param staticProps {Object} [in] set static properties as object.\n         * @return {Object} subclass constructor.\n         *\n         * \\~japanese\n         * クラス継承のためのヘルパー関数\n         * Backbone.js extend() 関数と同等\n         *\n         * @param protoProps  {Object} [in] prototype properties をオブジェクトで指定\n         * @param staticProps {Object} [in] static properties をオブジェクトで指定\n         * @return {Object} サブクラスのコンストラクタ\n         */\n        function extend(protoProps, staticProps) {\n            var parent = this;\n            var child;\n            if (protoProps && protoProps.hasOwnProperty(\"constructor\")) {\n                child = protoProps.constructor;\n            }\n            else {\n                child = function () {\n                    return parent.apply(this, arguments);\n                };\n            }\n            $.extend(child, parent, staticProps);\n            var Surrogate = function () {\n                this.constructor = child;\n            };\n            Surrogate.prototype = parent.prototype;\n            child.prototype = new Surrogate;\n            if (protoProps) {\n                $.extend(child.prototype, protoProps);\n            }\n            child.__super__ = parent.prototype;\n            return child;\n        }\n        Tools.extend = extend;\n        /**\n         * DPI 取得\n         */\n        function getDevicePixcelRatio() {\n            var mediaQuery;\n            var is_firefox = navigator.userAgent.toLowerCase().indexOf(\"firefox\") > -1;\n            if (null != window.devicePixelRatio && !is_firefox) {\n                return window.devicePixelRatio;\n            }\n            else if (window.matchMedia) {\n                mediaQuery =\n                    \"(-webkit-min-device-pixel-ratio: 1.5),\\\n                    (min--moz-device-pixel-ratio: 1.5),\\\n                    (-o-min-device-pixel-ratio: 3/2),\\\n                    (min-resolution: 1.5dppx)\";\n                if (window.matchMedia(mediaQuery).matches) {\n                    return 1.5;\n                }\n                mediaQuery =\n                    \"(-webkit-min-device-pixel-ratio: 2),\\\n                    (min--moz-device-pixel-ratio: 2),\\\n                    (-o-min-device-pixel-ratio: 2/1),\\\n                    (min-resolution: 2dppx)\";\n                if (window.matchMedia(mediaQuery).matches) {\n                    return 2;\n                }\n                mediaQuery =\n                    \"(-webkit-min-device-pixel-ratio: 0.75),\\\n                    (min--moz-device-pixel-ratio: 0.75),\\\n                    (-o-min-device-pixel-ratio: 3/4),\\\n                    (min-resolution: 0.75dppx)\";\n                if (window.matchMedia(mediaQuery).matches) {\n                    return 0.7;\n                }\n            }\n            else {\n                return 1;\n            }\n        }\n        Tools.getDevicePixcelRatio = getDevicePixcelRatio;\n        // Canvas element のキャッシュ\n        var s_canvasFactory;\n        // キャッシュ済みの Canvas を取得する\n        function getCanvas() {\n            s_canvasFactory = s_canvasFactory || document.createElement(\"canvas\");\n            return s_canvasFactory.cloneNode(false);\n        }\n        Tools.getCanvas = getCanvas;\n        /**\n         * 画像リソースのロード完了を保証\n         * ブラウザ既定のプログレッシブロードを走らせないため.\n         *\n         * @param  {String} url [in] url (data-url)\n         * @return {IPromise<string>} 表示可能な url\n         */\n        function ensureImageLoaded(url) {\n            var img = new Image();\n            var destroy = function () {\n                if (img) {\n                    img.src = \"\"; // 読み込み停止\n                    img = null;\n                }\n            };\n            return new Promise(function (resolve, reject) {\n                img.onload = function (event) {\n                    destroy();\n                    resolve(url);\n                };\n                img.onerror = function (event) {\n                    destroy();\n                    reject(CDP.makeErrorInfo(CDP.RESULT_CODE.ERROR_CDP_TOOLS_IMAGE_LOAD_FAILED, TAG, \"image load failed. [url: \" + url + \"]\"));\n                };\n                img.src = url;\n            }, destroy);\n        }\n        Tools.ensureImageLoaded = ensureImageLoaded;\n        /**\n         * 画像のリサイズ\n         * 指定した長辺の長さにアスペクト比を維持してリサイズを行う\n         * longSideLength より小さな場合はオリジナルサイズで data-url を返却する\n         *\n         * @param  {String} src            [in] image に指定するソース\n         * @param  {Number} longSideLength [in] リサイズに使用する長辺の最大値を指定\n         * @return {IPromise<string>} base64 data url を返却\n         */\n        function resizeImage(src, longSideLength) {\n            var img = new Image();\n            var destroy = function () {\n                if (img) {\n                    img.src = \"\"; // 読み込み停止\n                    img = null;\n                }\n            };\n            return new Promise(function (resolve, reject) {\n                img.onload = function (event) {\n                    var canvas = getCanvas();\n                    var ih = img.height, iw = img.width, ia = ih / iw;\n                    var cw, ch;\n                    if (iw === 0 || 0 === ia) {\n                        reject(CDP.makeErrorInfo(CDP.RESULT_CODE.ERROR_CDP_TOOLS_INVALID_IMAGE, TAG, \"invalid image. [src: \" + src + \"]\"));\n                    }\n                    else {\n                        if (longSideLength <= 0) {\n                            longSideLength = (ia < 1) ? iw : ih;\n                        }\n                        if (ia < 1) {\n                            cw = (longSideLength < iw) ? longSideLength : iw;\n                            ch = Math.round(cw * ia);\n                        }\n                        else {\n                            ch = (longSideLength < ih) ? longSideLength : ih;\n                            cw = Math.round(ch / ia);\n                        }\n                        canvas.width = cw;\n                        canvas.height = ch;\n                        canvas.getContext(\"2d\").drawImage(img, 0, 0, cw, ch);\n                        resolve(canvas.toDataURL());\n                    }\n                    destroy();\n                };\n                img.onerror = function (event) {\n                    destroy();\n                    reject(CDP.makeErrorInfo(CDP.RESULT_CODE.ERROR_CDP_TOOLS_IMAGE_LOAD_FAILED, TAG, \"image load failed. [src: \" + src + \"]\"));\n                };\n                img.src = src;\n            });\n        }\n        Tools.resizeImage = resizeImage;\n    })(Tools = CDP.Tools || (CDP.Tools = {}));\n})(CDP || (CDP = {}));\nvar CDP;\n(function (CDP) {\n    var Tools;\n    (function (Tools) {\n        var Promise = CDP.Promise;\n        var TAG = \"[CDP.Tools.Blob] \";\n        var Blob;\n        (function (Blob) {\n            /**\n             * Get BlobBuilder\n             *\n             * @return {any} BlobBuilder\n             */\n            function getBlobBuilder() {\n                return CDP.global.BlobBuilder || CDP.global.WebKitBlobBuilder || CDP.global.MozBlobBuilder || CDP.global.MSBlobBuilder;\n            }\n            /**\n             * エラー情報生成 from DOMError\n             *\n             * @param  {RESULT_CODE} resultCode [in] RESULT_CODE を指定\n             * @param  {DOMError}    cause      [in] 下位の DOM エラーを指定\n             * @param  {String}      [tag]      [in] TAG を指定\n             * @param  {String}      [message]  [in] メッセージを指定\n             * @return {ErrorInfo} エラーオブジェクト\n             */\n            function makeErrorInfoFromDOMError(resultCode, cause, tag, message) {\n                var _cause;\n                if (cause) {\n                    _cause = {\n                        name: cause.name,\n                        message: cause.name,\n                    };\n                }\n                return CDP.makeErrorInfo(resultCode, tag, message, _cause);\n            }\n            /**\n             * ArrayBuffer to Blob\n             *\n             * @param buf {ArrayBuffer} [in] ArrayBuffer data\n             * @param mimeType {string} [in] MimeType of data\n             * @return {Blob} Blob data\n             */\n            function arrayBufferToBlob(buf, mimeType) {\n                var blob = null;\n                var blobBuilderObject = getBlobBuilder();\n                if (blobBuilderObject != null) {\n                    var blobBuilder = new blobBuilderObject();\n                    blobBuilder.append(buf);\n                    blob = blobBuilder.getBlob(mimeType);\n                }\n                else {\n                    // Android 4.4 KitKat Chromium WebView\n                    blob = new CDP.global.Blob([buf], { type: mimeType });\n                }\n                return blob;\n            }\n            Blob.arrayBufferToBlob = arrayBufferToBlob;\n            /**\n             * Base64 string to Blob\n             *\n             * @param base64 {string} [in] Base64 string data\n             * @param mimeType {string} [in] MimeType of data\n             * @return {Blob} Blob data\n             */\n            function base64ToBlob(base64, mimeType) {\n                var blob = null;\n                var blobBuilderObject = getBlobBuilder();\n                if (blobBuilderObject != null) {\n                    var blobBuilder = new blobBuilderObject();\n                    blobBuilder.append(base64ToArrayBuffer(base64));\n                    blob = blobBuilder.getBlob(mimeType);\n                }\n                else {\n                    // Android 4.4 KitKat Chromium WebView\n                    blob = new CDP.global.Blob([base64ToArrayBuffer(base64)], { type: mimeType });\n                }\n                return blob;\n            }\n            Blob.base64ToBlob = base64ToBlob;\n            /**\n             * data-url 形式画像から Blob オブジェクトへ変換\n             *\n             * @param  {String} dataUrl    [in] data url\n             * @param  {String} [mimeType] [in] mime type を指定. 既定では \"image/png\"\n             * @return {Blob} Blob インスタンス\n             */\n            function dataUrlToBlob(dataUrl, mimeType) {\n                if (mimeType === void 0) { mimeType = \"image/png\"; }\n                var base64 = dataUrl.split(\",\")[1];\n                return base64ToBlob(base64, mimeType);\n            }\n            Blob.dataUrlToBlob = dataUrlToBlob;\n            /**\n             * Base64 string to ArrayBuffer\n             *\n             * @param base64 {string} [in] Base64 string data\n             * @return {ArrayBuffer} ArrayBuffer data\n             */\n            function base64ToArrayBuffer(base64) {\n                var bytes = window.atob(base64);\n                var arrayBuffer = new ArrayBuffer(bytes.length);\n                var data = new Uint8Array(arrayBuffer);\n                for (var i = 0, len = bytes.length; i < len; ++i) {\n                    data[i] = bytes.charCodeAt(i);\n                }\n                return arrayBuffer;\n            }\n            Blob.base64ToArrayBuffer = base64ToArrayBuffer;\n            /**\n             * Base64 string to Uint8Array\n             *\n             * @param base64 {string} [in] Base64 string data\n             * @return {Uint8Array} Uint8Array data\n             */\n            function base64ToUint8Array(encoded) {\n                var bytes = window.atob(encoded);\n                var data = new Uint8Array(bytes.length);\n                for (var i = 0, len = bytes.length; i < len; ++i) {\n                    data[i] = bytes.charCodeAt(i);\n                }\n                return data;\n            }\n            Blob.base64ToUint8Array = base64ToUint8Array;\n            /**\n             * ArrayBuffer to base64 string\n             *\n             * @param arrayBuffer {ArrayBuffer} [in] ArrayBuffer data\n             * @return {string} base64 data\n             */\n            function arrayBufferToBase64(arrayBuffer) {\n                var bytes = new Uint8Array(arrayBuffer);\n                return uint8ArrayToBase64(bytes);\n            }\n            Blob.arrayBufferToBase64 = arrayBufferToBase64;\n            /**\n             * Uint8Array to base64 string\n             *\n             * @param bytes {Uint8Array} [in] Uint8Array data\n             * @return {string} base64 data\n             */\n            function uint8ArrayToBase64(bytes) {\n                var data = \"\";\n                for (var i = 0, len = bytes.byteLength; i < len; ++i) {\n                    data += String.fromCharCode(bytes[i]);\n                }\n                return window.btoa(data);\n            }\n            Blob.uint8ArrayToBase64 = uint8ArrayToBase64;\n            /**\n             * read Blob as ArrayBuffer\n             *\n             * @param  {Blob} blob [in] blob data\n             * @return {CDP.IPromise<ArrayBuffer>} promise object\n             */\n            function readBlobAsArrayBuffer(blob) {\n                var reader = new FileReader();\n                var cancel = function () { return reader.abort(); };\n                return new Promise(function (resolve, reject) {\n                    reader.onload = function () {\n                        resolve(reader.result);\n                    };\n                    reader.onerror = function () {\n                        reject(makeErrorInfoFromDOMError(CDP.RESULT_CODE.ERROR_CDP_TOOLS_FILE_READER_ERROR, reader.error, TAG, \"FileReader.readAsArrayBuffer() failed.\"));\n                    };\n                    reader.readAsArrayBuffer(blob);\n                }, cancel);\n            }\n            Blob.readBlobAsArrayBuffer = readBlobAsArrayBuffer;\n            /**\n             * read Blob as Uint8Array\n             *\n             * @param  {Blob} blob [in] blob data\n             * @return {CDP.IPromise<Uint8Array>} promise object\n             */\n            function readBlobAsUint8Array(blob) {\n                return new Promise(function (resolve, reject, dependOn) {\n                    dependOn(readBlobAsArrayBuffer(blob))\n                        .then(function (result) {\n                        resolve(new Uint8Array(result));\n                    })\n                        .catch(function (error) {\n                        reject(error);\n                    });\n                });\n            }\n            Blob.readBlobAsUint8Array = readBlobAsUint8Array;\n            /**\n             * read Blob as text string\n             *\n             * @param  {Blob} blob [in] blob data\n             * @return {CDP.IPromise<Uint8Array>} promise object\n             */\n            function readBlobAsText(blob, encode) {\n                if (encode === void 0) { encode = \"utf-8\"; }\n                var reader = new FileReader();\n                var cancel = function () { return reader.abort(); };\n                return new Promise(function (resolve, reject) {\n                    reader.onload = function () {\n                        resolve(reader.result);\n                    };\n                    reader.onerror = function () {\n                        reject(makeErrorInfoFromDOMError(CDP.RESULT_CODE.ERROR_CDP_TOOLS_FILE_READER_ERROR, reader.error, TAG, \"FileReader.readAsText() failed.\"));\n                    };\n                    reader.readAsText(blob, encode);\n                }, cancel);\n            }\n            Blob.readBlobAsText = readBlobAsText;\n            /**\n             * read Blob as Data URL\n             *\n             * @param  {Blob} blob [in] blob data\n             * @return {CDP.IPromise<string>} promise object\n             */\n            function readBlobAsDataURL(blob) {\n                var reader = new FileReader();\n                var cancel = function () { return reader.abort(); };\n                return new Promise(function (resolve, reject) {\n                    reader.onload = function () {\n                        resolve(reader.result);\n                    };\n                    reader.onerror = function () {\n                        reject(makeErrorInfoFromDOMError(CDP.RESULT_CODE.ERROR_CDP_TOOLS_FILE_READER_ERROR, reader.error, TAG, \"FileReader.readAsDataURL() failed.\"));\n                    };\n                    reader.readAsDataURL(blob);\n                }, cancel);\n            }\n            Blob.readBlobAsDataURL = readBlobAsDataURL;\n            /**\n             * URL Object\n             *\n             * @return {any} URL Object\n             */\n            Blob.URL = (function () {\n                return CDP.global.URL || CDP.global.webkitURL;\n            })();\n        })(Blob = Tools.Blob || (Tools.Blob = {}));\n    })(Tools = CDP.Tools || (CDP.Tools = {}));\n})(CDP || (CDP = {}));\n/**\n * @file  BinaryTransport.ts\n * @brief jQuery ajax transport for making binary data type requests.\n *\n *        original: https://github.com/henrya/js-jquery/blob/master/BinaryTransport/jquery.binarytransport.js\n *        author:   Henry Algus <henryalgus@gmail.com>\n */\nvar CDP;\n(function (CDP) {\n    var Tools;\n    (function (Tools) {\n        // Support file protocol. (as same as official way)\n        var xhrSuccessStatus = {\n            0: 200,\n            1223: 204\n        };\n        $.ajaxTransport(\"+binary\", function (options, originalOptions, jqXHR) {\n            if (CDP.global.FormData &&\n                ((options.dataType && (options.dataType === \"binary\")) ||\n                    (options.data && ((CDP.global.ArrayBuffer && options.data instanceof ArrayBuffer) ||\n                        (CDP.global.Blob && options.data instanceof CDP.global.Blob))))) {\n                var abortCallback_1;\n                return {\n                    send: function (headers, callback) {\n                        // setup all variables\n                        var xhr = new XMLHttpRequest();\n                        var url = options.url;\n                        var type = options.type;\n                        var async = options.async || true;\n                        // blob or arraybuffer. Default is blob\n                        var dataType = options.responseType || \"blob\";\n                        var data = options.data || null;\n                        var username = options.username || null;\n                        var password = options.password || null;\n                        var _callback = callback || (function () { });\n                        // succeeded handler\n                        xhr.addEventListener(\"load\", function () {\n                            var _data = {};\n                            _data[options.dataType] = xhr.response;\n                            _callback(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, _data, xhr.getAllResponseHeaders());\n                        });\n                        // error handler\n                        xhr.addEventListener(\"error\", function () {\n                            var _data = {};\n                            _data[options.dataType] = xhr.response;\n                            // make callback and send data\n                            _callback(xhr.status, xhr.statusText, _data, xhr.getAllResponseHeaders());\n                        });\n                        // abort handler\n                        xhr.addEventListener(\"abort\", function () {\n                            var _data = {};\n                            _data[options.dataType] = xhr.response;\n                            // make callback and send data\n                            _callback(xhr.status, xhr.statusText, _data, xhr.getAllResponseHeaders());\n                        });\n                        // abort callback\n                        abortCallback_1 = function () {\n                            xhr.abort();\n                        };\n                        xhr.open(type, url, async, username, password);\n                        // setup custom headers\n                        for (var i in headers) {\n                            if (headers.hasOwnProperty(i)) {\n                                xhr.setRequestHeader(i, headers[i]);\n                            }\n                        }\n                        xhr.responseType = dataType;\n                        xhr.send(data);\n                    },\n                    abort: function () {\n                        if (abortCallback_1) {\n                            abortCallback_1();\n                        }\n                    }\n                };\n            }\n        });\n    })(Tools = CDP.Tools || (CDP.Tools = {}));\n})(CDP || (CDP = {}));\n/* tslint:disable:max-line-length */\nvar CDP;\n(function (CDP) {\n    var Tools;\n    (function (Tools) {\n        var TAG = \"[CDP.Tools.DateTime] \";\n        /**\n         * @class DateTime\n         * @brief 時刻操作のユーティリティクラス\n         */\n        var DateTime = (function () {\n            function DateTime() {\n            }\n            ///////////////////////////////////////////////////////////////////////\n            // public static method\n            /**\n             * 基点となる日付から、n日後、n日前を算出\n             *\n             * @param base    {Date}   [in] 基準日\n             * @param addDays {Number} [in] 加算日. マイナス指定でn日前も設定可能\n             * @return {Date} 日付オブジェクト\n             */\n            DateTime.computeDate = function (base, addDays) {\n                var dt = new Date(base.getTime());\n                var baseSec = dt.getTime();\n                var addSec = addDays * 86400000; //日数 * 1日のミリ秒数\n                var targetSec = baseSec + addSec;\n                dt.setTime(targetSec);\n                return dt;\n            };\n            /**\n             * Convert string to date object\n             *\n             * @param {String} date string ex) YYYY-MM-DDTHH:mm:SS.SSS\n             * @return {Object} date object\n             */\n            DateTime.convertISOStringToDate = function (dateString) {\n                var dateTime = dateString.split(\"T\"), dateArray = dateTime[0].split(\"-\");\n                var timeArray, secArray, dateObject;\n                if (dateTime[1]) {\n                    timeArray = dateTime[1].split(\":\");\n                    secArray = timeArray[2].split(\".\");\n                }\n                if (timeArray) {\n                    dateObject = new Date(dateArray[0], dateArray[1] - 1, dateArray[2], timeArray[0], timeArray[1], secArray[0], secArray[1]);\n                }\n                else {\n                    if (dateArray[2]) {\n                        dateObject = new Date(dateArray[0], dateArray[1] - 1, dateArray[2]);\n                    }\n                    else if (dateArray[1]) {\n                        dateObject = new Date(dateArray[0], dateArray[1] - 1);\n                    }\n                    else {\n                        dateObject = new Date(dateArray[0]);\n                    }\n                }\n                return dateObject;\n            };\n            /**\n             *  Convert a date object into a string in PMOAPI recorded_date format(the ISO 8601 Extended Format)\n             *\n             * @param date   {Date}   [in] date object\n             * @param target {String} [in] {year | month | date | hour | min | sec | msec }\n             * @return {String}\n             */\n            DateTime.convertDateToISOString = function (date, target) {\n                if (target === void 0) { target = \"msec\"; }\n                var isoDateString;\n                switch (target) {\n                    case \"year\":\n                    case \"month\":\n                    case \"date\":\n                    case \"hour\":\n                    case \"min\":\n                    case \"sec\":\n                    case \"msec\":\n                        break;\n                    default:\n                        console.warn(TAG + \"unknown target: \" + target);\n                        target = \"msec\";\n                }\n                isoDateString = date.getFullYear();\n                if (\"year\" === target) {\n                    return isoDateString;\n                }\n                isoDateString += (\"-\" + DateTime.numberToDoubleDigitsString(date.getMonth() + 1));\n                if (\"month\" === target) {\n                    return isoDateString;\n                }\n                isoDateString += (\"-\" + DateTime.numberToDoubleDigitsString(date.getDate()));\n                if (\"date\" === target) {\n                    return isoDateString;\n                }\n                isoDateString += (\"T\" + DateTime.numberToDoubleDigitsString(date.getHours()));\n                if (\"hour\" === target) {\n                    return isoDateString;\n                }\n                isoDateString += (\":\" + DateTime.numberToDoubleDigitsString(date.getMinutes()));\n                if (\"min\" === target) {\n                    return isoDateString;\n                }\n                isoDateString += (\":\" + DateTime.numberToDoubleDigitsString(date.getSeconds()));\n                if (\"sec\" === target) {\n                    return isoDateString;\n                }\n                isoDateString += (\".\" + String((date.getMilliseconds() / 1000).toFixed(3)).slice(2, 5));\n                return isoDateString;\n            };\n            /**\n             * Convert file system compatible string to date object\n             *\n             * @param {String} date string ex) yyyy_MM_ddTHH_mm_ss_SSS\n             * @return {Object} date object\n             */\n            DateTime.convertFileSystemStringToDate = function (dateString) {\n                var dateTime = dateString.split(\"T\"), dateArray = dateTime[0].split(\"_\");\n                var timeArray, dateObject;\n                if (dateTime[1]) {\n                    timeArray = dateTime[1].split(\"_\");\n                }\n                if (timeArray) {\n                    dateObject = new Date(dateArray[0], dateArray[1] - 1, dateArray[2], timeArray[0], timeArray[1], timeArray[2], timeArray[3]);\n                }\n                else {\n                    if (dateArray[2]) {\n                        dateObject = new Date(dateArray[0], dateArray[1] - 1, dateArray[2]);\n                    }\n                    else if (dateArray[1]) {\n                        dateObject = new Date(dateArray[0], dateArray[1] - 1);\n                    }\n                    else {\n                        dateObject = new Date(dateArray[0]);\n                    }\n                }\n                return dateObject;\n            };\n            /**\n             *  Convert a date object into a string in file system compatible format(yyyy_MM_ddTHH_mm_ss_SSS)\n             *\n             * @param date   {Date}   [in] date object\n             * @param target {String} [in] {year | month | date | hour | min | sec | msec }\n             * @return {String}\n             */\n            DateTime.convertDateToFileSystemString = function (date, target) {\n                if (target === void 0) { target = \"msec\"; }\n                var fileSystemString;\n                switch (target) {\n                    case \"year\":\n                    case \"month\":\n                    case \"date\":\n                    case \"hour\":\n                    case \"min\":\n                    case \"sec\":\n                    case \"msec\":\n                        break;\n                    default:\n                        console.warn(TAG + \"unknown target: \" + target);\n                        target = \"msec\";\n                }\n                fileSystemString = date.getFullYear();\n                if (\"year\" === target) {\n                    return fileSystemString;\n                }\n                fileSystemString += (\"_\" + DateTime.numberToDoubleDigitsString(date.getMonth() + 1));\n                if (\"month\" === target) {\n                    return fileSystemString;\n                }\n                fileSystemString += (\"_\" + DateTime.numberToDoubleDigitsString(date.getDate()));\n                if (\"date\" === target) {\n                    return fileSystemString;\n                }\n                fileSystemString += (\"T\" + DateTime.numberToDoubleDigitsString(date.getHours()));\n                if (\"hour\" === target) {\n                    return fileSystemString;\n                }\n                fileSystemString += (\"_\" + DateTime.numberToDoubleDigitsString(date.getMinutes()));\n                if (\"min\" === target) {\n                    return fileSystemString;\n                }\n                fileSystemString += (\"_\" + DateTime.numberToDoubleDigitsString(date.getSeconds()));\n                if (\"sec\" === target) {\n                    return fileSystemString;\n                }\n                fileSystemString += (\"_\" + String((date.getMilliseconds() / 1000).toFixed(3)).slice(2, 5));\n                return fileSystemString;\n            };\n            ///////////////////////////////////////////////////////////////////////\n            // private static method\n            /**\n             * Convert num to string(double digits)\n             *\n             * @param  {Number} number (0 <number < 100)\n             * @return {String} double digits string\n             */\n            DateTime.numberToDoubleDigitsString = function (num) {\n                if (num < 0 || num > 100) {\n                    return null;\n                }\n                if (num < 10) {\n                    return \"0\" + num;\n                }\n                return \"\" + num;\n            };\n            return DateTime;\n        }());\n        Tools.DateTime = DateTime;\n    })(Tools = CDP.Tools || (CDP.Tools = {}));\n})(CDP || (CDP = {}));\n/// <reference types=\"jquery\" />\nvar CDP;\n(function (CDP) {\n    var Tools;\n    (function (Tools) {\n        var TAG = \"[CDP.Tools.Template] \";\n        //___________________________________________________________________________________________________________________//\n        /**\n         * @class Template\n         * @brief template script を管理するユーティリティクラス\n         */\n        var Template = (function () {\n            function Template() {\n            }\n            ///////////////////////////////////////////////////////////////////////\n            // 公開メソッド\n            /**\n             * 指定した id, class 名, Tag 名をキーにテンプレートの JQuery Element を取得する。\n             *\n             * @param {String}  key     [in] id, class, tag を表す文字列\n             * @param {String}  [src]   [in] 外部 html を指定する場合は url を設定\n             * @param {Boolean} [cache] [in] src html をキャッシュする場合は true. src が指定されているときのみ有効\n             * @return template が格納されている JQuery Element\n             */\n            Template.getTemplateElement = function (key, src, cache) {\n                if (src === void 0) { src = null; }\n                if (cache === void 0) { cache = true; }\n                var mapElement = Template.getElementMap();\n                var $element = mapElement[key];\n                try {\n                    if (!$element) {\n                        if (src) {\n                            var html = Template.findHtmlFromSource(src);\n                            $element = $(html).find(key);\n                        }\n                        else {\n                            $element = $(key);\n                        }\n                        // 要素の検証\n                        if ($element <= 0) {\n                            throw (\"invalid [key, src] = [\" + key + \", \" + src + \"]\");\n                        }\n                        if (src && cache) {\n                            mapElement[key] = $element;\n                        }\n                    }\n                }\n                catch (exception) {\n                    console.error(TAG + exception);\n                    return null;\n                }\n                return $element;\n            };\n            /**\n             * Map オブジェクトの削除\n             * 明示的にキャッシュを開放する場合は本メソッドをコールする\n             */\n            Template.empty = function () {\n                Template._mapElement = null;\n                Template._mapSource = null;\n            };\n            Template.getJST = function (key, src, cache) {\n                var template = null;\n                var jst;\n                var $element;\n                if (key instanceof jQuery) {\n                    $element = key;\n                }\n                else {\n                    $element = Template.getTemplateElement(key, src, cache);\n                }\n                if (null != CDP.global.Hogan) {\n                    template = Hogan.compile($element.text());\n                    jst = function (data) {\n                        return template.render(data);\n                    };\n                }\n                else if (null != CDP.global._) {\n                    template = _.template($element.html());\n                    jst = function (data) {\n                        // 改行とタブは削除する\n                        return template(data).replace(/\\n|\\t/g, \"\");\n                    };\n                }\n                else {\n                    console.warn(TAG + \"cannot find template engine module.\");\n                    console.warn(\"    'hogan' or 'underscore' is required.\");\n                }\n                return jst;\n            };\n            ///////////////////////////////////////////////////////////////////////\n            // 内部メソッド\n            //! Element Map オブジェクトの取得\n            Template.getElementMap = function () {\n                if (!Template._mapElement) {\n                    Template._mapElement = {};\n                }\n                return Template._mapElement;\n            };\n            //! URL Map オブジェクトの取得\n            Template.getSourceMap = function () {\n                if (!Template._mapSource) {\n                    Template._mapSource = {};\n                }\n                return Template._mapSource;\n            };\n            //! URL Map から HTML を検索. 失敗した場合は undefined が返る\n            Template.findHtmlFromSource = function (src) {\n                var mapSource = Template.getSourceMap();\n                var html = mapSource[src];\n                if (!html) {\n                    $.ajax({\n                        url: src,\n                        method: \"GET\",\n                        async: false,\n                        dataType: \"html\",\n                        success: function (data) {\n                            html = data;\n                        },\n                        error: function (data, status) {\n                            throw (\"ajax request failed. status: \" + status);\n                        }\n                    });\n                    // キャッシュに格納\n                    mapSource[src] = html;\n                }\n                return html;\n            };\n            return Template;\n        }());\n        Tools.Template = Template;\n    })(Tools = CDP.Tools || (CDP.Tools = {}));\n})(CDP || (CDP = {}));\n\nreturn CDP.Tools; }));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"]}