{"version":3,"sources":["dist/cdp.tools.js"],"names":["root","factory","define","amd","$","_","CDP","exports","module","require","jQuery","this","self","global","Tools","Function","TAG","Blob","getBlobBuilder","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","arrayBufferToBlob","buf","mimeType","blob","blobBuilderObject","blobBuilder","append","getBlob","type","base64ToBlob","base64","base64ToArrayBuffer","bytes","window","atob","arrayBuffer","ArrayBuffer","length","data","Uint8Array","i","len","charCodeAt","base64ToUint8Array","encoded","arrayBufferToBase64","uint8ArrayToBase64","byteLength","String","fromCharCode","btoa","URL","webkitURL","xhrSuccessStatus","0","1223","ajaxTransport","options","originalOptions","jqXHR","FormData","dataType","abortCallback_1","send","headers","callback","xhr","XMLHttpRequest","url","async","responseType","username","password","_callback","addEventListener","_data","response","status","statusText","getAllResponseHeaders","abort","open","hasOwnProperty","setRequestHeader","DateTime","computeDate","base","addDays","dt","Date","getTime","baseSec","addSec","targetSec","setTime","convertISOStringToDate","dateString","dateTime","split","dateArray","timeArray","secArray","dateObject","convertDateToISOString","date","target","isoDateString","console","warn","getFullYear","numberToDoubleDigitsString","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","toFixed","slice","convertFileSystemStringToDate","convertDateToFileSystemString","fileSystemString","num","abs","x","max","lhs","rhs","min","toZeroPadding","no","limit","signed","Number","isNaN","Array","join","inherit","subClass","superClass","_prototype","prototype","_inherit","constructor","extend","mixin","derived","bases","_i","arguments","forEach","Object","getOwnPropertyNames","name","protoProps","staticProps","parent","child","apply","Surrogate","__super__","getDevicePixcelRatio","mediaQuery","is_firefox","navigator","userAgent","toLowerCase","indexOf","devicePixelRatio","matchMedia","matches","Template","getTemplateElement","key","src","cache","mapElement","getElementMap","$element","html","findHtmlFromSource","find","exception","error","empty","_mapElement","_mapSource","getJST","template","jst","Hogan","compile","text","render","replace","getSourceMap","mapSource","ajax","method","success"],"mappings":"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","sourcesContent":["﻿/*!\n * cdp.tools.js 2.0.0\n *\n * Date: 2017-07-13T05:46:19.715Z\n */\n(function (root, factory) { if (typeof define === \"function\" && define.amd) { define([\"jquery\", \"underscore\"], function ($, _) { return factory(root.CDP || (root.CDP = {}), $, _); }); } else if (typeof exports === \"object\") { module.exports = factory(root.CDP || (root.CDP = {}), require(\"jquery\"), require(\"underscore\")); } else { factory(root.CDP || (root.CDP = {}), root.jQuery || root.$, root._); } }(((this || 0).self || global), function (CDP, $, _) { CDP.Tools = CDP.Tools || {};\n/**\n * @file  Utils.\n * @brief Tools 専用のユーティリティ\n */\nvar CDP;\n(function (CDP) {\n    var Tools;\n    (function (Tools) {\n        // cdp.tools は cdp.core に依存しないため、独自にglobal を提供する\n        Tools.global = CDP.global || Function(\"return this\")();\n    })(Tools = CDP.Tools || (CDP.Tools = {}));\n})(CDP || (CDP = {}));\nvar CDP;\n(function (CDP) {\n    var Tools;\n    (function (Tools) {\n        var TAG = \"[CDP.Tools.Blob] \";\n        var Blob;\n        (function (Blob) {\n            /**\n             * Get BlobBuilder\n             *\n             * @return {any} BlobBuilder\n             */\n            function getBlobBuilder() {\n                return Tools.global.BlobBuilder || Tools.global.WebKitBlobBuilder || Tools.global.MozBlobBuilder || Tools.global.MSBlobBuilder;\n            }\n            /**\n             * ArrayBuffer to Blob\n             *\n             * @param buf {ArrayBuffer} [in] ArrayBuffer data\n             * @param mimeType {string} [in] MimeType of data\n             * @return {Blob} Blob data\n             */\n            function arrayBufferToBlob(buf, mimeType) {\n                var blob = null;\n                var blobBuilderObject = getBlobBuilder();\n                if (blobBuilderObject != null) {\n                    var blobBuilder = new blobBuilderObject();\n                    blobBuilder.append(buf);\n                    blob = blobBuilder.getBlob(mimeType);\n                }\n                else {\n                    // Android 4.4 KitKat Chromium WebView\n                    blob = new Tools.global.Blob([buf], { type: mimeType });\n                }\n                return blob;\n            }\n            Blob.arrayBufferToBlob = arrayBufferToBlob;\n            /**\n             * Base64 string to Blob\n             *\n             * @param base64 {string} [in] Base64 string data\n             * @param mimeType {string} [in] MimeType of data\n             * @return {Blob} Blob data\n             */\n            function base64ToBlob(base64, mimeType) {\n                var blob = null;\n                var blobBuilderObject = getBlobBuilder();\n                if (blobBuilderObject != null) {\n                    var blobBuilder = new blobBuilderObject();\n                    blobBuilder.append(base64ToArrayBuffer(base64));\n                    blob = blobBuilder.getBlob(mimeType);\n                }\n                else {\n                    // Android 4.4 KitKat Chromium WebView\n                    blob = new Tools.global.Blob([base64ToArrayBuffer(base64)], { type: mimeType });\n                }\n                return blob;\n            }\n            Blob.base64ToBlob = base64ToBlob;\n            /**\n             * Base64 string to ArrayBuffer\n             *\n             * @param base64 {string} [in] Base64 string data\n             * @return {ArrayBuffer} ArrayBuffer data\n             */\n            function base64ToArrayBuffer(base64) {\n                var bytes = window.atob(base64);\n                var arrayBuffer = new ArrayBuffer(bytes.length);\n                var data = new Uint8Array(arrayBuffer);\n                for (var i = 0, len = bytes.length; i < len; ++i) {\n                    data[i] = bytes.charCodeAt(i);\n                }\n                return arrayBuffer;\n            }\n            Blob.base64ToArrayBuffer = base64ToArrayBuffer;\n            /**\n             * Base64 string to Uint8Array\n             *\n             * @param base64 {string} [in] Base64 string data\n             * @return {Uint8Array} Uint8Array data\n             */\n            function base64ToUint8Array(encoded) {\n                var bytes = window.atob(encoded);\n                var data = new Uint8Array(bytes.length);\n                for (var i = 0, len = bytes.length; i < len; ++i) {\n                    data[i] = bytes.charCodeAt(i);\n                }\n                return data;\n            }\n            Blob.base64ToUint8Array = base64ToUint8Array;\n            /**\n             * ArrayBuffer to base64 string\n             *\n             * @param arrayBuffer {ArrayBuffer} [in] ArrayBuffer data\n             * @return {string} base64 data\n             */\n            function arrayBufferToBase64(arrayBuffer) {\n                var bytes = new Uint8Array(arrayBuffer);\n                return uint8ArrayToBase64(bytes);\n            }\n            Blob.arrayBufferToBase64 = arrayBufferToBase64;\n            /**\n             * Uint8Array to base64 string\n             *\n             * @param bytes {Uint8Array} [in] Uint8Array data\n             * @return {string} base64 data\n             */\n            function uint8ArrayToBase64(bytes) {\n                var data = \"\";\n                for (var i = 0, len = bytes.byteLength; i < len; ++i) {\n                    data += String.fromCharCode(bytes[i]);\n                }\n                return window.btoa(data);\n            }\n            Blob.uint8ArrayToBase64 = uint8ArrayToBase64;\n            /**\n             * URL Object\n             *\n             * @return {any} URL Object\n             */\n            Blob.URL = (function () {\n                return Tools.global.URL || Tools.global.webkitURL;\n            })();\n        })(Blob = Tools.Blob || (Tools.Blob = {}));\n    })(Tools = CDP.Tools || (CDP.Tools = {}));\n})(CDP || (CDP = {}));\n/**\n * @file  BinaryTransport.ts\n * @brief jQuery ajax transport for making binary data type requests.\n *\n *        original: https://github.com/henrya/js-jquery/blob/master/BinaryTransport/jquery.binarytransport.js\n *        author:   Henry Algus <henryalgus@gmail.com>\n */\nvar CDP;\n(function (CDP) {\n    var Tools;\n    (function (Tools) {\n        // Support file protocol. (as same as official way)\n        var xhrSuccessStatus = {\n            0: 200,\n            1223: 204\n        };\n        $.ajaxTransport(\"+binary\", function (options, originalOptions, jqXHR) {\n            if (Tools.global.FormData &&\n                ((options.dataType && (options.dataType === \"binary\")) ||\n                    (options.data && ((Tools.global.ArrayBuffer && options.data instanceof ArrayBuffer) ||\n                        (Tools.global.Blob && options.data instanceof Tools.global.Blob))))) {\n                var abortCallback_1;\n                return {\n                    send: function (headers, callback) {\n                        // setup all variables\n                        var xhr = new XMLHttpRequest();\n                        var url = options.url;\n                        var type = options.type;\n                        var async = options.async || true;\n                        // blob or arraybuffer. Default is blob\n                        var dataType = options.responseType || \"blob\";\n                        var data = options.data || null;\n                        var username = options.username || null;\n                        var password = options.password || null;\n                        var _callback = callback || (function () { });\n                        // succeeded handler\n                        xhr.addEventListener(\"load\", function () {\n                            var _data = {};\n                            _data[options.dataType] = xhr.response;\n                            _callback(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, _data, xhr.getAllResponseHeaders());\n                        });\n                        // error handler\n                        xhr.addEventListener(\"error\", function () {\n                            var _data = {};\n                            _data[options.dataType] = xhr.response;\n                            // make callback and send data\n                            _callback(xhr.status, xhr.statusText, _data, xhr.getAllResponseHeaders());\n                        });\n                        // abort handler\n                        xhr.addEventListener(\"abort\", function () {\n                            var _data = {};\n                            _data[options.dataType] = xhr.response;\n                            // make callback and send data\n                            _callback(xhr.status, xhr.statusText, _data, xhr.getAllResponseHeaders());\n                        });\n                        // abort callback\n                        abortCallback_1 = function () {\n                            xhr.abort();\n                        };\n                        xhr.open(type, url, async, username, password);\n                        // setup custom headers\n                        for (var i in headers) {\n                            if (headers.hasOwnProperty(i)) {\n                                xhr.setRequestHeader(i, headers[i]);\n                            }\n                        }\n                        xhr.responseType = dataType;\n                        xhr.send(data);\n                    },\n                    abort: function () {\n                        if (abortCallback_1) {\n                            abortCallback_1();\n                        }\n                    }\n                };\n            }\n        });\n    })(Tools = CDP.Tools || (CDP.Tools = {}));\n})(CDP || (CDP = {}));\n/* tslint:disable:max-line-length */\nvar CDP;\n(function (CDP) {\n    var Tools;\n    (function (Tools) {\n        var TAG = \"[CDP.Tools.DateTime] \";\n        /**\n         * @class DateTime\n         * @brief 時刻操作のユーティリティクラス\n         */\n        var DateTime = (function () {\n            function DateTime() {\n            }\n            ///////////////////////////////////////////////////////////////////////\n            // public static method\n            /**\n             * 基点となる日付から、n日後、n日前を算出\n             *\n             * @param base    {Date}   [in] 基準日\n             * @param addDays {Number} [in] 加算日. マイナス指定でn日前も設定可能\n             * @return {Date} 日付オブジェクト\n             */\n            DateTime.computeDate = function (base, addDays) {\n                var dt = new Date(base.getTime());\n                var baseSec = dt.getTime();\n                var addSec = addDays * 86400000; //日数 * 1日のミリ秒数\n                var targetSec = baseSec + addSec;\n                dt.setTime(targetSec);\n                return dt;\n            };\n            /**\n             * Convert string to date object\n             *\n             * @param {String} date string ex) YYYY-MM-DDTHH:mm:SS.SSS\n             * @return {Object} date object\n             */\n            DateTime.convertISOStringToDate = function (dateString) {\n                var dateTime = dateString.split(\"T\"), dateArray = dateTime[0].split(\"-\");\n                var timeArray, secArray, dateObject;\n                if (dateTime[1]) {\n                    timeArray = dateTime[1].split(\":\");\n                    secArray = timeArray[2].split(\".\");\n                }\n                if (timeArray) {\n                    dateObject = new Date(dateArray[0], dateArray[1] - 1, dateArray[2], timeArray[0], timeArray[1], secArray[0], secArray[1]);\n                }\n                else {\n                    if (dateArray[2]) {\n                        dateObject = new Date(dateArray[0], dateArray[1] - 1, dateArray[2]);\n                    }\n                    else if (dateArray[1]) {\n                        dateObject = new Date(dateArray[0], dateArray[1] - 1);\n                    }\n                    else {\n                        dateObject = new Date(dateArray[0]);\n                    }\n                }\n                return dateObject;\n            };\n            /**\n             *  Convert a date object into a string in PMOAPI recorded_date format(the ISO 8601 Extended Format)\n             *\n             * @param date   {Date}   [in] date object\n             * @param target {String} [in] {year | month | date | hour | min | sec | msec }\n             * @return {String}\n             */\n            DateTime.convertDateToISOString = function (date, target) {\n                if (target === void 0) { target = \"msec\"; }\n                var isoDateString;\n                switch (target) {\n                    case \"year\":\n                    case \"month\":\n                    case \"date\":\n                    case \"hour\":\n                    case \"min\":\n                    case \"sec\":\n                    case \"msec\":\n                        break;\n                    default:\n                        console.warn(TAG + \"unknown target: \" + target);\n                        target = \"msec\";\n                }\n                isoDateString = date.getFullYear();\n                if (\"year\" === target) {\n                    return isoDateString;\n                }\n                isoDateString += (\"-\" + DateTime.numberToDoubleDigitsString(date.getMonth() + 1));\n                if (\"month\" === target) {\n                    return isoDateString;\n                }\n                isoDateString += (\"-\" + DateTime.numberToDoubleDigitsString(date.getDate()));\n                if (\"date\" === target) {\n                    return isoDateString;\n                }\n                isoDateString += (\"T\" + DateTime.numberToDoubleDigitsString(date.getHours()));\n                if (\"hour\" === target) {\n                    return isoDateString;\n                }\n                isoDateString += (\":\" + DateTime.numberToDoubleDigitsString(date.getMinutes()));\n                if (\"min\" === target) {\n                    return isoDateString;\n                }\n                isoDateString += (\":\" + DateTime.numberToDoubleDigitsString(date.getSeconds()));\n                if (\"sec\" === target) {\n                    return isoDateString;\n                }\n                isoDateString += (\".\" + String((date.getMilliseconds() / 1000).toFixed(3)).slice(2, 5));\n                return isoDateString;\n            };\n            /**\n             * Convert file system compatible string to date object\n             *\n             * @param {String} date string ex) yyyy_MM_ddTHH_mm_ss_SSS\n             * @return {Object} date object\n             */\n            DateTime.convertFileSystemStringToDate = function (dateString) {\n                var dateTime = dateString.split(\"T\"), dateArray = dateTime[0].split(\"_\");\n                var timeArray, dateObject;\n                if (dateTime[1]) {\n                    timeArray = dateTime[1].split(\"_\");\n                }\n                if (timeArray) {\n                    dateObject = new Date(dateArray[0], dateArray[1] - 1, dateArray[2], timeArray[0], timeArray[1], timeArray[2], timeArray[3]);\n                }\n                else {\n                    if (dateArray[2]) {\n                        dateObject = new Date(dateArray[0], dateArray[1] - 1, dateArray[2]);\n                    }\n                    else if (dateArray[1]) {\n                        dateObject = new Date(dateArray[0], dateArray[1] - 1);\n                    }\n                    else {\n                        dateObject = new Date(dateArray[0]);\n                    }\n                }\n                return dateObject;\n            };\n            /**\n             *  Convert a date object into a string in file system compatible format(yyyy_MM_ddTHH_mm_ss_SSS)\n             *\n             * @param date   {Date}   [in] date object\n             * @param target {String} [in] {year | month | date | hour | min | sec | msec }\n             * @return {String}\n             */\n            DateTime.convertDateToFileSystemString = function (date, target) {\n                if (target === void 0) { target = \"msec\"; }\n                var fileSystemString;\n                switch (target) {\n                    case \"year\":\n                    case \"month\":\n                    case \"date\":\n                    case \"hour\":\n                    case \"min\":\n                    case \"sec\":\n                    case \"msec\":\n                        break;\n                    default:\n                        console.warn(TAG + \"unknown target: \" + target);\n                        target = \"msec\";\n                }\n                fileSystemString = date.getFullYear();\n                if (\"year\" === target) {\n                    return fileSystemString;\n                }\n                fileSystemString += (\"_\" + DateTime.numberToDoubleDigitsString(date.getMonth() + 1));\n                if (\"month\" === target) {\n                    return fileSystemString;\n                }\n                fileSystemString += (\"_\" + DateTime.numberToDoubleDigitsString(date.getDate()));\n                if (\"date\" === target) {\n                    return fileSystemString;\n                }\n                fileSystemString += (\"T\" + DateTime.numberToDoubleDigitsString(date.getHours()));\n                if (\"hour\" === target) {\n                    return fileSystemString;\n                }\n                fileSystemString += (\"_\" + DateTime.numberToDoubleDigitsString(date.getMinutes()));\n                if (\"min\" === target) {\n                    return fileSystemString;\n                }\n                fileSystemString += (\"_\" + DateTime.numberToDoubleDigitsString(date.getSeconds()));\n                if (\"sec\" === target) {\n                    return fileSystemString;\n                }\n                fileSystemString += (\"_\" + String((date.getMilliseconds() / 1000).toFixed(3)).slice(2, 5));\n                return fileSystemString;\n            };\n            ///////////////////////////////////////////////////////////////////////\n            // private static method\n            /**\n             * Convert num to string(double digits)\n             *\n             * @param  {Number} number (0 <number < 100)\n             * @return {String} double digits string\n             */\n            DateTime.numberToDoubleDigitsString = function (num) {\n                if (num < 0 || num > 100) {\n                    return null;\n                }\n                if (num < 10) {\n                    return \"0\" + num;\n                }\n                return \"\" + num;\n            };\n            return DateTime;\n        }());\n        Tools.DateTime = DateTime;\n    })(Tools = CDP.Tools || (CDP.Tools = {}));\n})(CDP || (CDP = {}));\n/// <reference types=\"jquery\" />\nvar CDP;\n(function (CDP) {\n    var Tools;\n    (function (Tools) {\n        var TAG = \"[CDP.Tools.Functions] \";\n        /**\n         * Math.abs よりも高速な abs\n         */\n        function abs(x) {\n            return x >= 0 ? x : -x;\n        }\n        Tools.abs = abs;\n        /**\n         * Math.max よりも高速な max\n         */\n        function max(lhs, rhs) {\n            return lhs >= rhs ? lhs : rhs;\n        }\n        Tools.max = max;\n        /**\n         * Math.min よりも高速な min\n         */\n        function min(lhs, rhs) {\n            return lhs <= rhs ? lhs : rhs;\n        }\n        Tools.min = min;\n        /**\n         * 数値を 0 詰めして文字列を生成\n         */\n        function toZeroPadding(no, limit) {\n            var signed = \"\";\n            no = Number(no);\n            if (isNaN(no) || isNaN(limit) || limit <= 0) {\n                return null;\n            }\n            if (no < 0) {\n                no = Tools.abs(no);\n                signed = \"-\";\n            }\n            return signed + (Array(limit).join(\"0\") + no).slice(-limit);\n        }\n        Tools.toZeroPadding = toZeroPadding;\n        /**\n         * 多重継承のための実行時継承関数\n         *\n         * Sub Class 候補オブジェクトに対して Super Class 候補オブジェクトを直前の Super Class として挿入する。\n         * prototype のみコピーする。\n         * インスタンスメンバをコピーしたい場合、Super Class が疑似コンストラクタを提供する必要がある。\n         * 詳細は cdp.tools.Functions.spec.ts を参照。\n         *\n         * @param subClass   {constructor} [in] オブジェクトの constructor を指定\n         * @param superClass {constructor} [in] オブジェクトの constructor を指定\n         */\n        function inherit(subClass, superClass) {\n            var _prototype = subClass.prototype;\n            function _inherit() {\n                this.constructor = subClass;\n            }\n            _inherit.prototype = superClass.prototype;\n            subClass.prototype = new _inherit();\n            $.extend(subClass.prototype, _prototype);\n        }\n        Tools.inherit = inherit;\n        /**\n         * mixin 関数\n         *\n         * TypeScript Official Site に載っている mixin 関数\n         * http://www.typescriptlang.org/Handbook#mixins\n         * 既に定義されているオブジェクトから、新規にオブジェクトを合成する。\n         *\n         * @param derived {constructor}    [in] 合成されるオブジェクトの constructor を指定\n         * @param bases   {constructor...} [in] 合成元オブジェクトの constructor を指定 (可変引数)\n         */\n        function mixin(derived) {\n            var bases = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                bases[_i - 1] = arguments[_i];\n            }\n            bases.forEach(function (base) {\n                Object.getOwnPropertyNames(base.prototype).forEach(function (name) {\n                    derived.prototype[name] = base.prototype[name];\n                });\n            });\n        }\n        Tools.mixin = mixin;\n        /**\n         * \\~english\n         * Helper function to correctly set up the prototype chain, for subclasses.\n         * The function behavior is same as extend() function of Backbone.js.\n         *\n         * @param protoProps  {Object} [in] set prototype properties as object.\n         * @param staticProps {Object} [in] set static properties as object.\n         * @return {Object} subclass constructor.\n         *\n         * \\~japanese\n         * クラス継承のためのヘルパー関数\n         * Backbone.js extend() 関数と同等\n         *\n         * @param protoProps  {Object} [in] prototype properties をオブジェクトで指定\n         * @param staticProps {Object} [in] static properties をオブジェクトで指定\n         * @return {Object} サブクラスのコンストラクタ\n         */\n        function extend(protoProps, staticProps) {\n            var parent = this;\n            var child;\n            if (protoProps && protoProps.hasOwnProperty(\"constructor\")) {\n                child = protoProps.constructor;\n            }\n            else {\n                child = function () {\n                    return parent.apply(this, arguments);\n                };\n            }\n            $.extend(child, parent, staticProps);\n            var Surrogate = function () {\n                this.constructor = child;\n            };\n            Surrogate.prototype = parent.prototype;\n            child.prototype = new Surrogate;\n            if (protoProps) {\n                $.extend(child.prototype, protoProps);\n            }\n            child.__super__ = parent.prototype;\n            return child;\n        }\n        Tools.extend = extend;\n        /**\n         * DPI 取得\n         */\n        function getDevicePixcelRatio() {\n            var mediaQuery;\n            var is_firefox = navigator.userAgent.toLowerCase().indexOf(\"firefox\") > -1;\n            if (null != window.devicePixelRatio && !is_firefox) {\n                return window.devicePixelRatio;\n            }\n            else if (window.matchMedia) {\n                mediaQuery =\n                    \"(-webkit-min-device-pixel-ratio: 1.5),\\\n                    (min--moz-device-pixel-ratio: 1.5),\\\n                    (-o-min-device-pixel-ratio: 3/2),\\\n                    (min-resolution: 1.5dppx)\";\n                if (window.matchMedia(mediaQuery).matches) {\n                    return 1.5;\n                }\n                mediaQuery =\n                    \"(-webkit-min-device-pixel-ratio: 2),\\\n                    (min--moz-device-pixel-ratio: 2),\\\n                    (-o-min-device-pixel-ratio: 2/1),\\\n                    (min-resolution: 2dppx)\";\n                if (window.matchMedia(mediaQuery).matches) {\n                    return 2;\n                }\n                mediaQuery =\n                    \"(-webkit-min-device-pixel-ratio: 0.75),\\\n                    (min--moz-device-pixel-ratio: 0.75),\\\n                    (-o-min-device-pixel-ratio: 3/4),\\\n                    (min-resolution: 0.75dppx)\";\n                if (window.matchMedia(mediaQuery).matches) {\n                    return 0.7;\n                }\n            }\n            else {\n                return 1;\n            }\n        }\n        Tools.getDevicePixcelRatio = getDevicePixcelRatio;\n    })(Tools = CDP.Tools || (CDP.Tools = {}));\n})(CDP || (CDP = {}));\n/// <reference types=\"jquery\" />\n/// <reference types=\"underscore\" />\nvar CDP;\n(function (CDP) {\n    var Tools;\n    (function (Tools) {\n        var TAG = \"[CDP.Tools.Template] \";\n        //___________________________________________________________________________________________________________________//\n        /**\n         * @class Template\n         * @brief template script を管理するユーティリティクラス\n         */\n        var Template = (function () {\n            function Template() {\n            }\n            ///////////////////////////////////////////////////////////////////////\n            // 公開メソッド\n            /**\n             * 指定した id, class 名, Tag 名をキーにテンプレートの JQuery Element を取得する。\n             *\n             * @param {String}  key     [in] id, class, tag を表す文字列\n             * @param {String}  [src]   [in] 外部 html を指定する場合は url を設定\n             * @param {Boolean} [cache] [in] src html をキャッシュする場合は true. src が指定されているときのみ有効\n             * @return template が格納されている JQuery Element\n             */\n            Template.getTemplateElement = function (key, src, cache) {\n                if (src === void 0) { src = null; }\n                if (cache === void 0) { cache = true; }\n                var mapElement = Template.getElementMap();\n                var $element = mapElement[key];\n                try {\n                    if (!$element) {\n                        if (src) {\n                            var html = Template.findHtmlFromSource(src);\n                            $element = $(html).find(key);\n                        }\n                        else {\n                            $element = $(key);\n                        }\n                        // 要素の検証\n                        if ($element <= 0) {\n                            throw (\"invalid [key, src] = [\" + key + \", \" + src + \"]\");\n                        }\n                        if (src && cache) {\n                            mapElement[key] = $element;\n                        }\n                    }\n                }\n                catch (exception) {\n                    console.error(TAG + exception);\n                    return null;\n                }\n                return $element;\n            };\n            /**\n             * Map オブジェクトの削除\n             * 明示的にキャッシュを開放する場合は本メソッドをコールする\n             */\n            Template.empty = function () {\n                Template._mapElement = null;\n                Template._mapSource = null;\n            };\n            Template.getJST = function (key, src, cache) {\n                var template = null;\n                var jst;\n                var $element;\n                if (key instanceof jQuery) {\n                    $element = key;\n                }\n                else {\n                    $element = Template.getTemplateElement(key, src, cache);\n                }\n                if (null != Tools.global.Hogan) {\n                    template = Hogan.compile($element.text());\n                    jst = function (data) {\n                        return template.render(data);\n                    };\n                }\n                else {\n                    template = _.template($element.html());\n                    jst = function (data) {\n                        // 改行とタブは削除する\n                        return template(data).replace(/\\n|\\t/g, \"\");\n                    };\n                }\n                return jst;\n            };\n            ///////////////////////////////////////////////////////////////////////\n            // 内部メソッド\n            //! Element Map オブジェクトの取得\n            Template.getElementMap = function () {\n                if (!Template._mapElement) {\n                    Template._mapElement = {};\n                }\n                return Template._mapElement;\n            };\n            //! URL Map オブジェクトの取得\n            Template.getSourceMap = function () {\n                if (!Template._mapSource) {\n                    Template._mapSource = {};\n                }\n                return Template._mapSource;\n            };\n            //! URL Map から HTML を検索. 失敗した場合は undefined が返る\n            Template.findHtmlFromSource = function (src) {\n                var mapSource = Template.getSourceMap();\n                var html = mapSource[src];\n                if (!html) {\n                    $.ajax({\n                        url: src,\n                        method: \"GET\",\n                        async: false,\n                        dataType: \"html\",\n                        success: function (data) {\n                            html = data;\n                        },\n                        error: function (data, status) {\n                            throw (\"ajax request failed. status: \" + status);\n                        }\n                    });\n                    // キャッシュに格納\n                    mapSource[src] = html;\n                }\n                return html;\n            };\n            return Template;\n        }());\n        Tools.Template = Template;\n    })(Tools = CDP.Tools || (CDP.Tools = {}));\n})(CDP || (CDP = {}));\n\nreturn CDP.Tools; }));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"]}