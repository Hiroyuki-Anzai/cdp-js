{"version":3,"sources":["dist/cdp.core.js"],"names":["root","factory","define","amd","CDP","exports","module","this","self","global","TAG","Function","webRoot","location","baseUrl","exec","href","toUrl","path","slice","Config","initialize","options","setTimeout","Patch","apply","success","error","cause","ensureErrorInfo","errorInfo","makeErrorInfo","RESULT_CODE","ERROR_CDP_INITIALIZE_FAILED","message","console","fail","consolePatch","nodePatch","count","groupEnd","time","timeEnd","trace","group","dirxml","debug","groupCollapsed","select","info","profile","assert","msIsIndependentlyComposed","clear","dir","warn","log","profileEnd","MSApp","_MSApp_1","originalAppendChild_1","Node","prototype","appendChild","node","execUnsafeLocalFunction","call","originalInsertBefore_1","insertBefore","newElement","referenceElement","__assign","Object","assign","t","s","i","n","arguments","length","p","hasOwnProperty","UNKNOWN_ERROR_NAME","ERROR_NAME_SEPARATOR","CANCELED_MESSAGE","s_code2message","0","1","-1","MODULE_RESULT_CODE_RANGE","resultCode","tag","canceled","msg","code","CANCELED","Error","messageFromResultCode","name","buildErrorName","makeCanceledErrorInfo","isCanceledError","unknown","FAILED","valid","MODULE_RESULT_CODE_RANGE_CDP","RESULT_CODE_BASE","DECLARE_SUCCESS_CODE","base","localCode","declareResultCode","DECLARE_ERROR_CODE","SUCCEEDED","ASSIGN_RESULT_CODE_BASE","resultCodeBase","ASSIGN_RESULT_CODE","FUNCTION_CODE_RANGE","LOCAL_CODE_BASE","CORE","moduleCode","succeeded","signed","prefix"],"mappings":"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","sourcesContent":["﻿/*!\n * cdp.core.js 2.0.0\n *\n * Date: 2017-08-04T05:10:01.459Z\n */\n(function (root, factory) { if (typeof define === \"function\" && define.amd) { define(function () { return factory(root.CDP || (root.CDP = {})); }); } else if (typeof exports === \"object\") { module.exports = factory(root.CDP || (root.CDP = {})); } else { factory(root.CDP || (root.CDP = {})); } }(((this || 0).self || global), function (CDP) {\nvar CDP;\n(function (CDP) {\n    var TAG = \"[CDP] \";\n    /**\n     * @en Accessor for system global object.<br>\n     *     It'll be usually a `window` object.\n     * @ja システムの global オブジェクトへのアクセス<br>\n     *     通常は `window` オブジェクトとなる\n     */\n    CDP.global = Function(\"return this\")();\n    /**\n     * @en Accsessor for Web root location <br>\n     *     Only the browser environment will be an allocating place in index.html, and becomes effective.\n     * @ja Web root location へのアクセス <br>\n     *     index.html の配置場所となり、ブラウザ環境のみ有効となる.\n     */\n    CDP.webRoot = (function () {\n        if (CDP.global.location) {\n            var baseUrl = /(.+\\/)[^/]*#[^/]+/.exec(CDP.global.location.href);\n            if (!baseUrl) {\n                baseUrl = /(.+\\/)/.exec(CDP.global.location.href);\n            }\n            return baseUrl[1];\n        }\n    })();\n    /**\n     * @en Converter from relative path to absolute url string. <br>\n     *     If you want to access to Assets and in spite of the script location, the function is available.\n     * @ja 相対 path を絶対 URL に変換 <br>\n     *     js の配置に依存することなく `assets` アクセスしたいときに使用する.\n     *\n     * @see https://stackoverflow.com/questions/2188218/relative-paths-in-javascript-in-an-external-file\n     *\n     * @example <br>\n     *\n     * ```ts\n     *  console.log(toUrl(\"/res/data/collection.json\"));\n     *  // \"http://localhost:8080/app/res/data/collection.json\"\n     * ```\n     *\n     * @param path\n     *  - `en` set relative path from [[webRoot]].\n     *  - `ja` [[webRoot]] からの相対パスを指定\n     * @returns url string\n     *  - `en` set relative path from [[webRoot]].\n     *  - `ja` [[webRoot]] からの相対パスを指定\n     */\n    function toUrl(path) {\n        var root = CDP.webRoot || \"\";\n        if (null != path && null != path[0]) {\n            if (\"/\" === path[0]) {\n                return root + path.slice(1);\n            }\n            else {\n                return root + path;\n            }\n        }\n        else {\n            return root;\n        }\n    }\n    CDP.toUrl = toUrl;\n    /**\n     * @en Accessor for global Config object.\n     * @ja Config オブジェクトへのアクセス\n     */\n    CDP.Config = CDP.Config || CDP.global.Config || {};\n    /**\n     * @en Initialize function for `cdp-core`. <br>\n     *     This function applies patch to the run time environment.\n     * @ja `cdp-core` の初期化関数<br>\n     *     環境の差分を吸収する patch を適用する.\n     */\n    function initialize(options) {\n        setTimeout(function () {\n            try {\n                CDP.Patch.apply();\n                if (options && typeof options.success === \"function\") {\n                    options.success();\n                }\n            }\n            catch (error) {\n                var cause = CDP.ensureErrorInfo(error);\n                var errorInfo = CDP.makeErrorInfo(CDP.RESULT_CODE.ERROR_CDP_INITIALIZE_FAILED, TAG, cause.message, cause);\n                console.error(errorInfo.message);\n                if (options && typeof options.fail === \"function\") {\n                    options.fail(errorInfo);\n                }\n            }\n        });\n    }\n    CDP.initialize = initialize;\n})(CDP || (CDP = {}));\nvar CDP;\n(function (CDP) {\n    var TAG = \"[CDP.Patch] \";\n    /**\n     * @en Utility class for appling the patch to the run time environment.\n     * @ja 実行環境用 Patch 適用ユーティリティクラス\n     *\n     * @internal\n     */\n    var Patch = (function () {\n        function Patch() {\n        }\n        ///////////////////////////////////////////////////////////////////////\n        // public static methods:\n        /**\n         * @en Apply the patch\n         * @ja パッチの適用\n         *\n         * @internal\n         */\n        Patch.apply = function () {\n            Patch.consolePatch();\n            Patch.nodePatch();\n        };\n        ///////////////////////////////////////////////////////////////////////\n        // private static methods:\n        // console 用 patch\n        Patch.consolePatch = function () {\n            if (null == CDP.global.console || null == CDP.global.console.error) {\n                CDP.global.console = {\n                    count: function () { },\n                    groupEnd: function () { },\n                    time: function () { },\n                    timeEnd: function () { },\n                    trace: function () { },\n                    group: function () { },\n                    dirxml: function () { },\n                    debug: function () { },\n                    groupCollapsed: function () { },\n                    select: function () { },\n                    info: function () { },\n                    profile: function () { },\n                    assert: function () { },\n                    msIsIndependentlyComposed: function () { },\n                    clear: function () { },\n                    dir: function () { },\n                    warn: function () { },\n                    error: function () { },\n                    log: function () { },\n                    profileEnd: function () { }\n                };\n            }\n        };\n        // WinRT 用 patch\n        Patch.nodePatch = function () {\n            if (\"object\" === typeof MSApp) {\n                var _MSApp_1 = MSApp;\n                var originalAppendChild_1 = Node.prototype.appendChild;\n                Node.prototype.appendChild = function (node) {\n                    var self = this;\n                    return _MSApp_1.execUnsafeLocalFunction(function () {\n                        return originalAppendChild_1.call(self, node);\n                    });\n                };\n                var originalInsertBefore_1 = Node.prototype.insertBefore;\n                Node.prototype.insertBefore = function (newElement, referenceElement) {\n                    var self = this;\n                    return _MSApp_1.execUnsafeLocalFunction(function () {\n                        return originalInsertBefore_1.call(self, newElement, referenceElement);\n                    });\n                };\n            }\n        };\n        return Patch;\n    }());\n    CDP.Patch = Patch;\n})(CDP || (CDP = {}));\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nvar CDP;\n(function (CDP) {\n    var UNKNOWN_ERROR_NAME = \"Unknown Error\";\n    var ERROR_NAME_SEPARATOR = \": \";\n    var CANCELED_MESSAGE = \"abort\";\n    var s_code2message = {\n        \"0\": \"operation succeeded.\",\n        \"1\": \"operation canceled.\",\n        \"-1\": \"operation failed.\"\n    };\n    ///////////////////////////////////////////////////////////////////////\n    // error utilities:\n    /**\n     * @en Common error code for the application.\n     * @ja アプリケーション全体で使用する共通エラーコード定義\n     */\n    var RESULT_CODE;\n    (function (RESULT_CODE) {\n        /** `en` general success code <br> `ja` 汎用成功コード        */\n        RESULT_CODE[RESULT_CODE[\"SUCCEEDED\"] = 0] = \"SUCCEEDED\";\n        /** `en` general cancel code  <br> `ja` 汎用キャンセルコード  */\n        RESULT_CODE[RESULT_CODE[\"CANCELED\"] = 1] = \"CANCELED\";\n        /** `en` general error code   <br> `ja` 汎用エラーコード      */\n        RESULT_CODE[RESULT_CODE[\"FAILED\"] = -1] = \"FAILED\";\n    })(RESULT_CODE = CDP.RESULT_CODE || (CDP.RESULT_CODE = {}));\n    /**\n     * @en The assignable range for the client's local result cord by which expansion is possible.\n     * @ja クライアントが拡張可能なローカルリザルトコードのアサイン可能領域\n     */\n    CDP.MODULE_RESULT_CODE_RANGE = 1000;\n    /**\n     * @en Generate the [[ErrorInfo]] object.\n     * @ja [[ErrorInfo]] オブジェクトを生成\n     *\n     * @example <br>\n     *\n     * ```ts\n     *  someAsyncFunc()\n     *      .then((result) => {\n     *          outputMessage(result);\n     *      })\n     *      .catch((reason: Error) => {\n     *          throw makeErrorInfo(\n     *              RESULT_CODE.FAILED,\n     *              TAG,\n     *              \"error occur.\",\n     *              reason  // set received error info.\n     *          );\n     *      });\n     * ```\n     *\n     * @param resultCode\n     *  - `en` set [[RESULT_CODE]] defined.\n     *  - `ja` 定義した [[RESULT_CODE]] を指定\n     * @param tag\n     *  - `en` Log tag information\n     *  - `ja` 識別情報\n     * @param message\n     *  - `en` Human readable message\n     *  - `ja` メッセージを指定\n     * @param cause\n     *  - `en` low-level Error object\n     *  - `ja` 下位のエラーを指定\n     * @returns\n     */\n    function makeErrorInfo(resultCode, tag, message, cause) {\n        var canceled = (cause && CANCELED_MESSAGE === cause.message) ? true : false;\n        var msg = canceled ? CANCELED_MESSAGE : message;\n        var code = canceled ? RESULT_CODE.CANCELED : resultCode;\n        var errorInfo = new Error(msg || messageFromResultCode(code));\n        errorInfo.name = buildErrorName(code, tag);\n        errorInfo.code = code;\n        errorInfo.cause = cause;\n        return errorInfo;\n    }\n    CDP.makeErrorInfo = makeErrorInfo;\n    /**\n     * @en Generate canceled error information. <br>\n     *     The [[ErrorInfo]] object generated by this function has [[RESULT_CODE.CANCELED]] code.\n     * @ja キャンセルエラー情報生成 <br>\n     *     この関数で生成された [[ErrorInfo]] は [[RESULT_CODE.CANCELED]] を格納する\n     *\n     * @param tag\n     *  - `en` Log tag information\n     *  - `ja` 識別情報\n     * @param cause\n     *  - `en` low-level Error object\n     *  - `ja` 下位のエラーを指定\n     * @returns\n     */\n    function makeCanceledErrorInfo(tag, cause) {\n        return makeErrorInfo(RESULT_CODE.CANCELED, tag, CANCELED_MESSAGE, cause);\n    }\n    CDP.makeCanceledErrorInfo = makeCanceledErrorInfo;\n    /**\n     * @es Judge the error is canceled.\n     * @ja エラー情報がキャンセルされたものか判定\n     *\n     * @example <br>\n     *\n     * ```ts\n     *  :\n     *  .catch((reason: ErrorInfo) => {\n     *      if (!isCanceledError(reason)) {\n     *          handleErrorInfo(reason);\n     *      }\n     *   });\n     *  :\n     * ```\n     *\n     * @param error\n     * @returns\n     *  - `en` true: canceled error / false: others\n     *  - `ja` true: キャンセル / false: その他エラー\n     */\n    function isCanceledError(error) {\n        if (\"string\" === typeof error) {\n            return CANCELED_MESSAGE === error;\n        }\n        else {\n            var errorInfo = error;\n            if (errorInfo) {\n                if (RESULT_CODE.CANCELED === errorInfo.code || CANCELED_MESSAGE === errorInfo.message) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    CDP.isCanceledError = isCanceledError;\n    /**\n     * @es Convert from any type error information to [[ErrorInfo]] object.\n     * @jp あらゆるエラー入力を [[ErrorInfo]] に変換\n     */\n    function ensureErrorInfo(cause) {\n        var unknown = {\n            name: UNKNOWN_ERROR_NAME + ERROR_NAME_SEPARATOR,\n            code: RESULT_CODE.FAILED,\n            message: \"unknown error occured.\",\n        };\n        var valid = function (error) {\n            if (!error) {\n                return false;\n            }\n            return (\"number\" === typeof error.code &&\n                \"string\" === typeof error.name &&\n                \"string\" === typeof error.message);\n        };\n        if (valid(cause)) {\n            return cause;\n        }\n        else if (cause instanceof Error) {\n            cause.code = RESULT_CODE.FAILED;\n            return cause;\n        }\n        else if (\"string\" === typeof cause) {\n            if (isCanceledError(cause)) {\n                return makeCanceledErrorInfo();\n            }\n            else {\n                return __assign({}, unknown, { message: cause });\n            }\n        }\n        else if (\"number\" === typeof cause) {\n            return __assign({}, unknown, {\n                cause: {\n                    name: UNKNOWN_ERROR_NAME + ERROR_NAME_SEPARATOR,\n                    message: \"Please check the error code.\",\n                    code: cause\n                }\n            });\n        }\n        else if (\"object\" === typeof cause) {\n            return __assign({}, unknown, cause);\n        }\n        return unknown;\n    }\n    CDP.ensureErrorInfo = ensureErrorInfo;\n    /**\n     * @internal for CDP modules assignable range.\n     */\n    CDP.MODULE_RESULT_CODE_RANGE_CDP = 100;\n    /**\n     * @en Offset value enumeration for [[RESULT_CODE]]. <br>\n     *     The client can expand a definition in other module.\n     * @ja [[RESULT_CODE]] のオフセット値 <br>\n     *     エラーコード対応するモジュール内で 定義を拡張する.\n     *\n     * @example <br>\n     *\n     * ```ts\n     *  export enum RESULT_CODE {\n     *      ERROR_SOMEMODULE_UNEXPECTED  = DECLARE_ERROR_CODE(RESULT_CODE_BASE, LOCAL_CODE_BASE.COMMON + 1, \"error unexpected.\"),\n     *      ERROR_SOMEMODULE_INVALID_ARG = DECLARE_ERROR_CODE(RESULT_CODE_BASE, LOCAL_CODE_BASE.COMMON + 2, \"invalid arguments.\"),\n     *  }\n     *  ASSIGN_RESULT_CODE(RESULT_CODE);\n     * ```\n     */\n    var RESULT_CODE_BASE;\n    (function (RESULT_CODE_BASE) {\n        RESULT_CODE_BASE[RESULT_CODE_BASE[\"CDP_DECLARERATION\"] = 0] = \"CDP_DECLARERATION\";\n        //      MODULE_A = 1 * MODULE_RESULT_CODE_RANGE,    // ex) moduleA: abs(1001 ～ 1999)\n        //      MODULE_B = 2 * MODULE_RESULT_CODE_RANGE,    // ex) moduleB: abs(2001 ～ 2999)\n        //      MODULE_C = 3 * MODULE_RESULT_CODE_RANGE,    // ex) moduleC: abs(3001 ～ 3999)\n        RESULT_CODE_BASE[RESULT_CODE_BASE[\"CDP\"] = 1 * CDP.MODULE_RESULT_CODE_RANGE_CDP] = \"CDP\";\n    })(RESULT_CODE_BASE = CDP.RESULT_CODE_BASE || (CDP.RESULT_CODE_BASE = {}));\n    // \"CDP\" 以外の namespace で定義した場合は、ASSIGN ユーティリティをコールする.\n    //  ASSIGN_RESULT_CODE_BASE(RESULT_CODE_BASE);\n    /**\n     * @en Generate success code.\n     * @ja 成功コードを生成\n     *\n     * @param base\n     * @param localCode\n     * @param message\n     */\n    function DECLARE_SUCCESS_CODE(base, localCode, message) {\n        if (\"string\" === typeof base) {\n            base = CDP.RESULT_CODE_BASE[base];\n        }\n        return declareResultCode(base, localCode, message, true);\n    }\n    CDP.DECLARE_SUCCESS_CODE = DECLARE_SUCCESS_CODE;\n    /**\n     * @en Generate error code.\n     * @ja エラーコード生成\n     *\n     * @param base\n     * @param localCode\n     * @param message\n     */\n    function DECLARE_ERROR_CODE(base, localCode, message) {\n        if (\"string\" === typeof base) {\n            base = CDP.RESULT_CODE_BASE[base];\n        }\n        return declareResultCode(base, localCode, message, false);\n    }\n    CDP.DECLARE_ERROR_CODE = DECLARE_ERROR_CODE;\n    /**\n     * @en Judge success or not.\n     * @ja 成功判定\n     *\n     * @param code\n     */\n    function SUCCEEDED(code) {\n        return 0 <= code;\n    }\n    CDP.SUCCEEDED = SUCCEEDED;\n    /**\n     * @en Judge error or not.\n     * @ja 失敗判定\n     *\n     * @param code\n     */\n    function FAILED(code) {\n        return code < 0;\n    }\n    CDP.FAILED = FAILED;\n    /**\n     * @en Assign declared [[RESULT_CODE_BASE]] to root enumeration.<br>\n     *     (It's necessary also to merge enum in the module system environment.)\n     * @ja 拡張した [[RESULT_CODE_BASE]] を ルート enum にアサイン<br>\n     *     モジュールシステム環境においても、enum をマージするために必要\n     */\n    function ASSIGN_RESULT_CODE_BASE(resultCodeBase) {\n        CDP.RESULT_CODE_BASE = __assign({}, CDP.RESULT_CODE_BASE, resultCodeBase);\n    }\n    CDP.ASSIGN_RESULT_CODE_BASE = ASSIGN_RESULT_CODE_BASE;\n    /**\n     * @en Assign declared [[ASSIGN_RESULT_CODE]] to root enumeration.\n     *     (It's necessary also to merge enum in the module system environment.)\n     * @ja 拡張した [[ASSIGN_RESULT_CODE]] を ルート enum にアサイン\n     *     モジュールシステム環境においても、enum をマージするために必要\n     */\n    function ASSIGN_RESULT_CODE(resultCode) {\n        CDP.RESULT_CODE = __assign({}, CDP.RESULT_CODE, resultCode);\n    }\n    CDP.ASSIGN_RESULT_CODE = ASSIGN_RESULT_CODE;\n    ///////////////////////////////////////////////////////////////////////\n    // module error declaration:\n    var FUNCTION_CODE_RANGE = 10;\n    // cdp.core 内のローカルコードオフセット値\n    var LOCAL_CODE_BASE;\n    (function (LOCAL_CODE_BASE) {\n        LOCAL_CODE_BASE[LOCAL_CODE_BASE[\"CORE\"] = 0] = \"CORE\";\n        LOCAL_CODE_BASE[LOCAL_CODE_BASE[\"PATCH\"] = 1 * FUNCTION_CODE_RANGE] = \"PATCH\";\n    })(LOCAL_CODE_BASE || (LOCAL_CODE_BASE = {}));\n    // @internal Error code definition of `cdp-core`.\n    (function (RESULT_CODE) {\n        RESULT_CODE[RESULT_CODE[\"ERROR_CDP_DECLARATION_CDP\"] = 0] = \"ERROR_CDP_DECLARATION_CDP\";\n        /** `en` [[CDP.initialize]]() failer code. <br> `ja` [[CDP.initialize]]() のエラーコード */\n        RESULT_CODE[RESULT_CODE[\"ERROR_CDP_INITIALIZE_FAILED\"] = DECLARE_ERROR_CODE(RESULT_CODE_BASE.CDP, LOCAL_CODE_BASE.CORE + 1, \"initialized failed.\")] = \"ERROR_CDP_INITIALIZE_FAILED\";\n    })(RESULT_CODE = CDP.RESULT_CODE || (CDP.RESULT_CODE = {}));\n    // \"CDP\" 以外の namespace で定義した場合は、ASSIGN ユーティリティをコールする.\n    //  ASSIGN_RESULT_CODE_BASE(RESULT_CODE);\n    ///////////////////////////////////////////////////////////////////////\n    // private static methods:\n    // RESULT_CODE の登録\n    function declareResultCode(base, moduleCode, message, succeeded) {\n        if (succeeded === void 0) { succeeded = false; }\n        if (moduleCode <= 0 || CDP.MODULE_RESULT_CODE_RANGE <= moduleCode) {\n            console.error(\"declareResultCode(), invalid localCode range. [localCode: \" + moduleCode + \"]\");\n            return;\n        }\n        var signed = succeeded ? 1 : -1;\n        var resultCode = signed * (base + moduleCode);\n        s_code2message[resultCode] = message ? message : (\"[RESULT_CODE: \" + resultCode + \"]\");\n        return resultCode;\n    }\n    // RESULT_CODE から登録されているメッセージを取得\n    function messageFromResultCode(resultCode) {\n        if (s_code2message[resultCode]) {\n            return s_code2message[resultCode];\n        }\n        else {\n            return \"unregistered result code. [RESULT_CODE: \" + resultCode + \"]\";\n        }\n    }\n    // RESULT_CODE から登録されている RESULT_CODE 文字列を取得\n    function buildErrorName(resultCode, tag) {\n        var prefix = tag || \"\";\n        if (CDP.RESULT_CODE[resultCode]) {\n            return prefix + CDP.RESULT_CODE[resultCode] + ERROR_NAME_SEPARATOR;\n        }\n        else {\n            return prefix + UNKNOWN_ERROR_NAME + ERROR_NAME_SEPARATOR;\n        }\n    }\n})(CDP || (CDP = {}));\n\nreturn CDP; }));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"]}