{"version":3,"sources":["dist/cdp.core.js"],"names":["root","factory","define","amd","CDP","exports","module","this","self","global","TAG","Function","webRoot","location","baseUrl","exec","href","Config","initialize","options","setTimeout","Patch","apply","success","error","errorInfo","makeErrorInfo","RESULT_CODE","ERROR_CDP_INITIALIZE_FAILED","message","console","fail","consolePatch","nodePatch","count","groupEnd","time","timeEnd","trace","group","dirxml","debug","groupCollapsed","select","info","profile","assert","msIsIndependentlyComposed","clear","dir","warn","log","profileEnd","MSApp","_MSApp_1","originalAppendChild_1","Node","prototype","appendChild","node","execUnsafeLocalFunction","call","originalInsertBefore_1","insertBefore","newElement","referenceElement","__assign","Object","assign","t","s","i","n","arguments","length","p","hasOwnProperty","CANCELED_MESSAGE","s_code2message","0","1","-1","MODULE_RESULT_CODE_RANGE","resultCode","tag","cause","canceled","msg","code","CANCELED","Error","messageFromResultCode","name","buildErrorName","makeCanceledErrorInfo","isCanceledError","ensureErrorInfo","unknown","FAILED","MODULE_RESULT_CODE_RANGE_CDP","RESULT_CODE_BASE","DECLARE_SUCCESS_CODE","base","localCode","declareResultCode","DECLARE_ERROR_CODE","SUCCEEDED","ASSIGN_RESULT_CODE_BASE","resultCodeBase","ASSIGN_RESULT_CODE","FUNCTION_CODE_RANGE","LOCAL_CODE_BASE","CORE","moduleCode","succeeded","signed","prefix"],"mappings":"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","sourcesContent":["﻿/*!\n * cdp.core.js 2.0.0\n *\n * Date: 2017-08-02T04:24:10.977Z\n */\n(function (root, factory) { if (typeof define === \"function\" && define.amd) { define(function () { return factory(root.CDP || (root.CDP = {})); }); } else if (typeof exports === \"object\") { module.exports = factory(root.CDP || (root.CDP = {})); } else { factory(root.CDP || (root.CDP = {})); } }(((this || 0).self || global), function (CDP) {\nvar CDP;\n(function (CDP) {\n    var TAG = \"[CDP] \";\n    /**\n     * システムの global オブジェクトにアクセス\n     * 通常は Window オブジェクトとなる\n     */\n    CDP.global = Function(\"return this\")();\n    /**\n     * Web root location にアクセス\n     */\n    CDP.webRoot = (function () {\n        if (CDP.global.location) {\n            var baseUrl = /(.+\\/)[^/]*#[^/]+/.exec(CDP.global.location.href);\n            if (!baseUrl) {\n                baseUrl = /(.+\\/)/.exec(CDP.global.location.href);\n            }\n            return baseUrl[1];\n        }\n    })();\n    /**\n     * Config オブジェクトにアクセス\n     */\n    CDP.Config = CDP.Config || CDP.global.Config || {};\n    /**\n     * core の初期化\n     */\n    function initialize(options) {\n        setTimeout(function () {\n            try {\n                CDP.Patch.apply();\n                if (options && typeof options.success === \"function\") {\n                    options.success();\n                }\n            }\n            catch (error) {\n                var errorInfo = CDP.makeErrorInfo(CDP.RESULT_CODE.ERROR_CDP_INITIALIZE_FAILED, TAG, (error && error.message) ? error.message : null, error);\n                console.error(errorInfo.message);\n                if (options && typeof options.fail === \"function\") {\n                    options.fail(errorInfo);\n                }\n            }\n        });\n    }\n    CDP.initialize = initialize;\n})(CDP || (CDP = {}));\nvar CDP;\n(function (CDP) {\n    var TAG = \"[CDP.Patch] \";\n    /**\n     * @class Patch\n     * @brief 実行環境用 Patch 適用ユーティリティクラス\n     */\n    var Patch = (function () {\n        function Patch() {\n        }\n        ///////////////////////////////////////////////////////////////////////\n        // public static methods:\n        /**\n         * パッチの適用\n         */\n        Patch.apply = function () {\n            Patch.consolePatch();\n            Patch.nodePatch();\n        };\n        ///////////////////////////////////////////////////////////////////////\n        // private static methods:\n        // console 用 patch\n        Patch.consolePatch = function () {\n            if (null == CDP.global.console || null == CDP.global.console.error) {\n                CDP.global.console = {\n                    count: function () { },\n                    groupEnd: function () { },\n                    time: function () { },\n                    timeEnd: function () { },\n                    trace: function () { },\n                    group: function () { },\n                    dirxml: function () { },\n                    debug: function () { },\n                    groupCollapsed: function () { },\n                    select: function () { },\n                    info: function () { },\n                    profile: function () { },\n                    assert: function () { },\n                    msIsIndependentlyComposed: function () { },\n                    clear: function () { },\n                    dir: function () { },\n                    warn: function () { },\n                    error: function () { },\n                    log: function () { },\n                    profileEnd: function () { }\n                };\n            }\n        };\n        // WinRT 用 patch\n        Patch.nodePatch = function () {\n            if (\"object\" === typeof MSApp) {\n                var _MSApp_1 = MSApp;\n                var originalAppendChild_1 = Node.prototype.appendChild;\n                Node.prototype.appendChild = function (node) {\n                    var self = this;\n                    return _MSApp_1.execUnsafeLocalFunction(function () {\n                        return originalAppendChild_1.call(self, node);\n                    });\n                };\n                var originalInsertBefore_1 = Node.prototype.insertBefore;\n                Node.prototype.insertBefore = function (newElement, referenceElement) {\n                    var self = this;\n                    return _MSApp_1.execUnsafeLocalFunction(function () {\n                        return originalInsertBefore_1.call(self, newElement, referenceElement);\n                    });\n                };\n            }\n        };\n        return Patch;\n    }());\n    CDP.Patch = Patch;\n})(CDP || (CDP = {}));\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nvar CDP;\n(function (CDP) {\n    var CANCELED_MESSAGE = \"abort\";\n    var s_code2message = {\n        \"0\": \"operation succeeded.\",\n        \"1\": \"operation canceled.\",\n        \"-1\": \"operation failed.\"\n    };\n    ///////////////////////////////////////////////////////////////////////\n    // error utilities:\n    /**\n     * @enum  RESULT_CODE\n     * @brief アプリケーション全体で使用する共通エラーコード定義\n     */\n    var RESULT_CODE;\n    (function (RESULT_CODE) {\n        RESULT_CODE[RESULT_CODE[\"SUCCEEDED\"] = 0] = \"SUCCEEDED\";\n        RESULT_CODE[RESULT_CODE[\"CANCELED\"] = 1] = \"CANCELED\";\n        RESULT_CODE[RESULT_CODE[\"FAILED\"] = -1] = \"FAILED\";\n    })(RESULT_CODE = CDP.RESULT_CODE || (CDP.RESULT_CODE = {}));\n    // ローカルリザルトコードのアサイン可能数\n    CDP.MODULE_RESULT_CODE_RANGE = 1000;\n    /**\n     * エラー情報生成\n     *\n     * @param resultCode [in] RESULT_CODE を指定\n     * @param [tag]      [in] TAG を指定\n     * @param [message]  [in] メッセージを指定\n     * @param [cause]    [in] 下位のエラーを指定\n     * @returns エラーオブジェクト\n     */\n    function makeErrorInfo(resultCode, tag, message, cause) {\n        var canceled = (cause && CANCELED_MESSAGE === cause.message) ? true : false;\n        var msg = canceled ? CANCELED_MESSAGE : message;\n        var code = canceled ? RESULT_CODE.CANCELED : resultCode;\n        var errorInfo = new Error(msg || messageFromResultCode(code));\n        errorInfo.name = buildErrorName(code, tag);\n        errorInfo.code = code;\n        errorInfo.cause = cause;\n        return errorInfo;\n    }\n    CDP.makeErrorInfo = makeErrorInfo;\n    /**\n     * キャンセルエラー情報生成\n     *\n     * @param [tag]      [in] TAG を指定\n     * @param [cause]    [in] 下位のエラーを指定\n     * @returns エラーオブジェクト\n     */\n    function makeCanceledErrorInfo(tag, cause) {\n        return makeErrorInfo(RESULT_CODE.CANCELED, tag, CANCELED_MESSAGE, cause);\n    }\n    CDP.makeCanceledErrorInfo = makeCanceledErrorInfo;\n    /**\n     * エラー情報がキャンセルされたものか判定\n     *\n     * @param error [in] エラー情報\n     * @returns true: キャンセル / false: その他エラー\n     */\n    function isCanceledError(error) {\n        var errorInfo = error;\n        if (errorInfo) {\n            if (RESULT_CODE.CANCELED === errorInfo.code || CANCELED_MESSAGE === errorInfo.message) {\n                return true;\n            }\n        }\n        return false;\n    }\n    CDP.isCanceledError = isCanceledError;\n    /**\n     * 入力を ErrorInfo に変換\n     *\n     * @param cause [in] 入力\n     * @returns ErrorInfo オブジェクト\n     */\n    function ensureErrorInfo(cause) {\n        var errorInfo = cause;\n        var unknown = {\n            name: \"\",\n            code: RESULT_CODE.FAILED,\n            message: \"unknown error\",\n        };\n        if (errorInfo) {\n            if (isCanceledError(errorInfo)) {\n                return errorInfo;\n            }\n            else if (\"string\" === typeof cause) {\n                return __assign({}, unknown, { message: cause });\n            }\n            else if (\"object\" === typeof cause) {\n                return __assign({}, unknown, { message: cause.message }, cause);\n            }\n        }\n        return unknown;\n    }\n    CDP.ensureErrorInfo = ensureErrorInfo;\n    CDP.MODULE_RESULT_CODE_RANGE_CDP = 100;\n    /**\n     * @enum  RESULT_CODE_BASE\n     * @brief リザルトコードのオフセット値\n     *        エラーコード対応するモジュール内で 定義を拡張する.\n     */\n    var RESULT_CODE_BASE;\n    (function (RESULT_CODE_BASE) {\n        RESULT_CODE_BASE[RESULT_CODE_BASE[\"CDP_DECLARERATION\"] = 0] = \"CDP_DECLARERATION\";\n        //      MODULE_A = 1 * MODULE_RESULT_CODE_RANGE,    // ex) moduleA: abs(1001 ～ 1999)\n        //      MODULE_B = 2 * MODULE_RESULT_CODE_RANGE,    // ex) moduleB: abs(2001 ～ 2999)\n        //      MODULE_C = 3 * MODULE_RESULT_CODE_RANGE,    // ex) moduleC: abs(3001 ～ 3999)\n        RESULT_CODE_BASE[RESULT_CODE_BASE[\"CDP\"] = 1 * CDP.MODULE_RESULT_CODE_RANGE_CDP] = \"CDP\";\n    })(RESULT_CODE_BASE = CDP.RESULT_CODE_BASE || (CDP.RESULT_CODE_BASE = {}));\n    // \"CDP\" 以外の namespace で定義した場合は、ASSIGN ユーティリティをコールする.\n    //  ASSIGN_RESULT_CODE_BASE(RESULT_CODE_BASE);\n    // サクセスコード生成\n    function DECLARE_SUCCESS_CODE(base, localCode, message) {\n        if (\"string\" === typeof base) {\n            base = CDP.RESULT_CODE_BASE[base];\n        }\n        return declareResultCode(base, localCode, message, true);\n    }\n    CDP.DECLARE_SUCCESS_CODE = DECLARE_SUCCESS_CODE;\n    // エラーコード生成\n    function DECLARE_ERROR_CODE(base, localCode, message) {\n        if (\"string\" === typeof base) {\n            base = CDP.RESULT_CODE_BASE[base];\n        }\n        return declareResultCode(base, localCode, message, false);\n    }\n    CDP.DECLARE_ERROR_CODE = DECLARE_ERROR_CODE;\n    // 成功判定\n    function SUCCEEDED(code) {\n        return 0 <= code;\n    }\n    CDP.SUCCEEDED = SUCCEEDED;\n    // 失敗判定\n    function FAILED(code) {\n        return code < 0;\n    }\n    CDP.FAILED = FAILED;\n    /**\n     * RESULT_CODE_BASE のアサイン\n     */\n    function ASSIGN_RESULT_CODE_BASE(resultCodeBase) {\n        CDP.RESULT_CODE_BASE = __assign({}, CDP.RESULT_CODE_BASE, resultCodeBase);\n    }\n    CDP.ASSIGN_RESULT_CODE_BASE = ASSIGN_RESULT_CODE_BASE;\n    /**\n     * RESULT_CODE のアサイン\n     */\n    function ASSIGN_RESULT_CODE(resultCode) {\n        CDP.RESULT_CODE = __assign({}, CDP.RESULT_CODE, resultCode);\n    }\n    CDP.ASSIGN_RESULT_CODE = ASSIGN_RESULT_CODE;\n    ///////////////////////////////////////////////////////////////////////\n    // module error declaration:\n    var FUNCTION_CODE_RANGE = 10;\n    /**\n     * @enum  LOCAL_CODE_BASE\n     * @brief cdp.core 内のローカルコードオフセット値\n     */\n    var LOCAL_CODE_BASE;\n    (function (LOCAL_CODE_BASE) {\n        LOCAL_CODE_BASE[LOCAL_CODE_BASE[\"CORE\"] = 0] = \"CORE\";\n        LOCAL_CODE_BASE[LOCAL_CODE_BASE[\"PATCH\"] = 1 * FUNCTION_CODE_RANGE] = \"PATCH\";\n    })(LOCAL_CODE_BASE || (LOCAL_CODE_BASE = {}));\n    /**\n     * @enum  RESULT_CODE\n     * @brief cdp.core のエラーコード定義\n     *        モジュール別に拡張可能\n     */\n    (function (RESULT_CODE) {\n        RESULT_CODE[RESULT_CODE[\"ERROR_CDP_DECLARATION_CDP\"] = 0] = \"ERROR_CDP_DECLARATION_CDP\";\n        RESULT_CODE[RESULT_CODE[\"ERROR_CDP_INITIALIZE_FAILED\"] = DECLARE_ERROR_CODE(RESULT_CODE_BASE.CDP, LOCAL_CODE_BASE.CORE + 1, \"initialized failed.\")] = \"ERROR_CDP_INITIALIZE_FAILED\";\n    })(RESULT_CODE = CDP.RESULT_CODE || (CDP.RESULT_CODE = {}));\n    // \"CDP\" 以外の namespace で定義した場合は、ASSIGN ユーティリティをコールする.\n    //  ASSIGN_RESULT_CODE_BASE(RESULT_CODE);\n    ///////////////////////////////////////////////////////////////////////\n    // private static methods:\n    /**\n     * リザルトコードの登録\n     *\n     * @param base       [in] RESULT_CODE_BASE を指定\n     * @param moduleCode [in] モジュールで一意になる数値 (0 < localCode < 1000)\n     * @param [message]  [in] リザルトコードに紐づくメッセージ\n     * @returns リザルトコード\n     */\n    function declareResultCode(base, moduleCode, message, succeeded) {\n        if (succeeded === void 0) { succeeded = false; }\n        if (moduleCode <= 0 || CDP.MODULE_RESULT_CODE_RANGE <= moduleCode) {\n            console.error(\"declareResultCode(), invalid localCode range. [localCode: \" + moduleCode + \"]\");\n            return;\n        }\n        var signed = succeeded ? 1 : -1;\n        var resultCode = signed * (base + moduleCode);\n        s_code2message[resultCode] = message ? message : (\"[RESULT_CODE: \" + resultCode + \"]\");\n        return resultCode;\n    }\n    /**\n     * リザルトコードから登録されているメッセージを取得\n     *\n     * @param resultCode [in] リザルトコード\n     * @returns エラーメッセージ\n     */\n    function messageFromResultCode(resultCode) {\n        if (s_code2message[resultCode]) {\n            return s_code2message[resultCode];\n        }\n        else {\n            return \"unregistered result code. [RESULT_CODE: \" + resultCode + \"]\";\n        }\n    }\n    /**\n     * リザルトコードから登録されているリザルトコード文字列を取得\n     *\n     * @param resultCode [in] リザルトコード\n     * @param tag        [in] TAG を指定\n     * @returns リザルトコード識別文字列\n     */\n    function buildErrorName(resultCode, tag) {\n        var prefix = tag || \"\";\n        if (CDP.RESULT_CODE[resultCode]) {\n            return prefix + CDP.RESULT_CODE[resultCode] + \": \";\n        }\n        else {\n            return prefix;\n        }\n    }\n})(CDP || (CDP = {}));\n\nreturn CDP; }));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNkcDovLy9DRFAvQ29yZS50cyIsImNkcDovLy9DRFAvUGF0Y2gudHMiLCJjZHA6Ly8vQ0RQL0Vycm9yRGVmcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFVLEdBQUcsQ0E4RFo7QUE5REQsV0FBVSxHQUFHO0lBRVQsSUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDO0lBRXJCOzs7T0FHRztJQUNVLFVBQU0sR0FBUSxRQUFRLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQztJQUdyRDs7T0FFRztJQUNVLFdBQU8sR0FBVyxDQUFDO1FBQzVCLEVBQUUsQ0FBQyxDQUFDLFVBQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ2xCLElBQUksT0FBTyxHQUFHLG1CQUFtQixDQUFDLElBQUksQ0FBQyxVQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzdELEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztnQkFDWCxPQUFPLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2xELENBQUM7WUFDRCxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLENBQUM7SUFDTCxDQUFDLENBQUMsRUFBRSxDQUFDO0lBRUw7O09BRUc7SUFDVSxVQUFNLEdBQVEsR0FBRyxDQUFDLE1BQU0sSUFBSSxVQUFNLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQztJQVc3RDs7T0FFRztJQUNILG9CQUEyQixPQUF5QjtRQUNoRCxVQUFVLENBQUM7WUFDUCxJQUFJLENBQUM7Z0JBQ0QsU0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNkLEVBQUUsQ0FBQyxDQUFDLE9BQU8sSUFBSSxPQUFPLE9BQU8sQ0FBQyxPQUFPLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQztvQkFDbkQsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUN0QixDQUFD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LEdBQUcsT0FBTyxHQUFHLE9BQU8sR0FBRyxDQUFDLG1CQUFpQixVQUFVLE1BQUcsQ0FBQyxDQUFDO1FBQ2xGLE1BQU0sQ0FBQyxVQUFVLENBQUM7SUFDdEIsQ0FBQztJQUdEOzs7OztPQUtHO0lBQ0gsK0JBQStCLFVBQWtCO1FBQzdDLEVBQUUsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDN0IsTUFBTSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN0QyxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDSixNQUFNLENBQUMsNkNBQTJDLFVBQVUsTUFBRyxDQUFDO1FBQ3BFLENBQUM7SUFDTCxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsd0JBQXdCLFVBQWtCLEVBQUUsR0FBVztRQUNuRCxJQUFNLE1BQU0sR0FBRyxHQUFHLElBQUksRUFBRSxDQUFDO1FBQ3pCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlCLE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDdkQsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUNsQixDQUFDO0lBQ0wsQ0FBQztBQUNMLENBQUMsRUFqUFMsR0FBRyxLQUFILEdBQUcsUUFpUFoiLCJzb3VyY2VzQ29udGVudCI6WyJuYW1lc3BhY2UgQ0RQIHtcclxuXHJcbiAgICBjb25zdCBUQUcgPSBcIltDRFBdIFwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog44K344K544OG44Og44GuIGdsb2JhbCDjgqrjg5bjgrjjgqfjgq/jg4jjgavjgqLjgq/jgrvjgrlcclxuICAgICAqIOmAmuW4uOOBryBXaW5kb3cg44Kq44OW44K444Kn44Kv44OI44Go44Gq44KLXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBjb25zdCBnbG9iYWw6IGFueSA9IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXZWIgcm9vdCBsb2NhdGlvbiDjgavjgqLjgq/jgrvjgrlcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNvbnN0IHdlYlJvb3Q6IHN0cmluZyA9ICgoKSA9PiB7XHJcbiAgICAgICAgaWYgKGdsb2JhbC5sb2NhdGlvbikge1xyXG4gICAgICAgICAgICBsZXQgYmFzZVVybCA9IC8oLitcXC8pW14vXSojW14vXSsvLmV4ZWMoZ2xvYmFsLmxvY2F0aW9uLmhyZWYpO1xyXG4gICAgICAgICAgICBpZiAoIWJhc2VVcmwpIHtcclxuICAgICAgICAgICAgICAgIGJhc2VVcmwgPSAvKC4rXFwvKS8uZXhlYyhnbG9iYWwubG9jYXRpb24uaHJlZik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGJhc2VVcmxbMV07XHJcbiAgICAgICAgfVxyXG4gICAgfSkoKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbmZpZyDjgqrjg5bjgrjjgqfjgq/jg4jjgavjgqLjgq/jgrvjgrlcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNvbnN0IENvbmZpZzogYW55ID0gQ0RQLkNvbmZpZyB8fCBnbG9iYWwuQ29uZmlnIHx8IHt9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Yid5pyf5YyW44Kq44OX44K344On44Oz44Kk44Oz44K/44O844OV44Kn44Kk44K5XHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgQ29yZUluaXRPcHRpb25zIHtcclxuICAgICAgICBzdWNjZXNzPzogKCkgPT4gdm9pZDtcclxuICAgICAgICBmYWlsPzogKGVycm9yPzogYW55KSA9PiB2b2lkO1xyXG4gICAgICAgIFtrZXk6IHN0cmluZ106IGFueTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGNvcmUg44Gu5Yid5pyf5YyWXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplKG9wdGlvbnM/OiBDb3JlSW5pdE9wdGlvbnMpOiB2b2lkIHtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIFBhdGNoLmFwcGx5KCk7XHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucyAmJiB0eXBlb2Ygb3B0aW9ucy5zdWNjZXNzID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnN1Y2Nlc3MoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9ySW5mbyA9IG1ha2VFcnJvckluZm8oXHJcbiAgICAgICAgICAgICAgICAgICAgUkVTVUxUX0NPREUuRVJST1JfQ0RQX0lOSVRJQUxJWkVfRkFJTEVELFxyXG4gICAgICAgICAgICAgICAgICAgIFRBRyxcclxuICAgICAgICAgICAgICAgICAgICAoZXJyb3IgJiYgZXJyb3IubWVzc2FnZSkgPyBlcnJvci5tZXNzYWdlIDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICBlcnJvclxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3JJbmZvLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMgJiYgdHlwZW9mIG9wdGlvbnMuZmFpbCA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5mYWlsKGVycm9ySW5mbyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cclxuZGVjbGFyZSBtb2R1bGUgXCJjZHAuY29yZVwiIHtcclxuICAgIGV4cG9ydCA9IENEUDtcclxufVxyXG4iLCJuYW1lc3BhY2UgQ0RQIHtcclxuXHJcbiAgICBjb25zdCBUQUc6IHN0cmluZyA9IFwiW0NEUC5QYXRjaF0gXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAY2xhc3MgUGF0Y2hcclxuICAgICAqIEBicmllZiDlrp/ooYznkrDlooPnlKggUGF0Y2gg6YGp55So44Om44O844OG44Kj44Oq44OG44Kj44Kv44Op44K5XHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBjbGFzcyBQYXRjaCB7XHJcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgICAgICAvLyBwdWJsaWMgc3RhdGljIG1ldGhvZHM6XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODkeODg+ODgeOBrumBqeeUqFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgYXBwbHkoKTogdm9pZCB7XHJcbiAgICAgICAgICAgIFBhdGNoLmNvbnNvbGVQYXRjaCgpO1xyXG4gICAgICAgICAgICBQYXRjaC5ub2RlUGF0Y2goKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAgICAgLy8gcHJpdmF0ZSBzdGF0aWMgbWV0aG9kczpcclxuXHJcbiAgICAgICAgLy8gY29uc29sZSDnlKggcGF0Y2hcclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBjb25zb2xlUGF0Y2goKTogdm9pZCB7XHJcbiAgICAgICAgICAgIGlmIChudWxsID09IGdsb2JhbC5jb25zb2xlIHx8IG51bGwgPT0gZ2xvYmFsLmNvbnNvbGUuZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGdsb2JhbC5jb25zb2xlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvdW50OiAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7IC8qIGR1bW15ICovIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXBFbmQ6ICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHsgLyogZHVtbXkgKi8gfSxcclxuICAgICAgICAgICAgICAgICAgICB0aW1lOiAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkgeyAvKiBkdW1teSAqLyB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHRpbWVFbmQ6ICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7IC8qIGR1bW15ICovIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgdHJhY2U6ICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHsgLyogZHVtbXkgKi8gfSxcclxuICAgICAgICAgICAgICAgICAgICBncm91cDogICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkgeyAvKiBkdW1teSAqLyB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGRpcnhtbDogICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7IC8qIGR1bW15ICovIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgZGVidWc6ICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHsgLyogZHVtbXkgKi8gfSxcclxuICAgICAgICAgICAgICAgICAgICBncm91cENvbGxhcHNlZDogICAgICAgICAgICAgZnVuY3Rpb24gKCkgeyAvKiBkdW1teSAqLyB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdDogICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7IC8qIGR1bW15ICovIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgaW5mbzogICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHsgLyogZHVtbXkgKi8gfSxcclxuICAgICAgICAgICAgICAgICAgICBwcm9maWxlOiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkgeyAvKiBkdW1teSAqLyB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGFzc2VydDogICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7IC8qIGR1bW15ICovIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgbXNJc0luZGVwZW5kZW50bHlDb21wb3NlZDogIGZ1bmN0aW9uICgpIHsgLyogZHVtbXkgKi8gfSxcclxuICAgICAgICAgICAgICAgICAgICBjbGVhcjogICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkgeyAvKiBkdW1teSAqLyB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGRpcjogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7IC8qIGR1bW15ICovIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgd2FybjogICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHsgLyogZHVtbXkgKi8gfSxcclxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkgeyAvKiBkdW1teSAqLyB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGxvZzogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7IC8qIGR1bW15ICovIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvZmlsZUVuZDogICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHsgLyogZHVtbXkgKi8gfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gV2luUlQg55SoIHBhdGNoXHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgbm9kZVBhdGNoKCk6IHZvaWQge1xyXG4gICAgICAgICAgICBpZiAoXCJvYmplY3RcIiA9PT0gdHlwZW9mIE1TQXBwKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBfTVNBcHA6IGFueSA9IE1TQXBwO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsQXBwZW5kQ2hpbGQgPSBOb2RlLnByb3RvdHlwZS5hcHBlbmRDaGlsZDtcclxuICAgICAgICAgICAgICAgIE5vZGUucHJvdG90eXBlLmFwcGVuZENoaWxkID0gZnVuY3Rpb24gKG5vZGU6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxBcHBlbmRDaGlsZC5jYWxsKHNlbGYsIG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBvcmlnaW5hbEluc2VydEJlZm9yZSA9IE5vZGUucHJvdG90eXBlLmluc2VydEJlZm9yZTtcclxuICAgICAgICAgICAgICAgIE5vZGUucHJvdG90eXBlLmluc2VydEJlZm9yZSA9IGZ1bmN0aW9uIChuZXdFbGVtZW50OiBhbnksIHJlZmVyZW5jZUVsZW1lbnQ6IE5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsSW5zZXJ0QmVmb3JlLmNhbGwoc2VsZiwgbmV3RWxlbWVudCwgcmVmZXJlbmNlRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsIm5hbWVzcGFjZSBDRFAge1xyXG5cclxuICAgIGNvbnN0IENBTkNFTEVEX01FU1NBR0UgPSBcImFib3J0XCI7XHJcbiAgICBjb25zdCBzX2NvZGUybWVzc2FnZTogeyBbcmVzdWx0Q29kZTogc3RyaW5nXTogc3RyaW5nIH0gPSB7XHJcbiAgICAgICAgXCIwXCI6IFwib3BlcmF0aW9uIHN1Y2NlZWRlZC5cIixcclxuICAgICAgICBcIjFcIjogXCJvcGVyYXRpb24gY2FuY2VsZWQuXCIsXHJcbiAgICAgICAgXCItMVwiOiBcIm9wZXJhdGlvbiBmYWlsZWQuXCJcclxuICAgIH07XHJcblxyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIC8vIGVycm9yIHV0aWxpdGllczpcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBlbnVtICBSRVNVTFRfQ09ERVxyXG4gICAgICogQGJyaWVmIOOCouODl+ODquOCseODvOOCt+ODp+ODs+WFqOS9k+OBp+S9v+eUqOOBmeOCi+WFsemAmuOCqOODqeODvOOCs+ODvOODieWumue+qVxyXG4gICAgICovXHJcbiAgICBleHBvcnQgZW51bSBSRVNVTFRfQ09ERSB7XHJcbiAgICAgICAgU1VDQ0VFREVEICAgPSAwLCAgICAvLyDmsY7nlKjmiJDlip9cclxuICAgICAgICBDQU5DRUxFRCAgICA9IDEsICAgIC8vIOaxjueUqOOCreODo+ODs+OCu+ODq1xyXG4gICAgICAgIEZBSUxFRCAgICAgID0gLTEsICAgLy8g5rGO55So44Gu44Ko44Op44O8XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJmYWNlIEVycm9ySW5mb1xyXG4gICAgICogQGJyaWVmICAgICDjgqjjg6njg7zkvJ3pgZTjgqrjg5bjgrjjgqfjgq/jg4hcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBFcnJvckluZm8gZXh0ZW5kcyBFcnJvciB7XHJcbiAgICAgICAgY29kZTogUkVTVUxUX0NPREU7ICAgLy8g44Ki44OX44Oq44Kx44O844K344On44OzL+ODqeOCpOODluODqeODquOBp+Wumue+qeOBmeOCi+ODquOCtuODq+ODiOOCs+ODvOODiVxyXG4gICAgICAgIGNhdXNlPzogRXJyb3I7ICAgICAgIC8vIOOCqOODqeODvOOBruips+e0sFxyXG4gICAgfVxyXG5cclxuICAgIC8vIOODreODvOOCq+ODq+ODquOCtuODq+ODiOOCs+ODvOODieOBruOCouOCteOCpOODs+WPr+iDveaVsFxyXG4gICAgZXhwb3J0IGNvbnN0IE1PRFVMRV9SRVNVTFRfQ09ERV9SQU5HRSA9IDEwMDA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjgqjjg6njg7zmg4XloLHnlJ/miJBcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gcmVzdWx0Q29kZSBbaW5dIFJFU1VMVF9DT0RFIOOCkuaMh+WumlxyXG4gICAgICogQHBhcmFtIFt0YWddICAgICAgW2luXSBUQUcg44KS5oyH5a6aXHJcbiAgICAgKiBAcGFyYW0gW21lc3NhZ2VdICBbaW5dIOODoeODg+OCu+ODvOOCuOOCkuaMh+WumlxyXG4gICAgICogQHBhcmFtIFtjYXVzZV0gICAgW2luXSDkuIvkvY3jga7jgqjjg6njg7zjgpLmjIflrppcclxuICAgICAqIEByZXR1cm5zIOOCqOODqeODvOOCquODluOCuOOCp+OCr+ODiFxyXG4gICAgICovXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gbWFrZUVycm9ySW5mbyhyZXN1bHRDb2RlOiBudW1iZXIsIHRhZz86IHN0cmluZywgbWVzc2FnZT86IHN0cmluZywgY2F1c2U/OiBFcnJvcik6IEVycm9ySW5mbyB7XHJcbiAgICAgICAgY29uc3QgY2FuY2VsZWQgPSAoY2F1c2UgJiYgQ0FOQ0VMRURfTUVTU0FHRSA9PT0gY2F1c2UubWVzc2FnZSkgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgY29uc3QgbXNnID0gY2FuY2VsZWQgPyBDQU5DRUxFRF9NRVNTQUdFIDogbWVzc2FnZTtcclxuICAgICAgICBjb25zdCBjb2RlID0gY2FuY2VsZWQgPyBSRVNVTFRfQ09ERS5DQU5DRUxFRCA6IHJlc3VsdENvZGU7XHJcbiAgICAgICAgY29uc3QgZXJyb3JJbmZvID0gPEVycm9ySW5mbz5uZXcgRXJyb3IobXNnIHx8IG1lc3NhZ2VGcm9tUmVzdWx0Q29kZShjb2RlKSk7XHJcbiAgICAgICAgZXJyb3JJbmZvLm5hbWUgID0gYnVpbGRFcnJvck5hbWUoY29kZSwgdGFnKTtcclxuICAgICAgICBlcnJvckluZm8uY29kZSAgPSBjb2RlO1xyXG4gICAgICAgIGVycm9ySW5mby5jYXVzZSA9IGNhdXNlO1xyXG4gICAgICAgIHJldHVybiBlcnJvckluZm87XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjgq3jg6Pjg7Pjgrvjg6vjgqjjg6njg7zmg4XloLHnlJ/miJBcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gW3RhZ10gICAgICBbaW5dIFRBRyDjgpLmjIflrppcclxuICAgICAqIEBwYXJhbSBbY2F1c2VdICAgIFtpbl0g5LiL5L2N44Gu44Ko44Op44O844KS5oyH5a6aXHJcbiAgICAgKiBAcmV0dXJucyDjgqjjg6njg7zjgqrjg5bjgrjjgqfjgq/jg4hcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIG1ha2VDYW5jZWxlZEVycm9ySW5mbyh0YWc/OiBzdHJpbmcsIGNhdXNlPzogRXJyb3IpOiBFcnJvckluZm8ge1xyXG4gICAgICAgIHJldHVybiBtYWtlRXJyb3JJbmZvKFJFU1VMVF9DT0RFLkNBTkNFTEVELCB0YWcsIENBTkNFTEVEX01FU1NBR0UsIGNhdXNlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOOCqOODqeODvOaDheWgseOBjOOCreODo+ODs+OCu+ODq+OBleOCjOOBn+OCguOBruOBi+WIpOWumlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBlcnJvciBbaW5dIOOCqOODqeODvOaDheWgsVxyXG4gICAgICogQHJldHVybnMgdHJ1ZTog44Kt44Oj44Oz44K744OrIC8gZmFsc2U6IOOBneOBruS7luOCqOODqeODvFxyXG4gICAgICovXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gaXNDYW5jZWxlZEVycm9yKGVycm9yOiBFcnJvcik6IGJvb2xlYW4ge1xyXG4gICAgICAgIGNvbnN0IGVycm9ySW5mbyA9IDxFcnJvckluZm8+ZXJyb3I7XHJcbiAgICAgICAgaWYgKGVycm9ySW5mbykge1xyXG4gICAgICAgICAgICBpZiAoUkVTVUxUX0NPREUuQ0FOQ0VMRUQgPT09IGVycm9ySW5mby5jb2RlIHx8IENBTkNFTEVEX01FU1NBR0UgPT09IGVycm9ySW5mby5tZXNzYWdlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlhaXlipvjgpIgRXJyb3JJbmZvIOOBq+WkieaPm1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBjYXVzZSBbaW5dIOWFpeWKm1xyXG4gICAgICogQHJldHVybnMgRXJyb3JJbmZvIOOCquODluOCuOOCp+OCr+ODiFxyXG4gICAgICovXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gZW5zdXJlRXJyb3JJbmZvKGNhdXNlPzogYW55KTogRXJyb3JJbmZvIHtcclxuICAgICAgICBjb25zdCBlcnJvckluZm8gPSA8RXJyb3JJbmZvPmNhdXNlO1xyXG4gICAgICAgIGNvbnN0IHVua25vd246IEVycm9ySW5mbyA9IHtcclxuICAgICAgICAgICAgbmFtZTogXCJcIixcclxuICAgICAgICAgICAgY29kZTogUkVTVUxUX0NPREUuRkFJTEVELFxyXG4gICAgICAgICAgICBtZXNzYWdlOiBcInVua25vd24gZXJyb3JcIixcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChlcnJvckluZm8pIHtcclxuICAgICAgICAgICAgaWYgKGlzQ2FuY2VsZWRFcnJvcihlcnJvckluZm8pKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3JJbmZvO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKFwic3RyaW5nXCIgPT09IHR5cGVvZiBjYXVzZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgLi4udW5rbm93biwgLi4ueyBtZXNzYWdlOiBjYXVzZSB9IH07XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXCJvYmplY3RcIiA9PT0gdHlwZW9mIGNhdXNlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyAuLi51bmtub3duLCAuLi57IG1lc3NhZ2U6IGNhdXNlLm1lc3NhZ2UgfSwgLi4uY2F1c2UgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdW5rbm93bjtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY29uc3QgTU9EVUxFX1JFU1VMVF9DT0RFX1JBTkdFX0NEUCA9IDEwMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBlbnVtICBSRVNVTFRfQ09ERV9CQVNFXHJcbiAgICAgKiBAYnJpZWYg44Oq44K244Or44OI44Kz44O844OJ44Gu44Kq44OV44K744OD44OI5YCkXHJcbiAgICAgKiAgICAgICAg44Ko44Op44O844Kz44O844OJ5a++5b+c44GZ44KL44Oi44K444Ol44O844Or5YaF44GnIOWumue+qeOCkuaLoeW8teOBmeOCiy5cclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGVudW0gUkVTVUxUX0NPREVfQkFTRSB7XHJcbiAgICAgICAgQ0RQX0RFQ0xBUkVSQVRJT04gPSAwLCAvLyBUUzI0MzIg5a++562WOiDlkIzkuIAgbmFtZXNwYWNlIOOBq+ikh+aVsOWbnuOBq+OCj+OBn+OBo+OBpuWQjOWQjeOBriBlbnVtIOOCkuWuo+iogOOBmeOCi+WgtOWQiOOBq+W/heimgS5cclxuLy8gICAgICBNT0RVTEVfQSA9IDEgKiBNT0RVTEVfUkVTVUxUX0NPREVfUkFOR0UsICAgIC8vIGV4KSBtb2R1bGVBOiBhYnMoMTAwMSDvvZ4gMTk5OSlcclxuLy8gICAgICBNT0RVTEVfQiA9IDIgKiBNT0RVTEVfUkVTVUxUX0NPREVfUkFOR0UsICAgIC8vIGV4KSBtb2R1bGVCOiBhYnMoMjAwMSDvvZ4gMjk5OSlcclxuLy8gICAgICBNT0RVTEVfQyA9IDMgKiBNT0RVTEVfUkVTVUxUX0NPREVfUkFOR0UsICAgIC8vIGV4KSBtb2R1bGVDOiBhYnMoMzAwMSDvvZ4gMzk5OSlcclxuICAgICAgICBDRFAgPSAxICogTU9EVUxFX1JFU1VMVF9DT0RFX1JBTkdFX0NEUCwgICAgIC8vIGNkcCByZXNlcnZlZC4gYWJzKDAg772eIDEwMDApXHJcbiAgICB9XHJcbiAgICAvLyBcIkNEUFwiIOS7peWkluOBriBuYW1lc3BhY2Ug44Gn5a6a576p44GX44Gf5aC05ZCI44Gv44CBQVNTSUdOIOODpuODvOODhuOCo+ODquODhuOCo+OCkuOCs+ODvOODq+OBmeOCiy5cclxuLy8gIEFTU0lHTl9SRVNVTFRfQ09ERV9CQVNFKFJFU1VMVF9DT0RFX0JBU0UpO1xyXG5cclxuICAgIC8vIOOCteOCr+OCu+OCueOCs+ODvOODieeUn+aIkFxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIERFQ0xBUkVfU1VDQ0VTU19DT0RFKGJhc2U6IG51bWJlciB8IHN0cmluZywgbG9jYWxDb2RlOiBudW1iZXIsIG1lc3NhZ2U/OiBzdHJpbmcpOiBudW1iZXIge1xyXG4gICAgICAgIGlmIChcInN0cmluZ1wiID09PSB0eXBlb2YgYmFzZSkge1xyXG4gICAgICAgICAgICBiYXNlID0gQ0RQLlJFU1VMVF9DT0RFX0JBU0VbYmFzZV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkZWNsYXJlUmVzdWx0Q29kZSg8UkVTVUxUX0NPREVfQkFTRT5iYXNlLCBsb2NhbENvZGUsIG1lc3NhZ2UsIHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOOCqOODqeODvOOCs+ODvOODieeUn+aIkFxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIERFQ0xBUkVfRVJST1JfQ09ERShiYXNlOiBudW1iZXIgfCBzdHJpbmcsIGxvY2FsQ29kZTogbnVtYmVyLCBtZXNzYWdlPzogc3RyaW5nKTogbnVtYmVyIHtcclxuICAgICAgICBpZiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGJhc2UpIHtcclxuICAgICAgICAgICAgYmFzZSA9IENEUC5SRVNVTFRfQ09ERV9CQVNFW2Jhc2VdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZGVjbGFyZVJlc3VsdENvZGUoPFJFU1VMVF9DT0RFX0JBU0U+YmFzZSwgbG9jYWxDb2RlLCBtZXNzYWdlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5oiQ5Yqf5Yik5a6aXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gU1VDQ0VFREVEKGNvZGU6IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiAwIDw9IGNvZGU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5aSx5pWX5Yik5a6aXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gRkFJTEVEKGNvZGU6IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiBjb2RlIDwgMDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJFU1VMVF9DT0RFX0JBU0Ug44Gu44Ki44K144Kk44OzXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBBU1NJR05fUkVTVUxUX0NPREVfQkFTRShyZXN1bHRDb2RlQmFzZTogb2JqZWN0KTogdm9pZCB7XHJcbiAgICAgICAgQ0RQLlJFU1VMVF9DT0RFX0JBU0UgPSA8YW55PnsgLi4uQ0RQLlJFU1VMVF9DT0RFX0JBU0UsIC4uLnJlc3VsdENvZGVCYXNlIH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSRVNVTFRfQ09ERSDjga7jgqLjgrXjgqTjg7NcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIEFTU0lHTl9SRVNVTFRfQ09ERShyZXN1bHRDb2RlOiBvYmplY3QpOiB2b2lkIHtcclxuICAgICAgICBDRFAuUkVTVUxUX0NPREUgPSA8YW55PnsgLi4uQ0RQLlJFU1VMVF9DT0RFLCAuLi5yZXN1bHRDb2RlIH07XHJcbiAgICB9XHJcblxyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIC8vIG1vZHVsZSBlcnJvciBkZWNsYXJhdGlvbjpcclxuXHJcbiAgICBjb25zdCBGVU5DVElPTl9DT0RFX1JBTkdFID0gMTA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZW51bSAgTE9DQUxfQ09ERV9CQVNFXHJcbiAgICAgKiBAYnJpZWYgY2RwLmNvcmUg5YaF44Gu44Ot44O844Kr44Or44Kz44O844OJ44Kq44OV44K744OD44OI5YCkXHJcbiAgICAgKi9cclxuICAgIGVudW0gTE9DQUxfQ09ERV9CQVNFIHtcclxuICAgICAgICBDT1JFICAgID0gMCxcclxuICAgICAgICBQQVRDSCAgID0gMSAqIEZVTkNUSU9OX0NPREVfUkFOR0UsXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZW51bSAgUkVTVUxUX0NPREVcclxuICAgICAqIEBicmllZiBjZHAuY29yZSDjga7jgqjjg6njg7zjgrPjg7zjg4nlrprnvqlcclxuICAgICAqICAgICAgICDjg6Ljgrjjg6Xjg7zjg6vliKXjgavmi6HlvLXlj6/og71cclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGVudW0gUkVTVUxUX0NPREUge1xyXG4gICAgICAgIEVSUk9SX0NEUF9ERUNMQVJBVElPTl9DRFAgPSAwLCAvLyBUUzI0MzIg5a++562WOiDlkIzkuIAgbmFtZXNwYWNlIOOBq+ikh+aVsOWbnuOBq+OCj+OBn+OBo+OBpuWQjOWQjeOBriBlbnVtIOOCkuWuo+iogOOBmeOCi+WgtOWQiOOBq+W/heimgS5cclxuICAgICAgICBFUlJPUl9DRFBfSU5JVElBTElaRV9GQUlMRUQgPSBERUNMQVJFX0VSUk9SX0NPREUoUkVTVUxUX0NPREVfQkFTRS5DRFAsIExPQ0FMX0NPREVfQkFTRS5DT1JFICsgMSwgXCJpbml0aWFsaXplZCBmYWlsZWQuXCIpLFxyXG4gICAgfVxyXG4gICAgLy8gXCJDRFBcIiDku6XlpJbjga4gbmFtZXNwYWNlIOOBp+Wumue+qeOBl+OBn+WgtOWQiOOBr+OAgUFTU0lHTiDjg6bjg7zjg4bjgqPjg6rjg4bjgqPjgpLjgrPjg7zjg6vjgZnjgosuXHJcbi8vICBBU1NJR05fUkVTVUxUX0NPREVfQkFTRShSRVNVTFRfQ09ERSk7XHJcblxyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIC8vIHByaXZhdGUgc3RhdGljIG1ldGhvZHM6XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjg6rjgrbjg6vjg4jjgrPjg7zjg4njga7nmbvpjLJcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gYmFzZSAgICAgICBbaW5dIFJFU1VMVF9DT0RFX0JBU0Ug44KS5oyH5a6aXHJcbiAgICAgKiBAcGFyYW0gbW9kdWxlQ29kZSBbaW5dIOODouOCuOODpeODvOODq+OBp+S4gOaEj+OBq+OBquOCi+aVsOWApCAoMCA8IGxvY2FsQ29kZSA8IDEwMDApXHJcbiAgICAgKiBAcGFyYW0gW21lc3NhZ2VdICBbaW5dIOODquOCtuODq+ODiOOCs+ODvOODieOBq+e0kOOBpeOBj+ODoeODg+OCu+ODvOOCuFxyXG4gICAgICogQHJldHVybnMg44Oq44K244Or44OI44Kz44O844OJXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGRlY2xhcmVSZXN1bHRDb2RlKGJhc2U6IFJFU1VMVF9DT0RFX0JBU0UsIG1vZHVsZUNvZGU6IG51bWJlciwgbWVzc2FnZT86IHN0cmluZywgc3VjY2VlZGVkOiBib29sZWFuID0gZmFsc2UpOiBudW1iZXIge1xyXG4gICAgICAgIGlmIChtb2R1bGVDb2RlIDw9IDAgfHwgTU9EVUxFX1JFU1VMVF9DT0RFX1JBTkdFIDw9IG1vZHVsZUNvZGUpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgZGVjbGFyZVJlc3VsdENvZGUoKSwgaW52YWxpZCBsb2NhbENvZGUgcmFuZ2UuIFtsb2NhbENvZGU6ICR7bW9kdWxlQ29kZX1dYCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgc2lnbmVkID0gc3VjY2VlZGVkID8gMSA6IC0xO1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdENvZGUgPSBzaWduZWQgKiAoYmFzZSArIG1vZHVsZUNvZGUpO1xyXG4gICAgICAgIHNfY29kZTJtZXNzYWdlW3Jlc3VsdENvZGVdID0gbWVzc2FnZSA/IG1lc3NhZ2UgOiAoYFtSRVNVTFRfQ09ERTogJHtyZXN1bHRDb2RlfV1gKTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0Q29kZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjg6rjgrbjg6vjg4jjgrPjg7zjg4njgYvjgonnmbvpjLLjgZXjgozjgabjgYTjgovjg6Hjg4Pjgrvjg7zjgrjjgpLlj5blvpdcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gcmVzdWx0Q29kZSBbaW5dIOODquOCtuODq+ODiOOCs+ODvOODiVxyXG4gICAgICogQHJldHVybnMg44Ko44Op44O844Oh44OD44K744O844K4XHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIG1lc3NhZ2VGcm9tUmVzdWx0Q29kZShyZXN1bHRDb2RlOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgICAgIGlmIChzX2NvZGUybWVzc2FnZVtyZXN1bHRDb2RlXSkge1xyXG4gICAgICAgICAgICByZXR1cm4gc19jb2RlMm1lc3NhZ2VbcmVzdWx0Q29kZV07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGB1bnJlZ2lzdGVyZWQgcmVzdWx0IGNvZGUuIFtSRVNVTFRfQ09ERTogJHtyZXN1bHRDb2RlfV1gO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOODquOCtuODq+ODiOOCs+ODvOODieOBi+OCieeZu+mMsuOBleOCjOOBpuOBhOOCi+ODquOCtuODq+ODiOOCs+ODvOODieaWh+Wtl+WIl+OCkuWPluW+l1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSByZXN1bHRDb2RlIFtpbl0g44Oq44K244Or44OI44Kz44O844OJXHJcbiAgICAgKiBAcGFyYW0gdGFnICAgICAgICBbaW5dIFRBRyDjgpLmjIflrppcclxuICAgICAqIEByZXR1cm5zIOODquOCtuODq+ODiOOCs+ODvOODieitmOWIpeaWh+Wtl+WIl1xyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBidWlsZEVycm9yTmFtZShyZXN1bHRDb2RlOiBudW1iZXIsIHRhZzogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCBwcmVmaXggPSB0YWcgfHwgXCJcIjtcclxuICAgICAgICBpZiAoQ0RQLlJFU1VMVF9DT0RFW3Jlc3VsdENvZGVdKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwcmVmaXggKyBDRFAuUkVTVUxUX0NPREVbcmVzdWx0Q29kZV0gKyBcIjogXCI7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHByZWZpeDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19"]}