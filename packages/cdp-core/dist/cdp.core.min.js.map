{"version":3,"sources":["dist/cdp.core.js"],"names":["root","factory","define","amd","CDP","exports","module","this","self","global","TAG","Function","webRoot","location","baseUrl","exec","href","toUrl","path","slice","Config","initialize","options","setTimeout","Patch","apply","success","error","errorInfo","makeErrorInfo","RESULT_CODE","ERROR_CDP_INITIALIZE_FAILED","message","console","fail","consolePatch","nodePatch","count","groupEnd","time","timeEnd","trace","group","dirxml","debug","groupCollapsed","select","info","profile","assert","msIsIndependentlyComposed","clear","dir","warn","log","profileEnd","MSApp","_MSApp_1","originalAppendChild_1","Node","prototype","appendChild","node","execUnsafeLocalFunction","call","originalInsertBefore_1","insertBefore","newElement","referenceElement","__assign","Object","assign","t","s","i","n","arguments","length","p","hasOwnProperty","CANCELED_MESSAGE","s_code2message","0","1","-1","MODULE_RESULT_CODE_RANGE","resultCode","tag","cause","canceled","msg","code","CANCELED","Error","messageFromResultCode","name","buildErrorName","makeCanceledErrorInfo","isCanceledError","ensureErrorInfo","unknown","FAILED","MODULE_RESULT_CODE_RANGE_CDP","RESULT_CODE_BASE","DECLARE_SUCCESS_CODE","base","localCode","declareResultCode","DECLARE_ERROR_CODE","SUCCEEDED","ASSIGN_RESULT_CODE_BASE","resultCodeBase","ASSIGN_RESULT_CODE","FUNCTION_CODE_RANGE","LOCAL_CODE_BASE","CORE","moduleCode","succeeded","signed","prefix"],"mappings":"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","sourcesContent":["﻿/*!\n * cdp.core.js 2.0.0\n *\n * Date: 2017-08-03T09:07:28.711Z\n */\n(function (root, factory) { if (typeof define === \"function\" && define.amd) { define(function () { return factory(root.CDP || (root.CDP = {})); }); } else if (typeof exports === \"object\") { module.exports = factory(root.CDP || (root.CDP = {})); } else { factory(root.CDP || (root.CDP = {})); } }(((this || 0).self || global), function (CDP) {\nvar CDP;\n(function (CDP) {\n    var TAG = \"[CDP] \";\n    /**\n     * @en Accessor for system global object.<br>\n     *     It'll be usually a `window` object.\n     * @ja システムの global オブジェクトへのアクセス<br>\n     *     通常は `window` オブジェクトとなる\n     */\n    CDP.global = Function(\"return this\")();\n    /**\n     * @en Accsessor for Web root location <br>\n     *     Only the browser environment will be an allocating place in index.html, and becomes effective.\n     * @ja Web root location へのアクセス <br>\n     *     index.html の配置場所となり、ブラウザ環境のみ有効となる.\n     */\n    CDP.webRoot = (function () {\n        if (CDP.global.location) {\n            var baseUrl = /(.+\\/)[^/]*#[^/]+/.exec(CDP.global.location.href);\n            if (!baseUrl) {\n                baseUrl = /(.+\\/)/.exec(CDP.global.location.href);\n            }\n            return baseUrl[1];\n        }\n    })();\n    /**\n     * @en Converter from relative path to absolute url string. <br>\n     *     If you want to access to Assets and in spite of the script location, the function is available.\n     * @ja 相対 path を絶対 URL に変換 <br>\n     *     js の配置に依存することなく `assets` アクセスしたいときに使用する.\n     *\n     * @see https://stackoverflow.com/questions/2188218/relative-paths-in-javascript-in-an-external-file\n     *\n     * @example <br>\n     *\n     * ```ts\n     *  console.log(toUrl(\"/res/data/collection.json\"));\n     *  // \"http://localhost:8080/app/res/data/collection.json\"\n     * ```\n     *\n     * @param path\n     *  - `en` set relative path from [[webRoot]].\n     *  - `ja` [[webRoot]] からの相対パスを指定\n     * @returns url string\n     *  - `en` set relative path from [[webRoot]].\n     *  - `ja` [[webRoot]] からの相対パスを指定\n     */\n    function toUrl(path) {\n        var root = CDP.webRoot || \"\";\n        if (null != path[0]) {\n            if (\"/\" === path[0]) {\n                return root + path.slice(1);\n            }\n            else {\n                return root + path;\n            }\n        }\n        else {\n            return root;\n        }\n    }\n    CDP.toUrl = toUrl;\n    /**\n     * @en Accessor for global Config object.\n     * @ja Config オブジェクトへのアクセス\n     */\n    CDP.Config = CDP.Config || CDP.global.Config || {};\n    /**\n     * @en Initialize function for `cdp-core`. <br>\n     *     This function applies patch to the run time environment.\n     * @ja `cdp-core` の初期化関数<br>\n     *     環境の差分を吸収する patch を適用する.\n     */\n    function initialize(options) {\n        setTimeout(function () {\n            try {\n                CDP.Patch.apply();\n                if (options && typeof options.success === \"function\") {\n                    options.success();\n                }\n            }\n            catch (error) {\n                var errorInfo = CDP.makeErrorInfo(CDP.RESULT_CODE.ERROR_CDP_INITIALIZE_FAILED, TAG, (error && error.message) ? error.message : null, error);\n                console.error(errorInfo.message);\n                if (options && typeof options.fail === \"function\") {\n                    options.fail(errorInfo);\n                }\n            }\n        });\n    }\n    CDP.initialize = initialize;\n})(CDP || (CDP = {}));\nvar CDP;\n(function (CDP) {\n    var TAG = \"[CDP.Patch] \";\n    /**\n     * @en Utility class for appling the patch to the run time environment.\n     * @ja 実行環境用 Patch 適用ユーティリティクラス\n     *\n     * @internal\n     */\n    var Patch = (function () {\n        function Patch() {\n        }\n        ///////////////////////////////////////////////////////////////////////\n        // public static methods:\n        /**\n         * @en Apply the patch\n         * @ja パッチの適用\n         *\n         * @internal\n         */\n        Patch.apply = function () {\n            Patch.consolePatch();\n            Patch.nodePatch();\n        };\n        ///////////////////////////////////////////////////////////////////////\n        // private static methods:\n        // console 用 patch\n        Patch.consolePatch = function () {\n            if (null == CDP.global.console || null == CDP.global.console.error) {\n                CDP.global.console = {\n                    count: function () { },\n                    groupEnd: function () { },\n                    time: function () { },\n                    timeEnd: function () { },\n                    trace: function () { },\n                    group: function () { },\n                    dirxml: function () { },\n                    debug: function () { },\n                    groupCollapsed: function () { },\n                    select: function () { },\n                    info: function () { },\n                    profile: function () { },\n                    assert: function () { },\n                    msIsIndependentlyComposed: function () { },\n                    clear: function () { },\n                    dir: function () { },\n                    warn: function () { },\n                    error: function () { },\n                    log: function () { },\n                    profileEnd: function () { }\n                };\n            }\n        };\n        // WinRT 用 patch\n        Patch.nodePatch = function () {\n            if (\"object\" === typeof MSApp) {\n                var _MSApp_1 = MSApp;\n                var originalAppendChild_1 = Node.prototype.appendChild;\n                Node.prototype.appendChild = function (node) {\n                    var self = this;\n                    return _MSApp_1.execUnsafeLocalFunction(function () {\n                        return originalAppendChild_1.call(self, node);\n                    });\n                };\n                var originalInsertBefore_1 = Node.prototype.insertBefore;\n                Node.prototype.insertBefore = function (newElement, referenceElement) {\n                    var self = this;\n                    return _MSApp_1.execUnsafeLocalFunction(function () {\n                        return originalInsertBefore_1.call(self, newElement, referenceElement);\n                    });\n                };\n            }\n        };\n        return Patch;\n    }());\n    CDP.Patch = Patch;\n})(CDP || (CDP = {}));\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nvar CDP;\n(function (CDP) {\n    var CANCELED_MESSAGE = \"abort\";\n    var s_code2message = {\n        \"0\": \"operation succeeded.\",\n        \"1\": \"operation canceled.\",\n        \"-1\": \"operation failed.\"\n    };\n    ///////////////////////////////////////////////////////////////////////\n    // error utilities:\n    /**\n     * @en Common error code for the application.\n     * @ja アプリケーション全体で使用する共通エラーコード定義\n     */\n    var RESULT_CODE;\n    (function (RESULT_CODE) {\n        /** `en` general success code <br> `ja` 汎用成功コード        */\n        RESULT_CODE[RESULT_CODE[\"SUCCEEDED\"] = 0] = \"SUCCEEDED\";\n        /** `en` general cancel code  <br> `ja` 汎用キャンセルコード  */\n        RESULT_CODE[RESULT_CODE[\"CANCELED\"] = 1] = \"CANCELED\";\n        /** `en` general error code   <br> `ja` 汎用エラーコード      */\n        RESULT_CODE[RESULT_CODE[\"FAILED\"] = -1] = \"FAILED\";\n    })(RESULT_CODE = CDP.RESULT_CODE || (CDP.RESULT_CODE = {}));\n    /**\n     * @en The assignable range for the client's local result cord by which expansion is possible.\n     * @ja クライアントが拡張可能なローカルリザルトコードのアサイン可能領域\n     */\n    CDP.MODULE_RESULT_CODE_RANGE = 1000;\n    /**\n     * @en Generate the [[ErrorInfo]] object.\n     * @ja [[ErrorInfo]] オブジェクトを生成\n     *\n     * @example <br>\n     *\n     * ```ts\n     *  someAsyncFunc()\n     *      .then((result) => {\n     *          outputMessage(result);\n     *      })\n     *      .catch((reason: Error) => {\n     *          throw makeErrorInfo(\n     *              RESULT_CODE.FAILED,\n     *              TAG,\n     *              \"error occur.\",\n     *              reason  // set received error info.\n     *          );\n     *      });\n     * ```\n     *\n     * @param resultCode\n     *  - `en` set [[RESULT_CODE]] defined.\n     *  - `ja` 定義した [[RESULT_CODE]] を指定\n     * @param tag\n     *  - `en` Log tag information\n     *  - `ja` 識別情報\n     * @param message\n     *  - `en` Human readable message\n     *  - `ja` メッセージを指定\n     * @param cause\n     *  - `en` low-level Error object\n     *  - `ja` 下位のエラーを指定\n     * @returns\n     */\n    function makeErrorInfo(resultCode, tag, message, cause) {\n        var canceled = (cause && CANCELED_MESSAGE === cause.message) ? true : false;\n        var msg = canceled ? CANCELED_MESSAGE : message;\n        var code = canceled ? RESULT_CODE.CANCELED : resultCode;\n        var errorInfo = new Error(msg || messageFromResultCode(code));\n        errorInfo.name = buildErrorName(code, tag);\n        errorInfo.code = code;\n        errorInfo.cause = cause;\n        return errorInfo;\n    }\n    CDP.makeErrorInfo = makeErrorInfo;\n    /**\n     * @en Generate canceled error information. <br>\n     *     The [[ErrorInfo]] object generated by this function has [[RESULT_CODE.CANCELED]] code.\n     * @ja キャンセルエラー情報生成 <br>\n     *     この関数で生成された [[ErrorInfo]] は [[RESULT_CODE.CANCELED]] を格納する\n     *\n     * @param tag\n     *  - `en` Log tag information\n     *  - `ja` 識別情報\n     * @param cause\n     *  - `en` low-level Error object\n     *  - `ja` 下位のエラーを指定\n     * @returns\n     */\n    function makeCanceledErrorInfo(tag, cause) {\n        return makeErrorInfo(RESULT_CODE.CANCELED, tag, CANCELED_MESSAGE, cause);\n    }\n    CDP.makeCanceledErrorInfo = makeCanceledErrorInfo;\n    /**\n     * @es Judge the error is canceled.\n     * @ja エラー情報がキャンセルされたものか判定\n     *\n     * @example <br>\n     *\n     * ```ts\n     *  :\n     *  .catch((reason: ErrorInfo) => {\n     *      if (!isCanceledError(reason)) {\n     *          handleErrorInfo(reason);\n     *      }\n     *   });\n     *  :\n     * ```\n     *\n     * @param error\n     * @returns\n     *  - `en` true: canceled error / false: others\n     *  - `ja` true: キャンセル / false: その他エラー\n     */\n    function isCanceledError(error) {\n        var errorInfo = error;\n        if (errorInfo) {\n            if (RESULT_CODE.CANCELED === errorInfo.code || CANCELED_MESSAGE === errorInfo.message) {\n                return true;\n            }\n        }\n        return false;\n    }\n    CDP.isCanceledError = isCanceledError;\n    /**\n     * @es Convert from any type error information to [[ErrorInfo]] object.\n     * @jp あらゆるエラー入力を [[ErrorInfo]] に変換\n     */\n    function ensureErrorInfo(cause) {\n        var errorInfo = cause;\n        var unknown = {\n            name: \"\",\n            code: RESULT_CODE.FAILED,\n            message: \"unknown error\",\n        };\n        if (errorInfo) {\n            if (isCanceledError(errorInfo)) {\n                return errorInfo;\n            }\n            else if (\"string\" === typeof cause) {\n                return __assign({}, unknown, { message: cause });\n            }\n            else if (\"object\" === typeof cause) {\n                return __assign({}, unknown, { message: cause.message }, cause);\n            }\n        }\n        return unknown;\n    }\n    CDP.ensureErrorInfo = ensureErrorInfo;\n    /**\n     * @internal for CDP modules assignable range.\n     */\n    CDP.MODULE_RESULT_CODE_RANGE_CDP = 100;\n    /**\n     * @en Offset value enumeration for [[RESULT_CODE]]. <br>\n     *     The client can expand a definition in other module.\n     * @ja [[RESULT_CODE]] のオフセット値 <br>\n     *     エラーコード対応するモジュール内で 定義を拡張する.\n     *\n     * @example <br>\n     *\n     * ```ts\n     *  export enum RESULT_CODE {\n     *      ERROR_SOMEMODULE_UNEXPECTED  = DECLARE_ERROR_CODE(RESULT_CODE_BASE, LOCAL_CODE_BASE.COMMON + 1, \"error unexpected.\"),\n     *      ERROR_SOMEMODULE_INVALID_ARG = DECLARE_ERROR_CODE(RESULT_CODE_BASE, LOCAL_CODE_BASE.COMMON + 2, \"invalid arguments.\"),\n     *  }\n     *  ASSIGN_RESULT_CODE(RESULT_CODE);\n     * ```\n     */\n    var RESULT_CODE_BASE;\n    (function (RESULT_CODE_BASE) {\n        RESULT_CODE_BASE[RESULT_CODE_BASE[\"CDP_DECLARERATION\"] = 0] = \"CDP_DECLARERATION\";\n        //      MODULE_A = 1 * MODULE_RESULT_CODE_RANGE,    // ex) moduleA: abs(1001 ～ 1999)\n        //      MODULE_B = 2 * MODULE_RESULT_CODE_RANGE,    // ex) moduleB: abs(2001 ～ 2999)\n        //      MODULE_C = 3 * MODULE_RESULT_CODE_RANGE,    // ex) moduleC: abs(3001 ～ 3999)\n        RESULT_CODE_BASE[RESULT_CODE_BASE[\"CDP\"] = 1 * CDP.MODULE_RESULT_CODE_RANGE_CDP] = \"CDP\";\n    })(RESULT_CODE_BASE = CDP.RESULT_CODE_BASE || (CDP.RESULT_CODE_BASE = {}));\n    // \"CDP\" 以外の namespace で定義した場合は、ASSIGN ユーティリティをコールする.\n    //  ASSIGN_RESULT_CODE_BASE(RESULT_CODE_BASE);\n    /**\n     * @en Generate success code.\n     * @ja 成功コードを生成\n     *\n     * @param base\n     * @param localCode\n     * @param message\n     */\n    function DECLARE_SUCCESS_CODE(base, localCode, message) {\n        if (\"string\" === typeof base) {\n            base = CDP.RESULT_CODE_BASE[base];\n        }\n        return declareResultCode(base, localCode, message, true);\n    }\n    CDP.DECLARE_SUCCESS_CODE = DECLARE_SUCCESS_CODE;\n    /**\n     * @en Generate error code.\n     * @ja エラーコード生成\n     *\n     * @param base\n     * @param localCode\n     * @param message\n     */\n    function DECLARE_ERROR_CODE(base, localCode, message) {\n        if (\"string\" === typeof base) {\n            base = CDP.RESULT_CODE_BASE[base];\n        }\n        return declareResultCode(base, localCode, message, false);\n    }\n    CDP.DECLARE_ERROR_CODE = DECLARE_ERROR_CODE;\n    /**\n     * @en Judge success or not.\n     * @ja 成功判定\n     *\n     * @param code\n     */\n    function SUCCEEDED(code) {\n        return 0 <= code;\n    }\n    CDP.SUCCEEDED = SUCCEEDED;\n    /**\n     * @en Judge error or not.\n     * @ja 失敗判定\n     *\n     * @param code\n     */\n    function FAILED(code) {\n        return code < 0;\n    }\n    CDP.FAILED = FAILED;\n    /**\n     * @en Assign declared [[RESULT_CODE_BASE]] to root enumeration.<br>\n     *     (It's necessary also to merge enum in the module system environment.)\n     * @ja 拡張した [[RESULT_CODE_BASE]] を ルート enum にアサイン<br>\n     *     モジュールシステム環境においても、enum をマージするために必要\n     */\n    function ASSIGN_RESULT_CODE_BASE(resultCodeBase) {\n        CDP.RESULT_CODE_BASE = __assign({}, CDP.RESULT_CODE_BASE, resultCodeBase);\n    }\n    CDP.ASSIGN_RESULT_CODE_BASE = ASSIGN_RESULT_CODE_BASE;\n    /**\n     * @en Assign declared [[ASSIGN_RESULT_CODE]] to root enumeration.\n     *     (It's necessary also to merge enum in the module system environment.)\n     * @ja 拡張した [[ASSIGN_RESULT_CODE]] を ルート enum にアサイン\n     *     モジュールシステム環境においても、enum をマージするために必要\n     */\n    function ASSIGN_RESULT_CODE(resultCode) {\n        CDP.RESULT_CODE = __assign({}, CDP.RESULT_CODE, resultCode);\n    }\n    CDP.ASSIGN_RESULT_CODE = ASSIGN_RESULT_CODE;\n    ///////////////////////////////////////////////////////////////////////\n    // module error declaration:\n    var FUNCTION_CODE_RANGE = 10;\n    // @brief cdp.core 内のローカルコードオフセット値\n    var LOCAL_CODE_BASE;\n    (function (LOCAL_CODE_BASE) {\n        LOCAL_CODE_BASE[LOCAL_CODE_BASE[\"CORE\"] = 0] = \"CORE\";\n        LOCAL_CODE_BASE[LOCAL_CODE_BASE[\"PATCH\"] = 1 * FUNCTION_CODE_RANGE] = \"PATCH\";\n    })(LOCAL_CODE_BASE || (LOCAL_CODE_BASE = {}));\n    /**\n     * @internal <br>\n     *\n     * @en Error code definition of `cdp-core`.\n     * @ja `cdp-core` のエラーコード定義\n     */\n    (function (RESULT_CODE) {\n        RESULT_CODE[RESULT_CODE[\"ERROR_CDP_DECLARATION_CDP\"] = 0] = \"ERROR_CDP_DECLARATION_CDP\";\n        RESULT_CODE[RESULT_CODE[\"ERROR_CDP_INITIALIZE_FAILED\"] = DECLARE_ERROR_CODE(RESULT_CODE_BASE.CDP, LOCAL_CODE_BASE.CORE + 1, \"initialized failed.\")] = \"ERROR_CDP_INITIALIZE_FAILED\";\n    })(RESULT_CODE = CDP.RESULT_CODE || (CDP.RESULT_CODE = {}));\n    // \"CDP\" 以外の namespace で定義した場合は、ASSIGN ユーティリティをコールする.\n    //  ASSIGN_RESULT_CODE_BASE(RESULT_CODE);\n    ///////////////////////////////////////////////////////////////////////\n    // private static methods:\n    // RESULT_CODE の登録\n    function declareResultCode(base, moduleCode, message, succeeded) {\n        if (succeeded === void 0) { succeeded = false; }\n        if (moduleCode <= 0 || CDP.MODULE_RESULT_CODE_RANGE <= moduleCode) {\n            console.error(\"declareResultCode(), invalid localCode range. [localCode: \" + moduleCode + \"]\");\n            return;\n        }\n        var signed = succeeded ? 1 : -1;\n        var resultCode = signed * (base + moduleCode);\n        s_code2message[resultCode] = message ? message : (\"[RESULT_CODE: \" + resultCode + \"]\");\n        return resultCode;\n    }\n    // RESULT_CODE から登録されているメッセージを取得\n    function messageFromResultCode(resultCode) {\n        if (s_code2message[resultCode]) {\n            return s_code2message[resultCode];\n        }\n        else {\n            return \"unregistered result code. [RESULT_CODE: \" + resultCode + \"]\";\n        }\n    }\n    // RESULT_CODE から登録されている RESULT_CODE 文字列を取得\n    function buildErrorName(resultCode, tag) {\n        var prefix = tag || \"\";\n        if (CDP.RESULT_CODE[resultCode]) {\n            return prefix + CDP.RESULT_CODE[resultCode] + \": \";\n        }\n        else {\n            return prefix;\n        }\n    }\n})(CDP || (CDP = {}));\n\nreturn CDP; }));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"]}