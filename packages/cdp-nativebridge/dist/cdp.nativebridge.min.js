/*!
 * cdp.nativebridge.js 2.0.0
 *
 * Date: 2017-07-06T12:11:49.399Z
 */
(function(root,factory){if(typeof define==="function"&&define.amd){define(["cdp.promise"],function(){return factory(root.CDP||(root.CDP={}),root.jQuery||root.$)})}else{factory(root.CDP||(root.CDP={}),root.jQuery||root.$)}})((this||0).self||global,function(CDP,$){CDP.NativeBridge=CDP.NativeBridge||{};var CDP;(function(CDP){var NativeBridge;(function(NativeBridge){var TAG="[CDP.NativeBridge.Utils] ";var Utils=function(){function Utils(){}Utils.defineResultCode=function(errorCode){Object.defineProperty(NativeBridge,errorCode,{get:function(){if(Utils.s_pluginReady){return CDP.Plugin.NativeBridge[errorCode]}else{return null}},enumerable:true,configurable:true})};Utils.waitForPluginReady=function(){var df=$.Deferred();if(Utils.s_pluginReady){return $.Deferred().resolve()}try{var channel=cordova.require("cordova/channel");channel.onCordovaReady.subscribe(function(){if(null!=CDP.Plugin.NativeBridge){Utils.s_pluginReady=true;df.resolve()}else{df.reject(TAG+"'cordova-plugin-cdp-nativebridge' cordova plugin required.")}})}catch(error){df.reject(TAG+"cordova required.")}return df.promise()};Utils.makePromise=function(df){return CDP.makePromise(df,{_bridge:null,_taskId:null,abort:function(info){var _this=this;var detail=$.extend({code:NativeBridge.ERROR_CANCEL,message:"abort",name:TAG+"ERROR_CANCEL",taskId:this._taskId},info);var cancel=function(){if(null!=_this._bridge&&null!=_this._taskId){_this._bridge.cancel(_this._taskId,detail)}df.reject(detail)};if(null!=this.dependency){if(this.dependency.abort){this.dependency.abort(detail)}else{console.error(TAG+"[call] dependency object doesn't have 'abort()' method.")}if(this.callReject&&"pending"===this.state()){cancel()}}else if("pending"===this.state()){cancel()}}})};Utils.extend=function(protoProps,staticProps){var parent=this;var child;if(protoProps&&protoProps.hasOwnProperty("constructor")){child=protoProps.constructor}else{child=function(){return parent.apply(this,arguments)}}$.extend(child,parent,staticProps);var Surrogate=function(){this.constructor=child};Surrogate.prototype=parent.prototype;child.prototype=new Surrogate;if(protoProps){$.extend(child.prototype,protoProps)}child.__super__=parent.prototype;return child};Utils.s_pluginReady=false;return Utils}();NativeBridge.Utils=Utils})(NativeBridge=CDP.NativeBridge||(CDP.NativeBridge={}))})(CDP||(CDP={}));var CDP;(function(CDP){var NativeBridge;(function(NativeBridge){var TAG="[CDP.NativeBridge.Gate] ";NativeBridge.Utils.defineResultCode("SUCCESS_OK");NativeBridge.Utils.defineResultCode("SUCCESS_PROGRESS");NativeBridge.Utils.defineResultCode("ERROR_FAIL");NativeBridge.Utils.defineResultCode("ERROR_CANCEL");NativeBridge.Utils.defineResultCode("ERROR_INVALID_ARG");NativeBridge.Utils.defineResultCode("ERROR_NOT_IMPLEMENT");NativeBridge.Utils.defineResultCode("ERROR_NOT_SUPPORT");NativeBridge.Utils.defineResultCode("ERROR_INVALID_OPERATION");NativeBridge.Utils.defineResultCode("ERROR_CLASS_NOT_FOUND");NativeBridge.Utils.defineResultCode("ERROR_METHOD_NOT_FOUND");var Gate=function(){function Gate(feature,options){var _this=this;NativeBridge.Utils.waitForPluginReady().then(function(){_this._bridge=new CDP.Plugin.NativeBridge(feature,options);_this._options=$.extend({receiveParams:true},options)}).catch(function(reason){throw Error(reason)})}Gate.prototype.exec=function(method,args,options){var _this=this;var df=$.Deferred();var promise=NativeBridge.Utils.makePromise(df);var opt=$.extend({},this._options,options);NativeBridge.Utils.waitForPluginReady().then(function(){var taskId=_this._bridge.exec(function(result){if(NativeBridge.SUCCESS_PROGRESS===result.code){if(opt.receiveParams){df.notify.apply(df,result.params.concat([result]))}else{df.notify(result)}}else{if(opt.receiveParams){df.resolve.apply(df,result.params.concat([result]))}else{df.resolve(result)}}},function(error){df.reject(error)},method,args,options);promise._bridge=_this._bridge;promise._taskId=taskId}).catch(function(){df.reject(_this.makeFatal())});return promise};Gate.prototype.cancel=function(options){var _this=this;var df=$.Deferred();NativeBridge.Utils.waitForPluginReady().then(function(){_this._bridge.cancel(null,options,function(result){df.resolve(result)},function(error){df.reject(error)})}).catch(function(){df.reject(_this.makeFatal())});return df.promise()};Gate.prototype.dispose=function(options){var _this=this;var df=$.Deferred();NativeBridge.Utils.waitForPluginReady().then(function(){_this._bridge.dispose(options,function(result){df.resolve(result)},function(error){df.reject(error)})}).catch(function(){df.reject(_this.makeFatal())});return df.promise()};Object.defineProperty(Gate.prototype,"bridge",{get:function(){return this._bridge},enumerable:true,configurable:true});Gate.prototype.makeFatal=function(){var msg=TAG+"fatal error. 'cordova-plugin-cdp-nativebridge' is not available.";console.error(msg);return{code:null,name:TAG+"ERROR_FATAL",message:msg}};Gate.extend=NativeBridge.Utils.extend;return Gate}();NativeBridge.Gate=Gate})(NativeBridge=CDP.NativeBridge||(CDP.NativeBridge={}))})(CDP||(CDP={}));return CDP.NativeBridge});
//# sourceMappingURL=cdp.nativebridge.min.js.map